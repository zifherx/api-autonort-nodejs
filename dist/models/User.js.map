{"version":3,"sources":["../../src/models/User.js"],"names":["userSchema","Schema","username","type","String","unique","name","required","email","phone","password","sucursal","direccion","pais","codigo_postal","about","roles","ref","Types","ObjectId","status","Boolean","default","online","avatar","timestamps","versionKey","statics","encryptPassword","clave","bcrypt","genSalt","salt","hash","comparePassword","claveRecibida","compare"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC1BC,EAAAA,QAAQ,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,MAAM,EAAE;AAAxB,GADgB;AAE1BC,EAAAA,IAAI,EAAE;AAAEH,IAAAA,IAAI,EAAEC,MAAR;AAAgBG,IAAAA,QAAQ,EAAE;AAA1B,GAFoB;AAG1BC,EAAAA,KAAK,EAAE;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GAHmB;AAI1BK,EAAAA,KAAK,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GAJmB;AAK1BM,EAAAA,QAAQ,EAAE;AAAEP,IAAAA,IAAI,EAAEC,MAAR;AAAgBG,IAAAA,QAAQ,EAAE;AAA1B,GALgB;AAM1BI,EAAAA,QAAQ,EAAE;AAAER,IAAAA,IAAI,EAAEC,MAAR;AAAgBG,IAAAA,QAAQ,EAAE;AAA1B,GANgB;AAO1BK,EAAAA,SAAS,EAAE;AAAET,IAAAA,IAAI,EAAEC;AAAR,GAPe;AAQ1BS,EAAAA,IAAI,EAAE;AAAEV,IAAAA,IAAI,EAAEC;AAAR,GARoB;AAS1BU,EAAAA,aAAa,EAAE;AAAEX,IAAAA,IAAI,EAAEC;AAAR,GATW;AAU1BW,EAAAA,KAAK,EAAE;AAAEZ,IAAAA,IAAI,EAAEC;AAAR,GAVmB;AAW1BY,EAAAA,KAAK,EAAE;AAAEC,IAAAA,GAAG,EAAE,MAAP;AAAed,IAAAA,IAAI,EAAEF,iBAAOiB,KAAP,CAAaC;AAAlC,GAXmB;AAY1BC,EAAAA,MAAM,EAAE;AAAEjB,IAAAA,IAAI,EAAEkB,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAZkB;AAa1BC,EAAAA,MAAM,EAAE;AAAEpB,IAAAA,IAAI,EAAEkB,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAbkB;AAc1BE,EAAAA,MAAM,EAAE;AAAErB,IAAAA,IAAI,EAAEC;AAAR;AAdkB,CAAX,EAehB;AACCqB,EAAAA,UAAU,EAAE,IADb;AAECC,EAAAA,UAAU,EAAE;AAFb,CAfgB,CAAnB;;AAoBA1B,UAAU,CAAC2B,OAAX,CAAmBC,eAAnB;AAAA,qFAAqC,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdC,kBAAOC,OAAP,CAAe,EAAf,CADc;;AAAA;AAC3BC,YAAAA,IAD2B;AAAA;AAAA,mBAEpBF,kBAAOG,IAAP,CAAYJ,KAAZ,EAAmBG,IAAnB,CAFoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAKAhC,UAAU,CAAC2B,OAAX,CAAmBO,eAAnB;AAAA,sFAAqC,kBAAML,KAAN,EAAaM,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBL,kBAAOM,OAAP,CAAeP,KAAf,EAAsBM,aAAtB,CADoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;eAIe,qBAAM,MAAN,EAAcnC,UAAd,C","sourcesContent":["import { Schema, model } from 'mongoose'\r\nimport bcrypt from 'bcryptjs'\r\n\r\nconst userSchema = new Schema({\r\n    username: { type: String, unique: true },\r\n    name: { type: String, required: true },\r\n    email: { type: String },\r\n    phone: { type: String },\r\n    password: { type: String, required: true },\r\n    sucursal: { type: String, required: true },\r\n    direccion: { type: String },\r\n    pais: { type: String },\r\n    codigo_postal: { type: String },\r\n    about: { type: String },\r\n    roles: { ref: \"Role\", type: Schema.Types.ObjectId },\r\n    status: { type: Boolean, default: true },\r\n    online: { type: Boolean, default: false },\r\n    avatar: { type: String }\r\n}, {\r\n    timestamps: true,\r\n    versionKey: false\r\n});\r\n\r\nuserSchema.statics.encryptPassword = async(clave) => {\r\n    const salt = await bcrypt.genSalt(10)\r\n    return await bcrypt.hash(clave, salt)\r\n}\r\n\r\nuserSchema.statics.comparePassword = async(clave, claveRecibida) => {\r\n    return await bcrypt.compare(clave, claveRecibida);\r\n}\r\n\r\nexport default model('User', userSchema);"],"file":"User.js"}