{"version":3,"sources":["../../src/models/User.js"],"names":["userSchema","Schema","name","type","String","required","username","unique","email","phone","password","sucursal","sucursalE","Types","ObjectId","ref","direccion","pais","codigo_postal","about","roles","status","Boolean","default","estado","online","avatar","timestamps","versionKey","statics","encryptPassword","clave","bcrypt","genSalt","salt","hash","comparePassword","claveRecibida","compare"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,UAAU,GAAG,IAAIC,gBAAJ,CAAW;AAC1BC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GADoB;AAE1BC,EAAAA,QAAQ,EAAE;AAAEH,IAAAA,IAAI,EAAEC,MAAR;AAAgBG,IAAAA,MAAM,EAAE;AAAxB,GAFgB;AAG1BC,EAAAA,KAAK,EAAE;AAAEL,IAAAA,IAAI,EAAEC;AAAR,GAHmB;AAI1BK,EAAAA,KAAK,EAAE;AAAEN,IAAAA,IAAI,EAAEC;AAAR,GAJmB;AAK1BM,EAAAA,QAAQ,EAAE;AAAEP,IAAAA,IAAI,EAAEC,MAAR;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GALgB;AAM1BM,EAAAA,QAAQ,EAAE;AAAER,IAAAA,IAAI,EAAEC;AAAR,GANgB;AAO1BQ,EAAAA,SAAS,EAAE;AAAET,IAAAA,IAAI,EAAEF,iBAAOY,KAAP,CAAaC,QAArB;AAA+BC,IAAAA,GAAG,EAAE;AAApC,GAPe;AAQ1BC,EAAAA,SAAS,EAAE;AAAEb,IAAAA,IAAI,EAAEC;AAAR,GARe;AAS1Ba,EAAAA,IAAI,EAAE;AAAEd,IAAAA,IAAI,EAAEC;AAAR,GAToB;AAU1Bc,EAAAA,aAAa,EAAE;AAAEf,IAAAA,IAAI,EAAEC;AAAR,GAVW;AAW1Be,EAAAA,KAAK,EAAE;AAAEhB,IAAAA,IAAI,EAAEC;AAAR,GAXmB;AAY1BgB,EAAAA,KAAK,EAAE,CAAC;AAAEL,IAAAA,GAAG,EAAE,MAAP;AAAeZ,IAAAA,IAAI,EAAEF,iBAAOY,KAAP,CAAaC;AAAlC,GAAD,CAZmB;AAa1BO,EAAAA,MAAM,EAAE;AAAElB,IAAAA,IAAI,EAAEmB,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAbkB;AAc1BC,EAAAA,MAAM,EAAE;AAAErB,IAAAA,IAAI,EAAEmB,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAdkB;AAe1BE,EAAAA,MAAM,EAAE;AAAEtB,IAAAA,IAAI,EAAEmB,OAAR;AAAiBC,IAAAA,OAAO,EAAE;AAA1B,GAfkB;AAgB1BG,EAAAA,MAAM,EAAE;AAAEvB,IAAAA,IAAI,EAAEC,MAAR;AAAgBmB,IAAAA,OAAO,EAAE;AAAzB;AAhBkB,CAAX,EAiBhB;AACCI,EAAAA,UAAU,EAAE,IADb;AAECC,EAAAA,UAAU,EAAE;AAFb,CAjBgB,CAAnB;;AAsBA5B,UAAU,CAAC6B,OAAX,CAAmBC,eAAnB;AAAA,qFAAqC,iBAAMC,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACdC,kBAAOC,OAAP,CAAe,EAAf,CADc;;AAAA;AAC3BC,YAAAA,IAD2B;AAAA;AAAA,mBAEpBF,kBAAOG,IAAP,CAAYJ,KAAZ,EAAmBG,IAAnB,CAFoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAKAlC,UAAU,CAAC6B,OAAX,CAAmBO,eAAnB;AAAA,sFAAqC,kBAAML,KAAN,EAAaM,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBL,kBAAOM,OAAP,CAAeP,KAAf,EAAsBM,aAAtB,CADoB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;eAIe,qBAAM,MAAN,EAAcrC,UAAd,C","sourcesContent":["import { Schema, model } from 'mongoose'\r\nimport bcrypt from 'bcryptjs'\r\n\r\nconst userSchema = new Schema({\r\n    name: { type: String, required: true },\r\n    username: { type: String, unique: true },\r\n    email: { type: String },\r\n    phone: { type: String },\r\n    password: { type: String, required: true },\r\n    sucursal: { type: String },\r\n    sucursalE: { type: Schema.Types.ObjectId, ref: 'Sucursal'},\r\n    direccion: { type: String },\r\n    pais: { type: String },\r\n    codigo_postal: { type: String },\r\n    about: { type: String },\r\n    roles: [{ ref: \"Role\", type: Schema.Types.ObjectId }],\r\n    status: { type: Boolean, default: true },\r\n    estado: { type: Boolean, default: true },\r\n    online: { type: Boolean, default: false },\r\n    avatar: { type: String, default: 'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg' }\r\n}, {\r\n    timestamps: true,\r\n    versionKey: false\r\n});\r\n\r\nuserSchema.statics.encryptPassword = async(clave) => {\r\n    const salt = await bcrypt.genSalt(10)\r\n    return await bcrypt.hash(clave, salt)\r\n}\r\n\r\nuserSchema.statics.comparePassword = async(clave, claveRecibida) => {\r\n    return await bcrypt.compare(clave, claveRecibida);\r\n}\r\n\r\nexport default model('User', userSchema);"],"file":"User.js"}