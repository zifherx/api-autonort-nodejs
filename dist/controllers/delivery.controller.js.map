{"version":3,"sources":["../../src/controllers/delivery.controller.js"],"names":["createDelivery","req","res","body","tramite","fecha_entrega_cliente","hora_entrega_cliente","status","empleado","nuevoRegistro","Delivery","Customer","find","name","$in","cliente","cod_cliente","map","a","_id","Sale","expediente","cod_expediente","b","Record","sales","inmatriculado","c","User","username","foundEmployee","em","cod_tramite","findByIdAndUpdate","pasoaEntrega","new","save","registroGuardado","json","message","console","log","getAll","filtro1","path","populate","query","length","getDeliveryById","deliveryId","params","findById","updateDeliveryById","x","objActualizado","deleteDeliveryById","findByIdAndDelete","objeto"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEO,IAAMA,cAAc;AAAA,qFAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACsDD,GAAG,CAACE,IAD1D,EACpBC,OADoB,aACpBA,OADoB,EACXC,qBADW,aACXA,qBADW,EACYC,oBADZ,aACYA,oBADZ,EACkCC,MADlC,aACkCA,MADlC,EACyCC,QADzC,aACyCA,QADzC;AAAA;AAIpBC,YAAAA,aAJoB,GAIJ,IAAIC,iBAAJ,CAAa;AACjCN,cAAAA,OAAO,EAAPA,OADiC;AAEjCC,cAAAA,qBAAqB,EAArBA,qBAFiC;AAGjCC,cAAAA,oBAAoB,EAApBA,oBAHiC;AAIjCC,cAAAA,MAAM,EAANA;AAJiC,aAAb,CAJI,EAU1B;;AAV0B;AAAA,mBAWJI,kBAASC,IAAT,CAAc;AAAEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,GAAG,EAAEV;AAAP;AAAR,aAAd,CAXI;;AAAA;AAWpBW,YAAAA,OAXoB;AAYpBC,YAAAA,WAZoB,GAYND,OAAO,CAACE,GAAR,CAAY,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACC,GAAT;AAAA,aAAZ,CAZM,EAa1B;;AAb0B;AAAA,mBAcDC,cAAKR,IAAL,CAAU;AAAEG,cAAAA,OAAO,EAAEC;AAAX,aAAV,CAdC;;AAAA;AAcpBK,YAAAA,UAdoB;AAepBC,YAAAA,cAfoB,GAeHD,UAAU,CAACJ,GAAX,CAAe,UAACM,CAAD;AAAA,qBAAOA,CAAC,CAACJ,GAAT;AAAA,aAAf,CAfG,EAgB1B;;AAhB0B;AAAA,mBAiBEK,gBAAOZ,IAAP,CAAY;AAAEa,cAAAA,KAAK,EAAEH;AAAT,aAAZ,CAjBF;;AAAA;AAiBpBI,YAAAA,aAjBoB;AAkB1BjB,YAAAA,aAAa,CAACL,OAAd,GAAwBsB,aAAa,CAACT,GAAd,CAAkB,UAACU,CAAD;AAAA,qBAAOA,CAAC,CAACR,GAAT;AAAA,aAAlB,CAAxB,CAlB0B,CAoB1B;;AApB0B;AAAA,mBAqBES,cAAKhB,IAAL,CAAU;AAAEiB,cAAAA,QAAQ,EAAE;AAAEf,gBAAAA,GAAG,EAAEN;AAAP;AAAZ,aAAV,CArBF;;AAAA;AAqBpBsB,YAAAA,aArBoB;AAsB1BrB,YAAAA,aAAa,CAACD,QAAd,GAAyBsB,aAAa,CAACb,GAAd,CAAkB,UAAAc,EAAE;AAAA,qBAAIA,EAAE,CAACZ,GAAP;AAAA,aAApB,CAAzB,CAtB0B,CAwB1B;;AACMa,YAAAA,WAzBoB,GAyBNN,aAAa,CAAC,CAAD,CAAb,CAAiBP,GAzBX;AAAA;AAAA,mBA0BVK,gBAAOS,iBAAP,CAAyBD,WAAzB,EAAsC;AAACE,cAAAA,YAAY,EAAE;AAAf,aAAtC,EAAyD;AAACC,cAAAA,GAAG,EAAE;AAAN,aAAzD,CA1BU;;AAAA;AA0BpBjB,YAAAA,CA1BoB;AAAA;AAAA,mBA8BKT,aAAa,CAAC2B,IAAd,EA9BL;;AAAA;AA8BpBC,YAAAA,gBA9BoB;;AAgC1B,gBAAIA,gBAAJ,EAAsB;AACpBnC,cAAAA,GAAG,CAACoC,IAAJ,CAAS;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACD;;AAlCyB;AAAA;;AAAA;AAAA;AAAA;AAoC1BC,YAAAA,OAAO,CAACC,GAAR;AACAvC,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB;;AArC0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdvC,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AAyCA,IAAM0C,MAAM;AAAA,sFAAG,kBAAOzC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdyC,YAAAA,OADc,GACJ;AACdC,cAAAA,IAAI,EAAE,SADQ;AAEdC,cAAAA,QAAQ,EAAE;AAAED,gBAAAA,IAAI,EAAE,OAAR;AAAiBC,gBAAAA,QAAQ,EAAE;AAA3B;AAFI,aADI;AAAA;AAAA;AAAA,mBAMEnC,kBAASE,IAAT,GAAgBiC,QAAhB,CAAyBF,OAAzB,EAAkCE,QAAlC,CAA2C,UAA3C,CANF;;AAAA;AAMZC,YAAAA,KANY;;AAAA,kBAOdA,KAAK,CAACC,MAAN,GAAe,CAPD;AAAA;AAAA;AAAA;;AAQhB7C,YAAAA,GAAG,CAACoC,IAAJ,CAASQ,KAAT;AARgB;AAAA;;AAAA;AAAA,8CAUT5C,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAVS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAalBC,YAAAA,OAAO,CAACC,GAAR;AACAvC,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAdkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANG,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAkBA,IAAMM,eAAe;AAAA,sFAAG,kBAAO/C,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACrB+C,YAAAA,UADqB,GACNhD,GAAG,CAACiD,MADE,CACrBD,UADqB;AAEvBN,YAAAA,OAFuB,GAEb;AACdC,cAAAA,IAAI,EAAE,SADQ;AAEdC,cAAAA,QAAQ,EAAE;AAAED,gBAAAA,IAAI,EAAE,OAAR;AAAiBC,gBAAAA,QAAQ,EAAE;AAA3B;AAFI,aAFa;AAAA;AAAA;AAAA,mBAQPnC,kBAASyC,QAAT,CAAkBF,UAAlB,EAA8BJ,QAA9B,CAAuCF,OAAvC,EAAgDE,QAAhD,CAAyD,UAAzD,CARO;;AAAA;AAQrBC,YAAAA,KARqB;;AAAA,iBASvBA,KATuB;AAAA;AAAA;AAAA;;AAUzB5C,YAAAA,GAAG,CAACoC,IAAJ,CAASQ,KAAT;AAVyB;AAAA;;AAAA;AAAA,8CAYlB5C,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAZkB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAe3BC,YAAAA,OAAO,CAACC,GAAR;AACAvC,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAhB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfS,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAoBA,IAAMI,kBAAkB;AAAA,sFAAG,kBAAOnD,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACxB+C,YAAAA,UADwB,GACThD,GAAG,CAACiD,MADK,CACxBD,UADwB;AAAA,yBAEyChD,GAAG,CAACE,IAF7C,EAExBC,OAFwB,cAExBA,OAFwB,EAEfC,qBAFe,cAEfA,qBAFe,EAEQC,oBAFR,cAEQA,oBAFR,EAE8BC,MAF9B,cAE8BA,MAF9B;AAAA;AAAA;AAAA,mBAMRI,kBAASC,IAAT,CAAc;AAAEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,GAAG,EAAEV;AAAP;AAAR,aAAd,CANQ;;AAAA;AAMxBW,YAAAA,OANwB;AAOxBC,YAAAA,WAPwB,GAOVD,OAAO,CAACE,GAAR,CAAY,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACC,GAAT;AAAA,aAAZ,CAPU,EAQ9B;;AAR8B;AAAA,mBASLC,cAAKR,IAAL,CAAU;AAAEG,cAAAA,OAAO,EAAEC;AAAX,aAAV,CATK;;AAAA;AASxBK,YAAAA,UATwB;AAUxBC,YAAAA,cAVwB,GAUPD,UAAU,CAACJ,GAAX,CAAe,UAACM,CAAD;AAAA,qBAAOA,CAAC,CAACJ,GAAT;AAAA,aAAf,CAVO,EAW9B;;AAX8B;AAAA,mBAYFK,gBAAOZ,IAAP,CAAY;AAAEa,cAAAA,KAAK,EAAEH;AAAT,aAAZ,CAZE;;AAAA;AAYxBI,YAAAA,aAZwB;;AAAA,kBAc3BX,OAAO,IAAI,CAdgB;AAAA;AAAA;AAAA;;AAAA,8CAerBb,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB,CAfqB;;AAAA;AAAA,kBAkB3BlB,UAAU,IAAI,CAlBa;AAAA;AAAA;AAAA;;AAAA,8CAmBrBnB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB,CAnBqB;;AAAA;AAAA,kBAsB3Bb,aAAa,IAAI,CAtBU;AAAA;AAAA;AAAA;;AAAA,8CAuBrBxB,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB,CAvBqB;;AAAA;AAAA;AAAA,mBA0BD7B,kBAASuB,iBAAT,CAA2BgB,UAA3B,EAAuC;AAClE7C,cAAAA,OAAO,EAAEsB,aAAa,CAACT,GAAd,CAAkB,UAACoC,CAAD;AAAA,uBAAOA,CAAC,CAAClC,GAAT;AAAA,eAAlB,CADyD;AAElEd,cAAAA,qBAAqB,EAArBA,qBAFkE;AAGlEC,cAAAA,oBAAoB,EAApBA,oBAHkE;AAIlEC,cAAAA,MAAM,EAANA;AAJkE,aAAvC,CA1BC;;AAAA;AA0BxB+C,YAAAA,cA1BwB;;AAAA,iBAiC3BA,cAjC2B;AAAA;AAAA;AAAA;;AAkC1BpD,YAAAA,GAAG,CAACoC,IAAJ,CAAS;AAACC,cAAAA,OAAO,EAAE;AAAV,aAAT;AAlC0B;AAAA;;AAAA;AAAA,8CAoCnBrC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB,CApCmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAuC9BC,YAAAA,OAAO,CAACC,GAAR;AACAvC,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAxC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBa,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;;;AA4CA,IAAMG,kBAAkB;AAAA,sFAAG,kBAAOtD,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB+C,YAAAA,UADsB,GACPhD,GAAG,CAACiD,MADG,CACtBD,UADsB;AAAA;AAAA;AAAA,mBAKTvC,kBAAS8C,iBAAT,CAA2BP,UAA3B,CALS;;AAAA;AAKxBQ,YAAAA,MALwB;;AAAA,iBAO3BA,MAP2B;AAAA;AAAA;AAAA;;AAQ1BvD,YAAAA,GAAG,CAACoC,IAAJ,CAAS;AAACC,cAAAA,OAAO,EAAE;AAAV,aAAT;AAR0B;AAAA;;AAAA;AAAA,8CAUnBrC,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAACC,cAAAA,OAAO,EAAE;AAAV,aAArB,CAVmB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAa9BC,YAAAA,OAAO,CAACC,GAAR;AACAvC,YAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgB+B,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAd8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBgB,kBAAkB;AAAA;AAAA;AAAA,GAAxB","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport Delivery from \"../models/Delivery\";\r\nimport Record from \"../models/Record\";\r\nimport Sale from \"../models/Sale\";\r\nimport User from \"../models/User\";\r\n\r\nexport const createDelivery = async (req, res) => {\r\n  const { tramite, fecha_entrega_cliente, hora_entrega_cliente, status,empleado } = req.body;\r\n\r\n  try {\r\n    const nuevoRegistro = new Delivery({\r\n      tramite,\r\n      fecha_entrega_cliente,\r\n      hora_entrega_cliente,\r\n      status,\r\n    });\r\n    //Cliente\r\n    const cliente = await Customer.find({ name: { $in: tramite } });\r\n    const cod_cliente = cliente.map((a) => a._id);\r\n    //Sale\r\n    const expediente = await Sale.find({ cliente: cod_cliente });\r\n    const cod_expediente = expediente.map((b) => b._id);\r\n    //Record\r\n    const inmatriculado = await Record.find({ sales: cod_expediente });\r\n    nuevoRegistro.tramite = inmatriculado.map((c) => c._id);\r\n\r\n    //Empleado\r\n    const foundEmployee = await User.find({ username: { $in: empleado } });\r\n    nuevoRegistro.empleado = foundEmployee.map(em => em._id);\r\n\r\n    //Cambio de filtro al Expediente\r\n    const cod_tramite = inmatriculado[0]._id;\r\n    const a = await Record.findByIdAndUpdate(cod_tramite, {pasoaEntrega: 1}, {new: true})\r\n    /* console.log(cod_tramite);\r\n    console.log(a); */\r\n\r\n    const registroGuardado = await nuevoRegistro.save();\r\n\r\n    if (registroGuardado) {\r\n      res.json({ message: \"Entrega creada con Ã©xito\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const getAll = async (req, res) => {\r\n  const filtro1 = {\r\n    path: \"tramite\",\r\n    populate: { path: \"sales\", populate: \"auto cliente vendedor empleado\" },\r\n  };\r\n  try {\r\n    const query = await Delivery.find().populate(filtro1).populate('empleado');\r\n    if (query.length > 0) {\r\n      res.json(query);\r\n    } else {\r\n      return res.status(404).json({ message: \"No existen Entregas\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const getDeliveryById = async (req, res) => {\r\n  const { deliveryId } = req.params;\r\n  const filtro1 = {\r\n    path: \"tramite\",\r\n    populate: { path: \"sales\", populate: \"auto cliente vendedor empleado\" },\r\n  };\r\n\r\n  try {\r\n    const query = await Delivery.findById(deliveryId).populate(filtro1).populate('empleado');\r\n    if (query) {\r\n      res.json(query);\r\n    } else {\r\n      return res.status(404).json({ message: \"No existe el Expediente\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const updateDeliveryById = async (req, res) => {\r\n  const { deliveryId } = req.params;\r\n  const { tramite, fecha_entrega_cliente, hora_entrega_cliente, status } = req.body;\r\n\r\n  try {\r\n    //Cliente\r\n    const cliente = await Customer.find({ name: { $in: tramite } });\r\n    const cod_cliente = cliente.map((a) => a._id);\r\n    //Sale\r\n    const expediente = await Sale.find({ cliente: cod_cliente });\r\n    const cod_expediente = expediente.map((b) => b._id);\r\n    //Record\r\n    const inmatriculado = await Record.find({ sales: cod_expediente });\r\n\r\n    if(cliente <= 0){\r\n      return res.status(404).json({message: 'Cliente ingresado no existe'});\r\n    }\r\n\r\n    if(expediente <= 0){\r\n      return res.status(404).json({message: 'Cliente ingresado no cuenta con expediente'});\r\n    }\r\n\r\n    if(inmatriculado <= 0){\r\n      return res.status(404).json({message: 'El expediente no se encuentra en trÃ¡mites'});\r\n    }\r\n\r\n    const objActualizado = await Delivery.findByIdAndUpdate(deliveryId, {\r\n      tramite: inmatriculado.map((x) => x._id),\r\n      fecha_entrega_cliente,\r\n      hora_entrega_cliente,\r\n      status,\r\n    });\r\n\r\n    if(objActualizado){\r\n        res.json({message: 'Entrega actualizada con Ã©xito'});\r\n    }else{\r\n        return res.status(404).json({message: 'No existe Expediente a Actualizar'})\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const deleteDeliveryById = async (req, res) => {\r\n    const { deliveryId } = req.params;\r\n\r\n  try {\r\n\r\n    const objeto = await Delivery.findByIdAndDelete(deliveryId);\r\n\r\n    if(objeto){\r\n        res.json({message: 'Entrega eliminada con Ã©xito'});\r\n    }else{\r\n        return res.status(404).json({message: 'No existe Expediente a Eliminar'})\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n"],"file":"delivery.controller.js"}