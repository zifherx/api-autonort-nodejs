{"version":3,"file":"statusRP.controller.js","names":["getAll","req","res","StatusRP","find","sort","value","query","length","json","total","all","status","message","console","log","getStatusRPById","statusRPId","params","findById","one","getStatusRPByActivo","estado","total_active","all_active","createStatusRP","body","name","nuevo","save","updateStatusRP","findByIdAndUpdate","deleteStatusRP","findByIdAndDelete"],"sources":["../../src/controllers/statusRP.controller.js"],"sourcesContent":["import StatusRP from '../models/StatusRP'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await StatusRP.find().sort({ value: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Estados' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getStatusRPById = async(req, res) => {\r\n    const { statusRPId } = req.params\r\n    try {\r\n        const query = await StatusRP.findById(statusRPId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Estado' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getStatusRPByActivo = async(req, res) => {\r\n    try {\r\n        const query = await StatusRP.find({ estado: true }).sort({ value: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Estados activos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createStatusRP = async(req, res) => {\r\n    const { name, value, estado } = req.body;\r\n    try {\r\n        const nuevo = new StatusRP({ name, value, estado });\r\n        const query = await nuevo.save()\r\n        if (query) {\r\n            res.json({ message: 'Estado creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateStatusRP = async(req, res) => {\r\n    const { name, value, estado } = req.body;\r\n    const { statusRPId } = req.params;\r\n    try {\r\n        const query = await StatusRP.findByIdAndUpdate(statusRPId, { name, value, estado });\r\n        if (query) {\r\n            res.json({ message: 'Estado actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Estado a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteStatusRP = async(req, res) => {\r\n    const { statusRPId } = req.params;\r\n    try {\r\n        const query = await StatusRP.findByIdAndDelete(statusRPId);\r\n        if (query) {\r\n            res.json({ message: 'Estado eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Estado a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}"],"mappings":"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"}