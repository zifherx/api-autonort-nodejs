{"version":3,"sources":["../../src/controllers/statusRP.controller.js"],"names":["getAll","req","res","StatusRP","find","sort","value","query","length","json","status","message","console","log","getStatusRPById","statusRPId","params","findById","getStatusRPByActivo","createStatusRP","body","name","nuevo","save","updateStatusRP","findByIdAndUpdate","deleteStatusRP","findByIdAndDelete"],"mappings":";;;;;;;;;;;;;AAAA;;AAEO,IAAMA,MAAM;AAAA,qFAAG,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEMC,kBAASC,IAAT,GAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAArB,CAFN;;AAAA;AAERC,YAAAA,KAFQ;;AAAA,kBAGVA,KAAK,CAACC,MAAN,GAAe,CAHL;AAAA;AAAA;AAAA;;AAIVN,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AAJU;AAAA;;AAAA;AAAA,6CAMHL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CANG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASdC,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANX,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAcA,IAAMc,eAAe;AAAA,sFAAG,kBAAMb,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBa,YAAAA,UADmB,GACJd,GAAG,CAACe,MADA,CACnBD,UADmB;AAAA;AAAA;AAAA,mBAGHZ,kBAASc,QAAT,CAAkBF,UAAlB,CAHG;;AAAA;AAGjBR,YAAAA,KAHiB;;AAAA,iBAInBA,KAJmB;AAAA;AAAA;AAAA;;AAKnBL,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AALmB;AAAA;;AAAA;AAAA,8CAOZL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUvBC,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAXuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfG,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAeA,IAAMI,mBAAmB;AAAA,sFAAG,kBAAMjB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEPC,kBAASC,IAAT,CAAc;AAAEM,cAAAA,MAAM,EAAE;AAAV,aAAd,EAAgCL,IAAhC,CAAqC;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAArC,CAFO;;AAAA;AAErBC,YAAAA,KAFqB;;AAAA,kBAGvBA,KAAK,CAACC,MAAN,GAAe,CAHQ;AAAA;AAAA;AAAA;;AAIvBN,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AAJuB;AAAA;;AAAA;AAAA,8CAMhBL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CANgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAS3BC,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAV2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBO,mBAAmB;AAAA;AAAA;AAAA,GAAzB;;;;AAcA,IAAMC,cAAc;AAAA,sFAAG,kBAAMlB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACMD,GAAG,CAACmB,IADV,EAClBC,IADkB,aAClBA,IADkB,EACZf,KADY,aACZA,KADY,EACLI,MADK,aACLA,MADK;AAAA;AAGhBY,YAAAA,KAHgB,GAGR,IAAInB,iBAAJ,CAAa;AAAEkB,cAAAA,IAAI,EAAJA,IAAF;AAAQf,cAAAA,KAAK,EAALA,KAAR;AAAeI,cAAAA,MAAM,EAANA;AAAf,aAAb,CAHQ;AAAA;AAAA,mBAIFY,KAAK,CAACC,IAAN,EAJE;;AAAA;AAIhBhB,YAAAA,KAJgB;;AAKtB,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AAPqB;AAAA;;AAAA;AAAA;AAAA;AAStBC,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAVsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdQ,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AAcA,IAAMK,cAAc;AAAA,sFAAG,kBAAMvB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACMD,GAAG,CAACmB,IADV,EAClBC,IADkB,cAClBA,IADkB,EACZf,KADY,cACZA,KADY,EACLI,MADK,cACLA,MADK;AAElBK,YAAAA,UAFkB,GAEHd,GAAG,CAACe,MAFD,CAElBD,UAFkB;AAAA;AAAA;AAAA,mBAIFZ,kBAASsB,iBAAT,CAA2BV,UAA3B,EAAuC;AAAEM,cAAAA,IAAI,EAAJA,IAAF;AAAQf,cAAAA,KAAK,EAALA,KAAR;AAAeI,cAAAA,MAAM,EAANA;AAAf,aAAvC,CAJE;;AAAA;AAIhBH,YAAAA,KAJgB;;AAKtB,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH,aAFD,MAEO;AACHT,cAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB;AACH;;AATqB;AAAA;;AAAA;AAAA;AAAA;AAWtBC,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAZsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAda,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AAgBA,IAAME,cAAc;AAAA,sFAAG,kBAAMzB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBa,YAAAA,UADkB,GACHd,GAAG,CAACe,MADD,CAClBD,UADkB;AAAA;AAAA;AAAA,mBAGFZ,kBAASwB,iBAAT,CAA2BZ,UAA3B,CAHE;;AAAA;AAGhBR,YAAAA,KAHgB;;AAAA,iBAIlBA,KAJkB;AAAA;AAAA;AAAA;;AAKlBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAAT;AALkB;AAAA;;AAAA;AAAA,8CAOXT,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUtBC,YAAAA,OAAO,CAACC,GAAR;AACAX,YAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAde,cAAc;AAAA;AAAA;AAAA,GAApB","sourcesContent":["import StatusRP from '../models/StatusRP'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await StatusRP.find().sort({ value: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Estados' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getStatusRPById = async(req, res) => {\r\n    const { statusRPId } = req.params\r\n    try {\r\n        const query = await StatusRP.findById(statusRPId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Estado' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getStatusRPByActivo = async(req, res) => {\r\n    try {\r\n        const query = await StatusRP.find({ status: true }).sort({ value: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Estados activos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createStatusRP = async(req, res) => {\r\n    const { name, value, status } = req.body;\r\n    try {\r\n        const nuevo = new StatusRP({ name, value, status });\r\n        const query = await nuevo.save()\r\n        if (query) {\r\n            res.json({ message: 'Estado creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateStatusRP = async(req, res) => {\r\n    const { name, value, status } = req.body;\r\n    const { statusRPId } = req.params;\r\n    try {\r\n        const query = await StatusRP.findByIdAndUpdate(statusRPId, { name, value, status });\r\n        if (query) {\r\n            res.json({ message: 'Estado actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Estado a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteStatusRP = async(req, res) => {\r\n    const { statusRPId } = req.params;\r\n    try {\r\n        const query = await StatusRP.findByIdAndDelete(statusRPId);\r\n        if (query) {\r\n            res.json({ message: 'Estado eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Estado a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"statusRP.controller.js"}