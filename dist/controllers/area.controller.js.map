{"version":3,"sources":["../../src/controllers/area.controller.js"],"names":["areaCtrl","getAll","req","res","Area","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","areaId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","newArea","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Area from \"../models/Area\";\r\n\r\nconst areaCtrl = {};\r\n\r\nareaCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Area.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Areas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nareaCtrl.getOneById = async(req, res) => {\r\n    const { areaId } = req.params;\r\n    try {\r\n        const query = await Area.findById(areaId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe area' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nareaCtrl.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await Area.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen areas activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nareaCtrl.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const newArea = new Area({ name, estado });\r\n\r\n        const query = await newArea.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Area creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nareaCtrl.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { areaId } = req.params;\r\n    try {\r\n        const query = await Area.findByIdAndUpdate(areaId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Area actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe area a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nareaCtrl.deleteOneById = async(req, res) => {\r\n    const { areaId } = req.params;\r\n    try {\r\n        const query = await Area.findByIdAndDelete(areaId);\r\n        if (query) {\r\n            res.json({ message: 'Area eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe area a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default areaCtrl;"],"file":"area.controller.js"}