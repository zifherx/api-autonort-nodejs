{"version":3,"sources":["../../src/controllers/tipoProducto.controller.js"],"names":["tProductoController","getAll","req","res","TipoProducto","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","itemId","params","findById","one","getAllActivos","estado","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import TipoProducto from \"../models/TipoProducto\";\r\n\r\nconst tProductoController = {};\r\n\r\ntProductoController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await TipoProducto.find().sort({ name: -1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen tipos de producto' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ntProductoController.getOneById = async(req, res) => {\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await TipoProducto.findById(itemId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe tipo de producto' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ntProductoController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await TipoProducto.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen tipos de producto activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntProductoController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new TipoProducto({ name, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Tipo de producto creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ntProductoController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await TipoProducto.findByIdAndUpdate(itemId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Tipo de producto actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe tipos de productos a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ntProductoController.deleteOneById = async(req, res) => {\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await TipoProducto.findByIdAndDelete(itemId);\r\n        if (query) {\r\n            res.json({ message: 'Tipo de Producto eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe tipos de producto a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default tProductoController;"],"file":"tipoProducto.controller.js"}