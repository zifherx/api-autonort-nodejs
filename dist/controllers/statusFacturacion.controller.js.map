{"version":3,"sources":["../../src/controllers/statusFacturacion.controller.js"],"names":["statusCtrl","getAll","req","res","StatusFacturacion","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","statusId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import StatusFacturacion from \"../models/StatusFacturacion\";\r\n\r\nconst statusCtrl = {};\r\n\r\nstatusCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await StatusFacturacion.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados de facturación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.getOneById = async(req, res) => {\r\n    const { statusId } = req.params;\r\n    try {\r\n        const query = await StatusFacturacion.findById(statusId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de facturación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await StatusFacturacion.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados de facturación activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nstatusCtrl.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new StatusFacturacion({ name, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Estado de facturación creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { statusId } = req.params;\r\n    try {\r\n        const query = await StatusFacturacion.findByIdAndUpdate(statusId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Estado de facturación actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de facturación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.deleteOneById = async(req, res) => {\r\n    const { statusId } = req.params;\r\n    try {\r\n        const query = await StatusFacturacion.findByIdAndDelete(statusId);\r\n        if (query) {\r\n            res.json({ message: 'Estado de facturación eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de facturación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default statusCtrl;"],"file":"statusFacturacion.controller.js"}