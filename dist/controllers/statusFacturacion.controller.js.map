{"version":3,"file":"statusFacturacion.controller.js","names":["statusCtrl","getAll","req","res","StatusFacturacion","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","statusId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"sources":["../../src/controllers/statusFacturacion.controller.js"],"sourcesContent":["import StatusFacturacion from \"../models/StatusFacturacion\";\r\n\r\nconst statusCtrl = {};\r\n\r\nstatusCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await StatusFacturacion.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados de facturación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.getOneById = async(req, res) => {\r\n    const { statusId } = req.params;\r\n    try {\r\n        const query = await StatusFacturacion.findById(statusId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de facturación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await StatusFacturacion.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados de facturación activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nstatusCtrl.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new StatusFacturacion({ name, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Estado de facturación creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { statusId } = req.params;\r\n    try {\r\n        const query = await StatusFacturacion.findByIdAndUpdate(statusId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Estado de facturación actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de facturación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nstatusCtrl.deleteOneById = async(req, res) => {\r\n    const { statusId } = req.params;\r\n    try {\r\n        const query = await StatusFacturacion.findByIdAndDelete(statusId);\r\n        if (query) {\r\n            res.json({ message: 'Estado de facturación eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado de facturación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default statusCtrl;"],"mappings":"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"}