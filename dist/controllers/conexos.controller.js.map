{"version":3,"sources":["../../src/controllers/conexos.controller.js"],"names":["getConexos","req","res","Conexos","find","sort","name","query","length","json","status","message","console","log","getConexoByActivo","getConexoById","conexoId","params","findById","createConexo","body","email","area","sucursal","createdBy","newObj","User","username","$in","userFound","map","a","_id","save","updateConexo","findByIdAndUpdate","deleteConexo","findByIdAndDelete","obtenerAsesorxSucursal","findOne","select","asesor"],"mappings":"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","sourcesContent":["import Conexos from \"../models/Conexos\";\r\nimport User from '../models/User'\r\n\r\nexport const getConexos = async(req, res) => {\r\n    try {\r\n        const query = await Conexos.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores de Conexos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getConexoByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Conexos.find({ status: 'Activo' }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores Activos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getConexoById = async(req, res) => {\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const query = await Conexos.findById(conexoId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Asesor' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createConexo = async(req, res) => {\r\n\r\n    const { name, email, area, sucursal, status, createdBy } = req.body;\r\n\r\n    try {\r\n        const newObj = new Conexos({ name, email, area, sucursal, status });\r\n\r\n        const userFound = await User.find({ username: { $in: createdBy } })\r\n        newObj.createdBy = userFound.map(a => a._id)\r\n\r\n        const query = await newObj.save();\r\n        if (query) {\r\n            res.json({ message: 'Asesor creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateConexo = async(req, res) => {\r\n    const { name, email, area, sucursal, status } = req.body;\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const newObj = await Conexos.findByIdAndUpdate(conexoId, { name, email, area, sucursal, status });\r\n        if (newObj) {\r\n            res.json({ message: 'Asesor actualizado con éxito' });\r\n        } else {\r\n            return res.json(404).json({ message: 'No existe Asesor a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n\r\n}\r\n\r\nexport const deleteConexo = async(req, res) => {\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const newObj = await Conexos.findByIdAndDelete(conexoId);\r\n        if (newObj) {\r\n            res.json({ message: 'Asesor eliminado con éxito' });\r\n        } else {\r\n            return res.json(404).json({ message: 'No existe Asesor a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const obtenerAsesorxSucursal = async(req, res) => {\r\n    const { sucursal, area } = req.body\r\n\r\n    try {\r\n        const query = await Conexos.findOne({ sucursal: sucursal, area: area, status: 'Activo' }).select('name email');\r\n\r\n        if (query) {\r\n            res.json({ asesor: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No se encontraron asesores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"conexos.controller.js"}