{"version":3,"sources":["../../src/controllers/conexos.controller.js"],"names":["conexosController","getAll","req","res","Conexos","find","sort","name","populate","path","select","query","length","json","total","all","status","message","console","log","getAllActivos","estado","total_active","all_active","getOneById","conexoId","params","findById","one","createOne","body","email","areaE","sucursalE","encargadoDe","createdBy","newObj","Area","findOne","areaFound","_id","Sucursal","sucursalFound","User","username","userFound","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete","getAsesorxSucursalyArea","sucursal","area","$in","getAsesoresxArea","getAsesorByName"],"mappings":"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","sourcesContent":["import Area from \"../models/Area\";\r\nimport Conexos from \"../models/Conexos\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport User from \"../models/User\";\r\n\r\nconst conexosController = {};\r\n\r\nconexosController.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Conexos.find().sort({ name: 1 })\r\n        .populate({\r\n            path: 'areaE',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'sucursalE',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen asesores de conexos\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.getAllActivos = async (req, res) => {\r\n    try {\r\n        const query = await Conexos.find({ estado: true }).sort({ name: 1 })\r\n        .populate({\r\n            path: 'areaE',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'sucursalE',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total_active: query.length, all_active: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen asesores activos\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.getOneById = async (req, res) => {\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const query = await Conexos.findById(conexoId)\r\n        .populate({\r\n            path: 'areaE',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'sucursalE',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Asesor\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.createOne = async (req, res) => {\r\n    const { name, email, areaE, sucursalE, encargadoDe, estado, createdBy } = req.body;\r\n\r\n    try {\r\n        const newObj = new Conexos({ name, email, encargadoDe, estado });\r\n\r\n        const areaFound = await Area.findOne({ name: areaE });\r\n        if (!areaFound) return res.status(404).json({ message: `Area ${areaE} no encontrada` });\r\n        newObj.areaE = areaFound._id;\r\n\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n        if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n        newObj.sucursalE = sucursalFound._id;\r\n\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        newObj.createdBy = userFound._id;\r\n\r\n        const query = await newObj.save();\r\n        if (query) {\r\n            res.json({ message: \"Asesor creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.updateOneById = async (req, res) => {\r\n    const { name, email, areaE, sucursalE, encargadoDe, estado } = req.body;\r\n    const { conexoId } = req.params;\r\n\r\n    try {\r\n        const areaFound = await Area.findOne({ name: areaE });\r\n        if (!areaFound) return res.status(404).json({ message: `Area ${areaE} no encontrada` });\r\n\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n        if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n\r\n        const query = await Conexos.findByIdAndUpdate(conexoId, {\r\n            name,\r\n            email,\r\n            areaE: areaFound._id,\r\n            sucursalE: sucursalFound._id,\r\n            encargadoDe,\r\n            estado,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Asesor actualizado con éxito\" });\r\n        } else {\r\n            return res.json(404).json({ message: \"No existe Asesor a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.deleteOneById = async (req, res) => {\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const query = await Conexos.findByIdAndDelete(conexoId);\r\n        if (query) {\r\n            res.json({ message: \"Asesor eliminado con éxito\" });\r\n        } else {\r\n            return res.json(404).json({ message: \"No existe Asesor a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.getAsesorxSucursalyArea = async (req, res) => {\r\n    const { sucursal, area } = req.body;\r\n\r\n    try {\r\n        const query = await Conexos.findOne({\r\n            area: area,\r\n            encargadoDe: { $in: sucursal },\r\n            status: true,\r\n        })\r\n        .populate({ path: 'areaE', select: 'name' })\r\n        .populate({ path: 'sucursalE', select: 'name' })\r\n        .populate({ path: 'createdBy', select: 'name username' });\r\n\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontraron asesores\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.getAsesoresxArea = async (req, res) => {\r\n    const { areaE } = req.body;\r\n\r\n    try {\r\n\r\n        const areaFound = await Area.findOne({name: areaE});\r\n        if(!areaFound) return res.status(404).json({message: `Area ${areaE} no encontrada`});\r\n\r\n        const query = await Conexos.find({ \r\n            areaE: areaFound._id,\r\n            estado: true\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontraron asesores\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nconexosController.getAsesorByName = async (req, res) => {\r\n    const { name } = req.body;\r\n\r\n    try {\r\n        const query = await Conexos.findOne({ name })\r\n            .select(\"name email areaE sucursalE encargadoDe\")\r\n            .populate({\r\n                path: 'areaE',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'sucursalE',\r\n                select: 'name'\r\n            });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontraron asesores\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport default conexosController;\r\n"],"file":"conexos.controller.js"}