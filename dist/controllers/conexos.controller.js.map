{"version":3,"sources":["../../src/controllers/conexos.controller.js"],"names":["getConexos","req","res","Conexos","find","sort","name","query","length","json","status","message","console","log","getConexoByActivo","getConexoById","conexoId","params","findById","createConexo","body","email","area","sucursal","encargadoDe","createdBy","newObj","User","username","$in","userFound","map","a","_id","save","updateConexo","findByIdAndUpdate","deleteConexo","findByIdAndDelete","obtenerAsesorxSucursal","findOne","asesor","obtenerAsesorxArea","asesores","obtenerAsesorByName","select"],"mappings":"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","sourcesContent":["import Conexos from \"../models/Conexos\";\r\nimport User from '../models/User'\r\n\r\nexport const getConexos = async(req, res) => {\r\n    try {\r\n        const query = await Conexos.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores de Conexos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getConexoByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Conexos.find({ status: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores Activos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getConexoById = async(req, res) => {\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const query = await Conexos.findById(conexoId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Asesor' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createConexo = async(req, res) => {\r\n\r\n    const { name, email, area, sucursal, encargadoDe, status, createdBy } = req.body;\r\n\r\n    try {\r\n        const newObj = new Conexos({ name, email, area, sucursal, encargadoDe, status });\r\n\r\n        const userFound = await User.find({ username: { $in: createdBy } })\r\n        newObj.createdBy = userFound.map(a => a._id)\r\n\r\n        const query = await newObj.save();\r\n        if (query) {\r\n            res.json({ message: 'Asesor creado con Ã©xito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateConexo = async(req, res) => {\r\n    const { name, email, area, sucursal, encargadoDe, status } = req.body;\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const newObj = await Conexos.findByIdAndUpdate(conexoId, { name, email, area, sucursal, encargadoDe, status });\r\n        if (newObj) {\r\n            res.json({ message: 'Asesor actualizado con Ã©xito' });\r\n        } else {\r\n            return res.json(404).json({ message: 'No existe Asesor a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n\r\n}\r\n\r\nexport const deleteConexo = async(req, res) => {\r\n    const { conexoId } = req.params;\r\n    try {\r\n        const newObj = await Conexos.findByIdAndDelete(conexoId);\r\n        if (newObj) {\r\n            res.json({ message: 'Asesor eliminado con Ã©xito' });\r\n        } else {\r\n            return res.json(404).json({ message: 'No existe Asesor a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const obtenerAsesorxSucursal = async(req, res) => {\r\n    const { sucursal, area } = req.body\r\n\r\n    try {\r\n        const query = await Conexos.findOne({ area: area, encargadoDe: { $in: sucursal }, status: true });\r\n\r\n        if (query) {\r\n            res.json({ asesor: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No se encontraron asesores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const obtenerAsesorxArea = async(req, res) => {\r\n    const { area } = req.body\r\n\r\n    try {\r\n        const query = await Conexos.find({ area: area, status: true });\r\n\r\n        if (query) {\r\n            res.json({ asesores: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No se encontraron asesores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const obtenerAsesorByName = async(req, res) => {\r\n    const { name } = req.body\r\n\r\n    try {\r\n        const query = await Conexos.findOne({ name: name })\r\n            .select('name email area sucursal encargadoDe');\r\n\r\n        if (query) {\r\n            res.json({ asesor: query })\r\n        } else {\r\n            return res.status(404).json({ message: 'No se encontraron asesores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"conexos.controller.js"}