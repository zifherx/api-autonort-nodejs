{"version":3,"sources":["../../src/controllers/aservicios.controller.js"],"names":["serviciosCtrl","getAll","req","res","AServicios","find","sort","name","query","length","json","status","message","console","log","getOneById","asesorId","params","findById","getAllByActivo","createOne","body","document","cellphone","email","sucursal","objeto","save","updatedOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete","countAll","countDocuments","count","countByStatus","estado","getBySucursal","asesores","uploadAvatar","photo","file","avatar","location"],"mappings":"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","sourcesContent":["import AServicios from \"../models/AServicios\";\r\n\r\nconst serviciosCtrl = {};\r\n\r\nserviciosCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await AServicios.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Asesores de Servicios' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.getOneById = async(req, res) => {\r\n    const { asesorId } = req.params;\r\n    try {\r\n        const query = await AServicios.findById(asesorId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Asesor de Servicio' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.getAllByActivo = async(req, res) => {\r\n    try {\r\n        const query = await AServicios.find({ status: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No hay Asesores de Servicios Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.createOne = async(req, res) => {\r\n    const { name, document, cellphone, email, sucursal, status } = req.body;\r\n    try {\r\n        const objeto = new AServicios({\r\n            name,\r\n            document,\r\n            cellphone,\r\n            email,\r\n            sucursal,\r\n            status\r\n        });\r\n        const query = await objeto.save();\r\n        if (query) {\r\n            res.json({ message: 'Asesor de Servicio creado con Ã©xito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.updatedOneById = async(req, res) => {\r\n    const { name, document, cellphone, email, sucursal, status } = req.body;\r\n    const { asesorId } = req.params;\r\n    try {\r\n        const query = await AServicios.findByIdAndUpdate(asesorId, {\r\n            name,\r\n            document,\r\n            cellphone,\r\n            email,\r\n            sucursal,\r\n            status\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Asesor de Servicio actualizado con Ã©xito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe el Asesor de Servicio a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.deleteOneById = async(req, res) => {\r\n    const { asesorId } = req.params;\r\n    try {\r\n        const query = await AServicios.findByIdAndDelete(asesorId);\r\n        if (query) {\r\n            res.json({ message: 'Asesor de Servicio eliminado con Ã©xito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe el Asesor de Servicio a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.countAll = async(req, res) => {\r\n    try {\r\n        const query = await AServicios.countDocuments();\r\n        if (query >= 0) return res.json({ count: query });\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.countByStatus = async(req, res) => {\r\n    const { estado } = req.body;\r\n    try {\r\n        const query = await AServicios.find({ status: estado }).countDocuments();\r\n        if (query >= 0) return res.json({ count: query });\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.getBySucursal = async(req, res) => {\r\n    const { sucursal } = req.body;\r\n\r\n    try {\r\n        const query = await AServicios.find({ sucursal, status: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json({ count: query.length, asesores: query });\r\n        } else {\r\n            return res.status(404).json({ message: `No Existen Asesores de Servicios en ${sucursal}` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nserviciosCtrl.uploadAvatar = async(req, res) => {\r\n    const { asesorId } = req.params;\r\n    const photo = req.file;\r\n    // console.log(photo)\r\n    try {\r\n        const query = await AServicios.findByIdAndUpdate(asesorId, {\r\n            avatar: photo.location\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Avatar subido con Ã©xito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el asesor' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default serviciosCtrl;"],"file":"aservicios.controller.js"}