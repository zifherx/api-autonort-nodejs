{"version":3,"sources":["../../src/controllers/aseguradora.controller.js"],"names":["getAll","req","res","Aseguradora","find","sort","name","query","length","json","total","all","status","message","console","log","getAseguradoraById","aseguradoraId","params","findById","one","getAseguradoraByActivo","estado","total_active","all_active","createAseguradora","body","nuevo","save","updateAseguradora","findByIdAndUpdate","deleteAseguradora","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Aseguradora from '../models/Aseguradora'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Aseguradora.find().sort({ name: 'asc' })\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Aseguradora' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAseguradoraById = async(req, res) => {\r\n    const { aseguradoraId } = req.params\r\n    try {\r\n        const query = await Aseguradora.findById(aseguradoraId)\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Aseguradora' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAseguradoraByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Aseguradora.find({ estado: true }).sort({ name: 1 })\r\n        if (query.length > 0) {\r\n            res.json({total_active:query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Aseguradora Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createAseguradora = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const nuevo = new Aseguradora({ name, estado })\r\n        const query = await nuevo.save()\r\n        if (query) {\r\n            res.json({ message: 'Aseguradora creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateAseguradora = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { aseguradoraId } = req.params;\r\n    try {\r\n        const query = await Aseguradora.findByIdAndUpdate(aseguradoraId, { name, estado })\r\n        if (query) {\r\n            res.json({ message: 'Aseguradora actualizado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Aseguradora a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteAseguradora = async(req, res) => {\r\n    const { aseguradoraId } = req.params;\r\n    try {\r\n        const query = await Aseguradora.findByIdAndDelete(aseguradoraId)\r\n        if (query) {\r\n            res.json({ message: 'Aseguradora eliminado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Aseguradora a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"aseguradora.controller.js"}