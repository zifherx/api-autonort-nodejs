{"version":3,"file":"aseguradora.controller.js","names":["getAll","req","res","Aseguradora","find","sort","name","query","length","json","total","all","status","message","console","log","getAseguradoraById","aseguradoraId","params","findById","one","getAseguradoraByActivo","estado","total_active","all_active","createAseguradora","body","nuevo","save","updateAseguradora","findByIdAndUpdate","deleteAseguradora","findByIdAndDelete"],"sources":["../../src/controllers/aseguradora.controller.js"],"sourcesContent":["import Aseguradora from '../models/Aseguradora'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Aseguradora.find().sort({ name: 'asc' })\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Aseguradora' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAseguradoraById = async(req, res) => {\r\n    const { aseguradoraId } = req.params\r\n    try {\r\n        const query = await Aseguradora.findById(aseguradoraId)\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Aseguradora' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAseguradoraByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Aseguradora.find({ estado: true }).sort({ name: 1 })\r\n        if (query.length > 0) {\r\n            res.json({total_active:query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Aseguradora Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createAseguradora = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const nuevo = new Aseguradora({ name, estado })\r\n        const query = await nuevo.save()\r\n        if (query) {\r\n            res.json({ message: 'Aseguradora creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateAseguradora = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { aseguradoraId } = req.params;\r\n    try {\r\n        const query = await Aseguradora.findByIdAndUpdate(aseguradoraId, { name, estado })\r\n        if (query) {\r\n            res.json({ message: 'Aseguradora actualizado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Aseguradora a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteAseguradora = async(req, res) => {\r\n    const { aseguradoraId } = req.params;\r\n    try {\r\n        const query = await Aseguradora.findByIdAndDelete(aseguradoraId)\r\n        if (query) {\r\n            res.json({ message: 'Aseguradora eliminado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Aseguradora a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"mappings":"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"}