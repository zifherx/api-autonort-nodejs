{"version":3,"sources":["../../src/controllers/campania.controller.js"],"names":["campaniaCtrl","getAll","req","res","Campania","find","sort","startDate","populate","path","select","query","length","json","total","all","status","message","console","log","getAllActivos","estado","getOneById","campaniaId","params","findById","one","createOne","body","cod_interno","descripcion","tipo","endDate","model","versiones","oferta","createdBy","obj","TipoCampania","findOne","name","tipoCFound","_id","ModeloTasaciones","modelFound","User","username","userFound","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete","findCampaniaByParams","version","tipoFound","$in","getOfertaByCampania"],"mappings":"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","sourcesContent":["import Campania from \"../models/Campania\";\r\nimport TipoCampania from \"../models/TipoCampania\";\r\nimport ModeloTasaciones from \"../models/ModeloTasaciones\";\r\nimport User from \"../models/User\";\r\n\r\nconst campaniaCtrl = {};\r\n\r\ncampaniaCtrl.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Campania.find()\r\n            .sort({ startDate: -1 })\r\n            .populate({\r\n                path: \"tipo\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"model\",\r\n                select: \"name avatar marca\",\r\n                populate: {\r\n                    path: \"marca\",\r\n                    select: \"name avatar\",\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen campanias\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.getAllActivos = async (req, res) => {\r\n    try {\r\n        const query = await Campania.find({ estado: true })\r\n            .sort({ startDate: -1 })\r\n            .populate({\r\n                path: \"tipo\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"model\",\r\n                select: \"name avatar marca\",\r\n                populate: {\r\n                    path: \"marca\",\r\n                    select: \"name avatar\",\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen campañas activas\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.getOneById = async (req, res) => {\r\n    const { campaniaId } = req.params;\r\n\r\n    try {\r\n        const query = await Campania.findById(campaniaId)\r\n            .sort({ startDate: -1 })\r\n            .populate({\r\n                path: \"tipo\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"model\",\r\n                select: \"name avatar marca\",\r\n                populate: {\r\n                    path: \"marca\",\r\n                    select: \"name avatar\",\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen la campaña\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.createOne = async (req, res) => {\r\n    const { cod_interno, descripcion, tipo, startDate, endDate, estado, model, versiones, oferta, createdBy } = req.body;\r\n\r\n    try {\r\n        const obj = new Campania({\r\n            cod_interno,\r\n            descripcion,\r\n            startDate,\r\n            endDate,\r\n            estado,\r\n            versiones,\r\n            oferta,\r\n        });\r\n\r\n        const tipoCFound = await TipoCampania.findOne({ name: tipo });\r\n        if (!tipoCFound) return res.status(404).json({ message: `Tipo de campaña ${tipo} no encontrado` });\r\n        obj.tipo = tipoCFound._id;\r\n\r\n        const modelFound = await ModeloTasaciones.findOne({ name: model });\r\n        if (!modelFound) return res.status(404).json({ message: `Modelo ${model} no encontrado` });\r\n        obj.model = modelFound._id;\r\n\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n        obj.createdBy = userFound._id;\r\n\r\n        const query = obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: \"Campaña creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.updateOneById = async (req, res) => {\r\n    const { descripcion, startDate, endDate, tipo,model, versiones, oferta, estado } = req.body;\r\n    const { campaniaId } = req.params;\r\n\r\n    try {\r\n\r\n        const tipoCFound = await TipoCampania.findOne({ name: tipo });\r\n        if (!tipoCFound) return res.status(404).json({ message: `Tipo de campaña ${tipo} no encontrado` });\r\n\r\n        const modelFound = await ModeloTasaciones.findOne({ name: model });\r\n        if (!modelFound) return res.status(404).json({ message: `Modelo ${model} no encontrado` });\r\n\r\n        const query = await Campania.findByIdAndUpdate(campaniaId, {\r\n            descripcion,\r\n            startDate,\r\n            endDate,\r\n            tipo: tipoCFound._id,\r\n            model: modelFound._id,\r\n            versiones,\r\n            oferta,\r\n            estado,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Campaña actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe campaña a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.deleteOneById = async (req, res) => {\r\n    const { campaniaId } = req.params;\r\n\r\n    try {\r\n        const query = await Campania.findByIdAndDelete(campaniaId);\r\n\r\n        if (query) {\r\n            res.json({ message: \"Campaña eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe campaña a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.findCampaniaByParams = async (req, res) => {\r\n    const { startDate, endDate, model, tipo, version } = req.body;\r\n\r\n    try {\r\n        const modelFound = await ModeloTasaciones.findOne({ name: model });\r\n        if (!modelFound) return res.status(404).json({ message: `Modelo ${model} no encontrado` });\r\n\r\n        const tipoFound = await TipoCampania.findOne({ name: tipo });\r\n        if (!tipoFound) return res.status(404).json({ message: `Tipo ${tipo} no encontrado` });\r\n\r\n        const query = await Campania.find({\r\n            startDate,\r\n            endDate,\r\n            tipo: tipoFound._id,\r\n            versiones: { $in: version },\r\n            model: modelFound._id,\r\n        })\r\n            .sort({ cod_interno: 1 })\r\n            .populate({\r\n                path: \"tipo\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"model\",\r\n                select: \"name avatar marca\",\r\n                populate: {\r\n                    path: \"marca\",\r\n                    select: \"name avatar\",\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name\",\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }else{\r\n            return res.status(404).json({message: `No existen campañas ${tipo} del ${model}`});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\ncampaniaCtrl.getOfertaByCampania = async (req,res) => {\r\n    const { cod_interno } = req.body;\r\n\r\n    try {\r\n\r\n        const query = await Campania.findOne({\r\n            cod_interno\r\n        })\r\n        .select('tipo oferta estado startDate endDate')\r\n        .populate({\r\n            path: \"tipo\",\r\n            select: \"name\",\r\n        })        \r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        }else{\r\n            return res.status(404).json({message: `Campania ${cod_interno} no encontrada`});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default campaniaCtrl;\r\n"],"file":"campania.controller.js"}