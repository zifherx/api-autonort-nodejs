{"version":3,"sources":["../../src/controllers/tipoDocumento.controller.js"],"names":["documentoController","getAll","req","res","TipoDocumento","find","sort","value","query","length","json","total","all","status","message","console","log","getOneById","tipoId","params","findById","one","getAllByActive","estado","total_active","all_active","createOne","body","cod_interno","name","abreviatura","longitud","nuevo","save","updateOneById","findByIdAndUpdate","deleteTipoDocumento","findByIdAndDelete"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAMA,mBAAmB,GAAG,EAA5B;;AAEAA,mBAAmB,CAACC,MAApB;AAAA,qFAA6B,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEDC,uBAAcC,IAAd,GAAqBC,IAArB,CAA0B;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAA1B,CAFC;;AAAA;AAEfC,YAAAA,KAFe;;AAAA,kBAGjBA,KAAK,CAACC,MAAN,GAAe,CAHE;AAAA;AAAA;AAAA;;AAIjBN,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAd;AAAsBG,cAAAA,GAAG,EAAEJ;AAA3B,aAAT;AAJiB;AAAA;;AAAA;AAAA,6CAMVL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CANU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASrBC,YAAAA,OAAO,CAACC,GAAR;AATqB,6CAUdb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CAVc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA7B;;AAAA;AAAA;AAAA;AAAA;;AAcAd,mBAAmB,CAACiB,UAApB;AAAA,sFAAiC,kBAAMf,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACrBe,YAAAA,MADqB,GACVhB,GAAG,CAACiB,MADM,CACrBD,MADqB;AAAA;AAAA;AAAA,mBAGLd,uBAAcgB,QAAd,CAAuBF,MAAvB,CAHK;;AAAA;AAGnBV,YAAAA,KAHmB;;AAAA,iBAIrBA,KAJqB;AAAA;AAAA;AAAA;;AAKrBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAACW,cAAAA,GAAG,EAAEb;AAAN,aAAT;AALqB;AAAA;;AAAA;AAAA,8CAOdL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUzBC,YAAAA,OAAO,CAACC,GAAR;AAVyB,8CAWlBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjC;;AAAA;AAAA;AAAA;AAAA;;AAeAd,mBAAmB,CAACsB,cAApB;AAAA,sFAAqC,kBAAMpB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAETC,uBAAcC,IAAd,CAAmB;AAAEkB,cAAAA,MAAM,EAAE;AAAV,aAAnB,EAAqCjB,IAArC,CAA0C;AAAEC,cAAAA,KAAK,EAAE;AAAT,aAA1C,CAFS;;AAAA;AAEvBC,YAAAA,KAFuB;;AAAA,kBAGzBA,KAAK,CAACC,MAAN,GAAe,CAHU;AAAA;AAAA;AAAA;;AAIzBN,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAACc,cAAAA,YAAY,EAAEhB,KAAK,CAACC,MAArB;AAA6BgB,cAAAA,UAAU,EAAEjB;AAAzC,aAAT;AAJyB;AAAA;;AAAA;AAAA,8CAMlBL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CANkB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAS7BC,YAAAA,OAAO,CAACC,GAAR;AAT6B,8CAUtBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAVsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;AAcAd,mBAAmB,CAAC0B,SAApB;AAAA,sFAAgC,kBAAMxB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC+BD,GAAG,CAACyB,IADnC,EACpBC,WADoB,aACpBA,WADoB,EACRC,IADQ,aACRA,IADQ,EACHC,WADG,aACHA,WADG,EACUC,QADV,aACUA,QADV,EACoBR,MADpB,aACoBA,MADpB;AAAA;AAGlBS,YAAAA,KAHkB,GAGV,IAAI5B,sBAAJ,CAAkB;AAAEwB,cAAAA,WAAW,EAAXA,WAAF;AAAcC,cAAAA,IAAI,EAAJA,IAAd;AAAmBC,cAAAA,WAAW,EAAXA,WAAnB;AAAgCC,cAAAA,QAAQ,EAARA,QAAhC;AAA0CR,cAAAA,MAAM,EAANA;AAA1C,aAAlB,CAHU;AAAA;AAAA,mBAIJS,KAAK,CAACC,IAAN,EAJI;;AAAA;AAIlBzB,YAAAA,KAJkB;;AAKxB,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AAPuB;AAAA;;AAAA;AAAA;AAAA;AASxBC,YAAAA,OAAO,CAACC,GAAR;AATwB,8CAUjBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAViB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAcAd,mBAAmB,CAACkC,aAApB;AAAA,sFAAoC,kBAAMhC,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACcD,GAAG,CAACyB,IADlB,EACxBE,IADwB,cACxBA,IADwB,EACnBC,WADmB,cACnBA,WADmB,EACPC,QADO,cACPA,QADO,EACGR,MADH,cACGA,MADH;AAExBL,YAAAA,MAFwB,GAEbhB,GAAG,CAACiB,MAFS,CAExBD,MAFwB;AAAA;AAAA;AAAA,mBAIRd,uBAAc+B,iBAAd,CAAgCjB,MAAhC,EAAwC;AAAEW,cAAAA,IAAI,EAAJA,IAAF;AAAOC,cAAAA,WAAW,EAAXA,WAAP;AAAmBC,cAAAA,QAAQ,EAARA,QAAnB;AAA6BR,cAAAA,MAAM,EAANA;AAA7B,aAAxC,CAJQ;;AAAA;AAItBf,YAAAA,KAJsB;;AAAA,iBAKxBA,KALwB;AAAA;AAAA;AAAA;;AAMxBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AANwB;AAAA;;AAAA;AAAA,8CAQjBX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CARiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAW5BC,YAAAA,OAAO,CAACC,GAAR;AAX4B,8CAYrBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAZqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA;;AAgBAd,mBAAmB,CAACoC,mBAApB;AAAA,sFAA0C,kBAAMlC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9Be,YAAAA,MAD8B,GACnBhB,GAAG,CAACiB,MADe,CAC9BD,MAD8B;AAAA;AAAA;AAAA,mBAGdd,uBAAciC,iBAAd,CAAgCnB,MAAhC,CAHc;;AAAA;AAG5BV,YAAAA,KAH4B;;AAAA,iBAI9BA,KAJ8B;AAAA;AAAA;AAAA;;AAK9BL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAL8B;AAAA;;AAAA;AAAA,8CAOvBX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPuB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUlCC,YAAAA,OAAO,CAACC,GAAR;AAVkC,8CAW3Bb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAX2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1C;;AAAA;AAAA;AAAA;AAAA;;eAeed,mB","sourcesContent":["import TipoDocumento from '../models/TipoDocumento'\r\n\r\nconst documentoController = {};\r\n\r\ndocumentoController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await TipoDocumento.find().sort({ value: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen documentos de dentidad' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ndocumentoController.getOneById = async(req, res) => {\r\n    const { tipoId } = req.params\r\n    try {\r\n        const query = await TipoDocumento.findById(tipoId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el documento de identidad' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ndocumentoController.getAllByActive = async(req, res) => {\r\n    try {\r\n        const query = await TipoDocumento.find({ estado: true }).sort({ value: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen documentos de identidad activos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ndocumentoController.createOne = async(req, res) => {\r\n    const { cod_interno,name,abreviatura, longitud, estado } = req.body;\r\n    try {\r\n        const nuevo = new TipoDocumento({ cod_interno,name,abreviatura, longitud, estado });\r\n        const query = await nuevo.save()\r\n        if (query) {\r\n            res.json({ message: 'Documento de identidad creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ndocumentoController.updateOneById = async(req, res) => {\r\n    const { name,abreviatura,longitud, estado } = req.body;\r\n    const { tipoId } = req.params;\r\n    try {\r\n        const query = await TipoDocumento.findByIdAndUpdate(tipoId, { name,abreviatura,longitud, estado });\r\n        if (query) {\r\n            res.json({ message: 'Documento de identidad actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe documento de identidad a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ndocumentoController.deleteTipoDocumento = async(req, res) => {\r\n    const { tipoId } = req.params;\r\n    try {\r\n        const query = await TipoDocumento.findByIdAndDelete(tipoId);\r\n        if (query) {\r\n            res.json({ message: 'Documento de identidad eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe documento de identidad a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default documentoController;"],"file":"tipoDocumento.controller.js"}