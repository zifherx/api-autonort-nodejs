{"version":3,"sources":["../../src/controllers/tasacion.controller.js"],"names":["getAll","req","res","Tasacion","find","populate","sort","fecha_operacion","query","length","json","status","message","console","error","getTasacionById","tasacionId","params","findById","createTasacion","body","cliente","marca","chasis","modelo","version","color","anio_fabricacion","kilometraje","placa","empresa","sucursal","origen_operacion","metodo","precio","mes","asesor_venta","asesor_derivado","asesor_servicio","empleado","newObj","Customer","name","$in","foundCliente","map","a","_id","Seller","foundAsesorV","b","foundAsesorS","c","User","username","foundEmployee","d","save","objSaved","updateTasacion","findByIdAndUpdate","updateObj","deleteTasacion","findByIdAndDelete","deleteObj","log"],"mappings":"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","sourcesContent":["import Seller from \"../models/Seller\";\r\nimport Tasacion from \"../models/Tasacion\";\r\nimport Customer from \"../models/Customer\";\r\nimport User from \"../models/User\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Tasacion.find().populate('cliente').populate('asesor_venta').populate('asesor_servicio').populate('empleado').sort({ fecha_operacion: 'asc' })\r\n\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tasaciones' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getTasacionById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    try {\r\n        const query = await Tasacion.findById(tasacionId)\r\n            .populate('cliente')\r\n            .populate('asesor_venta')\r\n            .populate('asesor_servicio')\r\n            .populate('empleado')\r\n\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            res.status(404).json({ message: 'No existe la Tasaci√≥n' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createTasacion = async(req, res) => {\r\n    const { cliente, marca, chasis, modelo, version, color, anio_fabricacion, kilometraje, placa, empresa, sucursal, origen_operacion, metodo, fecha_operacion, precio, mes, asesor_venta, asesor_derivado, asesor_servicio, empleado } = req.body;\r\n\r\n    try {\r\n        const newObj = new Tasacion({ marca, chasis, modelo, version, color, anio_fabricacion, kilometraje, placa, empresa, sucursal, origen_operacion, metodo, fecha_operacion, precio, mes, asesor_derivado })\r\n\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } })\r\n        newObj.cliente = foundCliente.map(a => a._id)\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este cliente\" });\r\n        }\r\n\r\n        const foundAsesorV = await Seller.find({ name: { $in: asesor_venta } })\r\n        newObj.asesor_venta = foundAsesorV.map(b => b._id)\r\n\r\n        if (!foundAsesorV.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este Asesor de Ventas\" });\r\n        }\r\n\r\n        const foundAsesorS = await Seller.find({ name: { $in: asesor_servicio } })\r\n        newObj.asesor_servicio = foundAsesorS.map(c => c._id)\r\n\r\n        if (!foundAsesorS.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este Asesor de Servicio\" });\r\n        }\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } })\r\n        newObj.empleado = foundEmployee.map(d => d._id)\r\n\r\n        const objSaved = await newObj.save();\r\n\r\n        if (objSaved) {\r\n            res.json({ message: 'Tasaci√≥n creada con √©xito' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateTasacion = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    const { cliente, marca, chasis, modelo, version, color, anio_fabricacion, kilometraje, placa, empresa, sucursal, origen_operacion, metodo, fecha_operacion, precio, mes, asesor_venta, asesor_derivado, asesor_servicio, empleado } = req.body;\r\n\r\n    try {\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } })\r\n\r\n        const foundAsesorV = await Seller.find({ name: { $in: asesor_venta } })\r\n\r\n        const foundAsesorS = await Seller.find({ name: { $in: asesor_servicio } })\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } })\r\n\r\n        const updateObj = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n            cliente: foundCliente.map(a => a._id),\r\n            marca,\r\n            chasis,\r\n            modelo,\r\n            version,\r\n            color,\r\n            anio_fabricacion,\r\n            kilometraje,\r\n            placa,\r\n            empresa,\r\n            sucursal,\r\n            origen_operacion,\r\n            metodo,\r\n            fecha_operacion,\r\n            precio,\r\n            mes,\r\n            asesor_venta: foundAsesorV.map(b => b._id),\r\n            asesor_derivado,\r\n            asesor_servicio: foundAsesorS.map(c => c._id),\r\n            empleado: foundEmployee.map(d => d._id)\r\n        })\r\n\r\n        if (updateObj) {\r\n            res.json({ message: 'Tasacion actualizada con √©xito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tasaci√≥n a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n\r\n}\r\n\r\nexport const deleteTasacion = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n\r\n    try {\r\n        const deleteObj = await Tasacion.findByIdAndDelete(tasacionId)\r\n\r\n        if (deleteObj) {\r\n            res.json({ message: 'Tasacion eliminada con √©xito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tasaci√≥n a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}"],"file":"tasacion.controller.js"}