{"version":3,"sources":["../../src/controllers/tasacion.controller.js"],"names":["tasacionCtrl","getAll","req","res","Tasacion","find","sort","name","populate","path","select","query","length","json","total","all","status","message","getOneById","tasacionId","params","findById","fecha_operacion","one","getAllByTasador","body","status_tasacion","createdBy","User","findOne","username","userFound","$regex","_id","getAllByDatesyEstado","estado","start","end","$gte","Date","$lte","createOne","cliente","marca","modelo","version","auto","placa","colorE","anioF","kilometraje","tipo_transmision","num_propietarios","precio","observacion","empresa","sucursal","sucursalE","origenTasacion","metodoTasacion","fechaIngresado","comentario","estadoTasacionE","ingresoPor","asesor_venta","asesor_servicio","inspeccion_tecnica","tecnico_inspector","obj","Customer","customerFound","Colores","colorFound","Anio","anioFound","ModeloTasaciones","autoFound","Sucursal","sucursalFound","OrigenConcesionario","origenFound","MetodoAtencion","metodoFound","StatusTasacion","estadoFound","Seller","sellerFound","AServicios","servicesFound","Tecnico","tecnicoFound","save","console","error","updatedOneById","IsProceso","fechaProceso","isHot","fechaHot","IsRechazado","fechaRechazado","IsCerrado","fechaCerrado","motivo","nro_serie_nuevo_vehiculo","modelo_nuevo_vehiculo","findByIdAndUpdate","messsage","deleteOneById","findByIdAndDelete","getBySucursalFecha","getRankingByStatus","filtro","aggregate","$match","$group","num_tasaciones","$sum","$sort","ranking","log","getCountByMetodo","getCountByOrigen","getRankingByIngreso","getRankingByVendedor","ingreso","getTasacionesBySeller","vendedor","qty","deploy","err","getTasacionesByAdvisor","servicios","advisorFound","getVehiclesByVentas","asesor","getVehiclesByServicios"],"mappings":"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","sourcesContent":["import Tasacion from '../models/Tasacion'\r\nimport Customer from '../models/Customer'\r\nimport User from '../models/User'\r\nimport Tecnico from '../models/Tecnico'\r\nimport AServicios from '../models/AServicios'\r\nimport Seller from '../models/Seller'\r\nimport ModeloTasaciones from '../models/ModeloTasaciones'\r\nimport Colores from '../models/Colores';\r\nimport Anio from '../models/Anio';\r\nimport Sucursal from '../models/Sucursal';\r\nimport OrigenConcesionario from '../models/OrigenConcesionario';\r\nimport MetodoAtencion from '../models/MetodoAtencion';\r\nimport StatusTasacion from '../models/StatusTasacion';\r\n\r\nconst tasacionCtrl = {};\r\n\r\ntasacionCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Tasacion.find()\r\n            .sort({ name: 1 })\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({path: 'colorE', select: 'name'})\r\n            .populate({path: 'anioF', select: 'name'})\r\n            .populate({path: 'estadoTasacionE', select: 'name'})\r\n            .populate({path: 'sucursalE', select: 'name'})\r\n            .populate({path: 'origenTasacion', select: 'name'})\r\n            .populate({path: 'metodoTasacion', select: 'name'})\r\n            .populate({ path: 'asesor_venta', select: 'name' })\r\n            .populate({ path: 'asesor_servicio', select: 'name' })\r\n            .populate({ path: 'tecnico_inspector', select: 'name' })\r\n            .populate({ path: 'createdBy', select: 'name username' });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tasaciones' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getOneById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    try {\r\n        const query = await Tasacion.findById(tasacionId)\r\n        .sort({fecha_operacion: -1})\r\n        .populate({ path: 'cliente', select: 'name document typeDocument email cellphone representanteLegal' })\r\n        .populate({path: 'colorE', select: 'name'})\r\n        .populate({path: 'auto', select: 'name avatar marca', populate: {path: 'marca', select: 'avatar name'}})\r\n        .populate({path: 'anioF', select: 'name'})\r\n        .populate({path: 'estadoTasacionE', select: 'name'})\r\n        .populate({path: 'sucursalE', select: 'name'})\r\n        .populate({path: 'origenTasacion', select: 'name'})\r\n        .populate({path: 'metodoTasacion', select: 'name'})\r\n        .populate({ path: 'asesor_venta', select: 'name' })\r\n        .populate({ path: 'asesor_servicio', select: 'name' })\r\n        .populate({ path: 'tecnico_inspector', select: 'name' })\r\n        .populate({ path: 'createdBy', select: 'name username' });\r\n\r\n        if (query) {\r\n            res.json({one: query})\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Tasación' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getAllByTasador = async(req, res) => {\r\n    const { status_tasacion,createdBy } = req.body;\r\n    try {\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if(!userFound) return res.status(404).json({message: `Usuario ${createdBy} no encontrado`});\r\n\r\n        const query = await Tasacion.find({ \r\n            status_tasacion: {$regex: '.*' + status_tasacion + '.*'},\r\n            createdBy: userFound._id })\r\n            .sort({ name: 1 })\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({path: 'colorE', select: 'name'})\r\n            .populate({path: 'anioF', select: 'name'})\r\n            .populate({path: 'estadoTasacionE', select: 'name'})\r\n            .populate({path: 'sucursalE', select: 'name'})\r\n            .populate({path: 'origenTasacion', select: 'name'})\r\n            .populate({path: 'metodoTasacion', select: 'name'})\r\n            .populate({ path: 'asesor_venta', select: 'name' })\r\n            .populate({ path: 'asesor_servicio', select: 'name' })\r\n            .populate({ path: 'tecnico_inspector', select: 'name' })\r\n            .populate({ path: 'createdBy', select: 'name username' });\r\n            \r\n        if (query.length >= 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: `No existen Tasaciones de ${createdBy}` })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getAllByDatesyEstado = async (req, res) => {\r\n    const { estado, start, end } = req.body;\r\n\r\n    try {\r\n        // const userFound = await User.findOne({ username: createdBy });\r\n        // if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n\r\n        const query = await Tasacion.find({\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end)}\r\n        })\r\n        .sort({fecha_operacion: -1})\r\n        .populate({ path: 'cliente', select: 'name document' })\r\n        .populate({path: 'colorE', select: 'name'})\r\n        .populate({path: 'anioF', select: 'name'})\r\n        .populate({path: 'estadoTasacionE', select: 'name'})\r\n        .populate({path: 'sucursalE', select: 'name'})\r\n        .populate({path: 'origenTasacion', select: 'name'})\r\n        .populate({path: 'metodoTasacion', select: 'name'})\r\n        .populate({ path: 'asesor_venta', select: 'name' })\r\n        .populate({ path: 'asesor_servicio', select: 'name' })\r\n        .populate({ path: 'tecnico_inspector', select: 'name' })\r\n        .populate({ path: 'createdBy', select: 'name username' });\r\n\r\n        if(query.length > 0){\r\n            res.json({total: query.length, all: query});\r\n        }else{\r\n            return res.status(404).json({ message: `No existen Tasaciones ${estado}` })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.createOne = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        marca,\r\n        modelo,\r\n        version,\r\n        auto,\r\n        placa,\r\n        colorE,\r\n        anioF,\r\n        kilometraje,\r\n        tipo_transmision,\r\n        num_propietarios,\r\n        precio,\r\n        observacion,\r\n        empresa,\r\n        sucursal,\r\n        sucursalE,\r\n        origenTasacion,\r\n        metodoTasacion,\r\n        fecha_operacion,\r\n        fechaIngresado,\r\n        comentario,\r\n        status_tasacion,\r\n        estadoTasacionE,\r\n        ingresoPor,\r\n        asesor_venta,\r\n        asesor_servicio,\r\n        inspeccion_tecnica,\r\n        tecnico_inspector,\r\n        createdBy\r\n    } = req.body;\r\n    try {\r\n        const obj = new Tasacion({\r\n            marca,\r\n            modelo,\r\n            version,\r\n            placa,\r\n            kilometraje,\r\n            tipo_transmision,\r\n            num_propietarios,\r\n            precio,\r\n            observacion,\r\n            empresa,\r\n            sucursal,\r\n            fecha_operacion,\r\n            fechaIngresado,\r\n            comentario,\r\n            status_tasacion,\r\n            ingresoPor,\r\n            inspeccion_tecnica,\r\n        });\r\n\r\n        const customerFound = await Customer.findOne({ name: cliente });\r\n        if(!customerFound) return res.status(404).json({message: `Cliente ${cliente} no encontrado`});\r\n        obj.cliente = customerFound._id;\r\n\r\n        const colorFound = await Colores.findOne({ name: colorE });\r\n        if(!colorFound) return res.status(404).json({message: `Color ${colorE} no encontrado`});\r\n        obj.colorE = colorFound._id;\r\n\r\n        const anioFound = await Anio.findOne({ name: anioF });\r\n        if(!anioFound) return res.status(404).json({message: `Año ${anioF} no encontrado`});\r\n        obj.anioF = anioFound._id;\r\n\r\n        const autoFound = await ModeloTasaciones.findOne({name: auto})\r\n        if(!autoFound) return res.status(404).json({message: `Modelo ${auto} no encontrado`});\r\n        obj.auto = autoFound._id;\r\n\r\n        const sucursalFound = await Sucursal.findOne({name: sucursalE})\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursalE} no encontrado`});\r\n        obj.sucursalE = sucursalFound._id;\r\n\r\n        const origenFound = await OrigenConcesionario.findOne({name: origenTasacion})\r\n        if(!origenFound) return res.status(404).json({message: `Origen ${origenTasacion} no encontrado`});\r\n        obj.origenTasacion = origenFound._id;\r\n\r\n        const metodoFound = await MetodoAtencion.findOne({name: metodoTasacion})\r\n        if(!metodoFound) return res.status(404).json({message: `Método ${metodoTasacion} no encontrado`});\r\n        obj.metodoTasacion = metodoFound._id;\r\n\r\n        const estadoFound = await StatusTasacion.findOne({name: estadoTasacionE})\r\n        if(!estadoFound) return res.status(404).json({message: `Estado ${estadoTasacionE} no encontrado`});\r\n        obj.estadoTasacionE = estadoFound._id;\r\n        \r\n        if (asesor_venta) {\r\n            const sellerFound = await Seller.findOne({ name: asesor_venta });\r\n            if(!sellerFound) return res.status(404).json({message: `Asesor venta ${asesor_venta} no encontrado`});\r\n            obj.asesor_venta = sellerFound._id;\r\n        } else {\r\n            obj.asesor_venta = null;\r\n        }\r\n        \r\n        if (asesor_servicio) {\r\n            const servicesFound = await AServicios.findOne({ name: asesor_servicio });\r\n            if(!servicesFound) return res.status(404).json({message: `Asesor servicio ${asesor_servicio} no encontrado`});\r\n            obj.asesor_servicio = servicesFound._id;\r\n        } else {\r\n            obj.asesor_servicio = null;\r\n        }\r\n        \r\n        if (tecnico_inspector) {\r\n            const tecnicoFound = await Tecnico.findOne({ name: tecnico_inspector });\r\n            if(!tecnicoFound) return res.status(404).json({message: `Técnico ${tecnico_inspector} no encontrado`});\r\n            obj.tecnico_inspector = tecnicoFound._id;\r\n        } else {\r\n            obj.tecnico_inspector = null;\r\n        }\r\n        \r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if(!userFound) return res.status(404).json({message: `Usuario ${createdBy} no encontrado`});\r\n        obj.createdBy = userFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) res.json({ message: 'Tasación creada con éxito' })\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.updatedOneById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    const {\r\n        status_tasacion,\r\n        estadoTasacionE,\r\n        IsProceso,\r\n        fechaProceso,\r\n        isHot,\r\n        fechaHot,\r\n        IsRechazado,\r\n        fechaRechazado,\r\n        IsCerrado,\r\n        fechaCerrado,\r\n        comentario,\r\n        motivo,\r\n        nro_serie_nuevo_vehiculo,\r\n        modelo_nuevo_vehiculo\r\n    } = req.body;\r\n    let query = null;\r\n\r\n    try {\r\n\r\n        const estadoFound = await StatusTasacion.findOne({name: estadoTasacionE});\r\n        if(!estadoFound) return res.status(404).json({message: `Estado ${estadoTasacionE} no encontrado`});\r\n        \r\n        if(estadoTasacionE == 'EN PROCESO'){\r\n            query = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n                status_tasacion,\r\n                estadoTasacionE: estadoFound._id,\r\n                IsProceso,\r\n                fechaProceso,\r\n                comentario,\r\n            });\r\n        }else if(estadoTasacionE == 'HOT'){\r\n            query = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n                status_tasacion,\r\n                estadoTasacionE: estadoFound._id,\r\n                isHot,\r\n                fechaHot,\r\n                comentario,\r\n            });\r\n        }else if(estadoTasacionE == 'RECHAZADO'){\r\n            query = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n                status_tasacion,\r\n                estadoTasacionE: estadoFound._id,\r\n                IsRechazado,\r\n                fechaRechazado,\r\n                motivo,\r\n            });\r\n        }else if(estadoTasacionE == 'CERRADO'){\r\n            query = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n                status_tasacion,\r\n                estadoTasacionE: estadoFound._id,\r\n                IsCerrado,\r\n                fechaCerrado,\r\n                comentario,\r\n                nro_serie_nuevo_vehiculo,\r\n                modelo_nuevo_vehiculo\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: 'Tasación actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe tasación a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.deleteOneById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    try {\r\n        const query = await Tasacion.findByIdAndDelete(tasacionId);\r\n        if (query) {\r\n            res.json({ message: 'Tasación eliminada con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la tasación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getBySucursalFecha = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n    // console.log(req.body);\r\n    try {\r\n        const query = await Tasacion.find({\r\n            sucursal: { $regex: '.*' + sucursal + '.*'},\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        })\r\n        .sort({fecha_operacion: -1})\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({path: 'colorE', select: 'name'})\r\n            .populate({path: 'anioF', select: 'name'})\r\n            .populate({path: 'estadoTasacionE', select: 'name'})\r\n            .populate({path: 'sucursalE', select: 'name'})\r\n            .populate({path: 'origenTasacion', select: 'name'})\r\n            .populate({path: 'metodoTasacion', select: 'name'})\r\n            .populate({ path: 'asesor_venta', select: 'name' })\r\n            .populate({ path: 'asesor_servicio', select: 'name' })\r\n            .populate({ path: 'tecnico_inspector', select: 'name' })\r\n            .populate({ path: 'createdBy', select: 'name username' });\r\n\r\n        if (query.length >= 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getRankingByStatus = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status_tasacion',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getCountByMetodo = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$metodo',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getCountByOrigen = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$origen_operacion',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getRankingByIngreso = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$ingresoPor',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getRankingByVendedor = async(req, res) => {\r\n    const { sucursal, estado, ingreso, start, end } = req.body;\r\n\r\n    let query = null;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal,\r\n            ingresoPor: ingreso,\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        if (filtro.ingresoPor == \"VENTAS\") {\r\n            query = await Tasacion.aggregate([{\r\n                $match: filtro\r\n            }, {\r\n                $group: {\r\n                    _id: '$asesor_venta',\r\n                    num_tasaciones: { $sum: 1 }\r\n                }\r\n            }, {\r\n                $sort: { num_tasaciones: -1 }\r\n            }]);\r\n        } else {\r\n            query = await Tasacion.aggregate([{\r\n                $match: filtro\r\n            }, {\r\n                $group: {\r\n                    _id: '$asesor_servicio',\r\n                    num_tasaciones: { $sum: 1 }\r\n                }\r\n            }, {\r\n                $sort: { num_tasaciones: -1 }\r\n            }]);\r\n\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getTasacionesBySeller = async(req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        const filtro = {\r\n            asesor_venta: sellerFound._id,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status_tasacion',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna tasación' })\r\n        }\r\n    } catch (error) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getTasacionesByAdvisor = async(req, res) => {\r\n    const { servicios, start, end } = req.body;\r\n\r\n    try {\r\n        const advisorFound = await AServicios.findOne({ name: servicios });\r\n        if (!advisorFound) return res.status(404).json({ message: 'No existe el asesor de servicios' });\r\n\r\n        const filtro = {\r\n            asesor_servicio: advisorFound._id,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status_tasacion',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna tasación' })\r\n        }\r\n    } catch (error) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getVehiclesByVentas = async(req, res) => {\r\n    const { asesor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: asesor });\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        let filtro = {\r\n            asesor_venta: sellerFound._id,\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        }\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$modelo',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna solicitud' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getVehiclesByServicios = async(req, res) => {\r\n    const { asesor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const advisorFound = await AServicios.findOne({ name: asesor });\r\n        if (!advisorFound) return res.status(404).json({ message: 'No existe el asesor de servicios' });\r\n\r\n        let filtro = {\r\n            asesor_servicio: advisorFound._id,\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        }\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$modelo',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna solicitud' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default tasacionCtrl;"],"file":"tasacion.controller.js"}