{"version":3,"sources":["../../src/controllers/tasacion.controller.js"],"names":["getAll","req","res","Tasacion","find","populate","sort","fecha_operacion","query","length","json","status","message","console","error","getTasacionById","tasacionId","params","findById","createTasacion","body","cliente","marca","chasis","modelo","version","color","anio_fabricacion","kilometraje","placa","precio","observacion","sucursal","origen_operacion","metodo","mes","status_tasacion","nro_serie_nuevo_vehiculo","modelo_nuevo_vehiculo","asesor_venta","asesor_servicio","asesor_tasador","inspeccion_tecnica","empleado","newObj","Customer","name","$in","foundCliente","map","a","_id","Seller","foundAsesorV","b","foundAsesorS","c","Tasador","foundAsesorT","e","User","username","foundEmployee","d","save","objSaved","updateTasacion","empresa","asesor_derivado","findByIdAndUpdate","updateObj","deleteTasacion","findByIdAndDelete","deleteObj","log"],"mappings":"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","sourcesContent":["import Seller from \"../models/Seller\";\r\nimport Tasacion from \"../models/Tasacion\";\r\nimport Customer from \"../models/Customer\";\r\nimport User from \"../models/User\";\r\nimport Tasador from \"../models/Tasador\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Tasacion.find()\r\n            .populate(\"cliente\")\r\n            .populate(\"asesor_venta\")\r\n            .populate(\"asesor_servicio\")\r\n            .populate(\"empleado\")\r\n            .sort({ fecha_operacion: \"asc\" });\r\n\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Tasaciones\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getTasacionById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    try {\r\n        const query = await Tasacion.findById(tasacionId).populate(\"cliente\").populate(\"asesor_venta\").populate(\"asesor_servicio\").populate(\"empleado\");\r\n\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            res.status(404).json({ message: \"No existe la Tasación\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const createTasacion = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        marca,\r\n        chasis,\r\n        modelo,\r\n        version,\r\n        color,\r\n        anio_fabricacion,\r\n        kilometraje,\r\n        placa,\r\n        precio,\r\n        observacion,\r\n        sucursal,\r\n        origen_operacion,\r\n        metodo,\r\n        fecha_operacion,\r\n        mes,\r\n        status_tasacion,\r\n        nro_serie_nuevo_vehiculo,\r\n        modelo_nuevo_vehiculo,\r\n        asesor_venta,\r\n        asesor_servicio,\r\n        asesor_tasador,\r\n        inspeccion_tecnica,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        const newObj = new Tasacion({\r\n            marca,\r\n            chasis,\r\n            modelo,\r\n            version,\r\n            color,\r\n            anio_fabricacion,\r\n            kilometraje,\r\n            placa,\r\n            precio,\r\n            observacion,\r\n            sucursal,\r\n            origen_operacion,\r\n            metodo,\r\n            fecha_operacion,\r\n            mes,\r\n            status_tasacion,\r\n            nro_serie_nuevo_vehiculo,\r\n            modelo_nuevo_vehiculo,\r\n            asesor_venta,\r\n            asesor_servicio,\r\n            asesor_tasador,\r\n            inspeccion_tecnica\r\n        });\r\n\r\n        //Cliente\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        newObj.cliente = foundCliente.map((a) => a._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe Cliente\" });\r\n        }\r\n\r\n        //Asesor Venta\r\n        const foundAsesorV = await Seller.find({ name: { $in: asesor_venta } });\r\n        newObj.asesor_venta = foundAsesorV.map((b) => b._id);\r\n\r\n        if (!foundAsesorV.length > 0) {\r\n            return res.status(404).json({ message: \"No existe Asesor de Ventas\" });\r\n        }\r\n\r\n        //Asesor Servicio\r\n        const foundAsesorS = await Seller.find({ name: { $in: asesor_servicio } });\r\n        newObj.asesor_servicio = foundAsesorS.map((c) => c._id);\r\n\r\n        if (!foundAsesorS.length > 0) {\r\n            return res.status(404).json({ message: \"No existe Asesor de Servicio\" });\r\n        }\r\n\r\n        //Asesor Tasador\r\n        const foundAsesorT = await Tasador.find({ name: { $in: asesor_tasador } });\r\n        newObj.asesor_tasador = foundAsesorT.map((e) => e._id);\r\n\r\n        if (!foundAsesorT.length > 0) {\r\n            return res.status(404).json({ message: \"No existe Tasador\" });\r\n        }\r\n\r\n        //Empleado\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newObj.empleado = foundEmployee.map((d) => d._id);\r\n\r\n        const objSaved = await newObj.save();\r\n\r\n        if (objSaved) {\r\n            res.json({ message: \"Tasación creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateTasacion = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    const {\r\n        cliente,\r\n        marca,\r\n        chasis,\r\n        modelo,\r\n        version,\r\n        color,\r\n        anio_fabricacion,\r\n        kilometraje,\r\n        placa,\r\n        empresa,\r\n        sucursal,\r\n        origen_operacion,\r\n        metodo,\r\n        fecha_operacion,\r\n        precio,\r\n        mes,\r\n        asesor_venta,\r\n        asesor_derivado,\r\n        asesor_servicio,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n\r\n        const foundAsesorV = await Seller.find({ name: { $in: asesor_venta } });\r\n\r\n        const foundAsesorS = await Seller.find({ name: { $in: asesor_servicio } });\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n\r\n        const updateObj = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n            cliente: foundCliente.map((a) => a._id),\r\n            marca,\r\n            chasis,\r\n            modelo,\r\n            version,\r\n            color,\r\n            anio_fabricacion,\r\n            kilometraje,\r\n            placa,\r\n            empresa,\r\n            sucursal,\r\n            origen_operacion,\r\n            metodo,\r\n            fecha_operacion,\r\n            precio,\r\n            mes,\r\n            asesor_venta: foundAsesorV.map((b) => b._id),\r\n            asesor_derivado,\r\n            asesor_servicio: foundAsesorS.map((c) => c._id),\r\n            empleado: foundEmployee.map((d) => d._id),\r\n        });\r\n\r\n        if (updateObj) {\r\n            res.json({ message: \"Tasacion actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Tasación a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteTasacion = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n\r\n    try {\r\n        const deleteObj = await Tasacion.findByIdAndDelete(tasacionId);\r\n\r\n        if (deleteObj) {\r\n            res.json({ message: \"Tasacion eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Tasación a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};"],"file":"tasacion.controller.js"}