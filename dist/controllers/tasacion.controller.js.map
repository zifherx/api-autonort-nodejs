{"version":3,"sources":["../../src/controllers/tasacion.controller.js"],"names":["tasacionCtrl","getAll","req","res","Tasacion","find","sort","name","populate","path","select","query","length","json","total","tasaciones","status","message","getOneById","tasacionId","params","findById","getAllByTasador","tasador","body","User","username","userFound","createdBy","map","a","_id","nro_request","requests","createTasacion","cliente","marca","modelo","version","placa","color","anio_fabricacion","kilometraje","tipo_transmision","num_propietarios","precio","observacion","empresa","sucursal","origen_operacion","metodo","fecha_operacion","mes","comentario","ingresoPor","asesor_venta","asesor_servicio","inspeccion_tecnica","tecnico_inspector","obj","Customer","$in","customerFound","Seller","sellerFound","b","AServicios","servicesFound","c","Tecnico","tecnicoFound","d","e","save","console","error","updatedOneById","status_tasacion","IsProceso","fechaProceso","IsRechazado","fechaRechazado","IsCerrado","fechaCerrado","motivo","nro_serie_nuevo_vehiculo","modelo_nuevo_vehiculo","findByIdAndUpdate","messsage","deleteOneById","findByIdAndDelete","countBySucursalFecha","start","end","where","$gte","$lte","countDocuments","count","getRankingByStatus","filtro","Date","aggregate","$match","$group","num_tasaciones","$sum","$sort","ranking","log","getCountByMetodo","getCountByOrigen","getRankingByIngreso","getRankingByVendedor","estado","ingreso","getTasacionesBySeller","vendedor","findOne","qty","deploy","err","getTasacionesByAdvisor","servicios","advisorFound","getVehiclesByVentas","asesor","getVehiclesByServicios"],"mappings":"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","sourcesContent":["import Customer from '../models/Customer'\r\nimport User from '../models/User'\r\nimport Tasacion from '../models/Tasacion'\r\nimport Tecnico from '../models/Tecnico'\r\nimport AServicios from '../models/AServicios'\r\nimport Seller from '../models/Seller'\r\n\r\nconst tasacionCtrl = {};\r\n\r\ntasacionCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Tasacion.find().sort({ name: 'asc' })\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({ path: 'asesor_venta', select: 'name' })\r\n            .populate({ path: 'asesor_servicio', select: 'name' })\r\n            .populate({ path: 'tecnico_inspector', select: 'name' })\r\n            .populate({ path: 'createdBy', select: 'name' });\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, tasaciones: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tasaciones' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getOneById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    try {\r\n        const query = await Tasacion.findById(tasacionId)\r\n            .populate({ path: 'cliente', select: 'name document email cellphone address' })\r\n            .populate({ path: 'asesor_venta', select: 'name' })\r\n            .populate({ path: 'asesor_servicio', select: 'name' })\r\n            .populate({ path: 'tecnico_inspector', select: 'name' })\r\n            .populate({ path: 'createdBy', select: 'name' });\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Tasación' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getAllByTasador = async(req, res) => {\r\n    const { tasador } = req.body;\r\n    try {\r\n        const userFound = await User.find({ username: tasador })\r\n\r\n        const query = await Tasacion.find({ createdBy: userFound.map(a => a._id) })\r\n            .sort({ name: 'asc' })\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({ path: 'asesor_venta', select: 'name' })\r\n            .populate({ path: 'asesor_servicio', select: 'name' })\r\n            .populate({ path: 'tecnico_inspector', select: 'name' })\r\n            .populate({ path: 'createdBy', select: 'name' });\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tasaciones' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.createTasacion = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        marca,\r\n        modelo,\r\n        version,\r\n        placa,\r\n        color,\r\n        anio_fabricacion,\r\n        kilometraje,\r\n        tipo_transmision,\r\n        num_propietarios,\r\n        precio,\r\n        observacion,\r\n        empresa,\r\n        sucursal,\r\n        origen_operacion,\r\n        metodo,\r\n        fecha_operacion,\r\n        mes,\r\n        comentario,\r\n        ingresoPor,\r\n        asesor_venta,\r\n        asesor_servicio,\r\n        inspeccion_tecnica,\r\n        tecnico_inspector,\r\n        createdBy\r\n    } = req.body;\r\n    try {\r\n        const obj = new Tasacion({\r\n            marca,\r\n            modelo,\r\n            version,\r\n            placa,\r\n            color,\r\n            anio_fabricacion,\r\n            kilometraje,\r\n            tipo_transmision,\r\n            num_propietarios,\r\n            precio,\r\n            observacion,\r\n            empresa,\r\n            sucursal,\r\n            origen_operacion,\r\n            metodo,\r\n            fecha_operacion,\r\n            mes,\r\n            comentario,\r\n            ingresoPor,\r\n            inspeccion_tecnica,\r\n        });\r\n        const customerFound = await Customer.find({ name: { $in: cliente } });\r\n        obj.cliente = customerFound.map(a => a._id);\r\n\r\n        if (asesor_venta) {\r\n            const sellerFound = await Seller.find({ name: { $in: asesor_venta } });\r\n            obj.asesor_venta = sellerFound.map(b => b._id);\r\n        } else {\r\n            obj.asesor_venta = null;\r\n        }\r\n\r\n        if (asesor_servicio) {\r\n            const servicesFound = await AServicios.find({ name: asesor_servicio });\r\n            obj.asesor_servicio = servicesFound.map(c => c._id);\r\n        } else {\r\n            obj.asesor_servicio = null;\r\n        }\r\n\r\n        if (tecnico_inspector) {\r\n            const tecnicoFound = await Tecnico.find({ name: tecnico_inspector });\r\n            obj.tecnico_inspector = tecnicoFound.map(d => d._id);\r\n        } else {\r\n            obj.tecnico_inspector = null;\r\n        }\r\n\r\n        const userFound = await User.find({ username: { $in: createdBy } });\r\n        obj.createdBy = userFound.map(e => e._id);\r\n\r\n        const query = await obj.save();\r\n        if (query) res.json({ message: 'Tasación creada con éxito' })\r\n    } catch (err) {\r\n        console.error(err)\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.updatedOneById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    const {\r\n        status_tasacion,\r\n        IsProceso,\r\n        fechaProceso,\r\n        IsRechazado,\r\n        fechaRechazado,\r\n        IsCerrado,\r\n        fechaCerrado,\r\n        comentario,\r\n        motivo,\r\n        nro_serie_nuevo_vehiculo,\r\n        modelo_nuevo_vehiculo\r\n    } = req.body;\r\n\r\n    try {\r\n\r\n        const query = await Tasacion.findByIdAndUpdate(tasacionId, {\r\n            status_tasacion,\r\n            IsProceso,\r\n            fechaProceso,\r\n            IsRechazado,\r\n            fechaRechazado,\r\n            IsCerrado,\r\n            fechaCerrado,\r\n            comentario,\r\n            motivo,\r\n            nro_serie_nuevo_vehiculo,\r\n            modelo_nuevo_vehiculo\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Tasación actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Tasación a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.deleteOneById = async(req, res) => {\r\n    const { tasacionId } = req.params;\r\n    try {\r\n        const query = await Tasacion.findByIdAndDelete(tasacionId);\r\n        if (query) {\r\n            res.json({ message: 'Tasación eliminada con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Tasación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.countBySucursalFecha = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n    try {\r\n        const query = await Tasacion.where({\r\n            sucursal: sucursal,\r\n            fecha_operacion: { $gte: start, $lte: end }\r\n        }).find().countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getRankingByStatus = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status_tasacion',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getCountByMetodo = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$metodo',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getCountByOrigen = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$origen_operacion',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getRankingByIngreso = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$ingresoPor',\r\n                num_tasaciones: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_tasaciones: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getRankingByVendedor = async(req, res) => {\r\n    const { sucursal, estado, ingreso, start, end } = req.body;\r\n\r\n    let query = null;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            ingresoPor: ingreso,\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        if (filtro.ingresoPor == \"VENTAS\") {\r\n            query = await Tasacion.aggregate([{\r\n                $match: filtro\r\n            }, {\r\n                $group: {\r\n                    _id: '$asesor_venta',\r\n                    num_tasaciones: { $sum: 1 }\r\n                }\r\n            }, {\r\n                $sort: { num_tasaciones: -1 }\r\n            }]);\r\n        } else {\r\n            query = await Tasacion.aggregate([{\r\n                $match: filtro\r\n            }, {\r\n                $group: {\r\n                    _id: '$asesor_servicio',\r\n                    num_tasaciones: { $sum: 1 }\r\n                }\r\n            }, {\r\n                $sort: { num_tasaciones: -1 }\r\n            }]);\r\n\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query })\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Tasaciones aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getTasacionesBySeller = async(req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        const filtro = {\r\n            asesor_venta: sellerFound._id,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status_tasacion',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna tasación' })\r\n        }\r\n    } catch (error) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getTasacionesByAdvisor = async(req, res) => {\r\n    const { servicios, start, end } = req.body;\r\n\r\n    try {\r\n        const advisorFound = await AServicios.findOne({ name: servicios });\r\n        if (!advisorFound) return res.status(404).json({ message: 'No existe el asesor de servicios' });\r\n\r\n        const filtro = {\r\n            asesor_servicio: advisorFound._id,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status_tasacion',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna tasación' })\r\n        }\r\n    } catch (error) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getVehiclesByVentas = async(req, res) => {\r\n    const { asesor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: asesor });\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        let filtro = {\r\n            asesor_venta: sellerFound._id,\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        }\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$modelo',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna solicitud' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ntasacionCtrl.getVehiclesByServicios = async(req, res) => {\r\n    const { asesor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const advisorFound = await AServicios.findOne({ name: asesor });\r\n        if (!advisorFound) return res.status(404).json({ message: 'No existe el asesor de servicios' });\r\n\r\n        let filtro = {\r\n            asesor_servicio: advisorFound._id,\r\n            status_tasacion: estado,\r\n            fecha_operacion: { $gte: new Date(start), $lte: new Date(end) }\r\n        }\r\n\r\n        const query = await Tasacion.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$modelo',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna solicitud' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default tasacionCtrl;"],"file":"tasacion.controller.js"}