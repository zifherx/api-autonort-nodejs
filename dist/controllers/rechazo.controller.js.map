{"version":3,"sources":["../../src/controllers/rechazo.controller.js"],"names":["rechazoController","getAll","req","res","MotivoRechazo","find","sort","name","populate","path","select","query","length","json","total","all","status","message","console","log","getOneById","motivoId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","area","obj","Area","findOne","areaFound","_id","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Area from \"../models/Area\";\r\nimport MotivoRechazo from \"../models/MotivoRechazo\";\r\n\r\nconst rechazoController = {};\r\n\r\nrechazoController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await MotivoRechazo.find().sort({ name: 1 })\r\n        .populate({\r\n            path: 'area',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen motivos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nrechazoController.getOneById = async(req, res) => {\r\n    const { motivoId } = req.params;\r\n    try {\r\n        const query = await MotivoRechazo.findById(motivoId)\r\n        .populate({\r\n            path: 'area',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe motivo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nrechazoController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await MotivoRechazo.find({ estado: true })\r\n        .sort({ name: 1 })\r\n        .populate({\r\n            path: 'area',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen motivos activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nrechazoController.createOne = async(req, res) => {\r\n    const { name, area, estado } = req.body;\r\n    try {\r\n        const obj = new MotivoRechazo({ name, estado });\r\n\r\n        const areaFound = await Area.findOne({name: area});\r\n        console.log(areaFound);\r\n        if(!areaFound) return res.status(404).json({message: `El área ${area} no encontrado`});\r\n        obj.area = areaFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Motivo creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nrechazoController.updateOneById = async(req, res) => {\r\n    const { name, area, estado } = req.body;\r\n    const { motivoId } = req.params;\r\n\r\n    try {\r\n\r\n        const areaFound = await Area.findOne({name: area});\r\n        const query = await MotivoRechazo.findByIdAndUpdate(motivoId, \r\n            { \r\n                name,\r\n                area: areaFound._id,\r\n                estado \r\n            });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Motivo actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe motivo a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nrechazoController.deleteOneById = async(req, res) => {\r\n    const { motivoId } = req.params;\r\n    try {\r\n        const query = await MotivoRechazo.findByIdAndDelete(motivoId);\r\n        if (query) {\r\n            res.json({ message: 'Motivo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe motivo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default rechazoController;"],"file":"rechazo.controller.js"}