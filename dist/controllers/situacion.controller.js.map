{"version":3,"file":"situacion.controller.js","names":["getAll","req","res","Situacion","find","sort","name","query","length","json","total","all","status","message","console","log","getSituacionByActivo","estado","valor","total_active","all_active","getSituacionById","situacionId","params","findById","one","createSituacion","body","objeto","save","updateSituacion","findByIdAndUpdate","deleteSituacion","findByIdAndDelete"],"sources":["../../src/controllers/situacion.controller.js"],"sourcesContent":["import Situacion from \"../models/Situacion\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Situacion.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Situaciones' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSituacionByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Situacion.find({ estado: true }).sort({ valor: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Situaciones Activas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSituacionById = async(req, res) => {\r\n    const { situacionId } = req.params;\r\n    try {\r\n        const query = await Situacion.findById(situacionId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Situación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createSituacion = async(req, res) => {\r\n    const { name, valor, estado } = req.body;\r\n    try {\r\n        const objeto = new Situacion({ name,valor, estado });\r\n        const query = await objeto.save();\r\n        if (query) {\r\n            res.json({ message: 'Situación creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSituacion = async(req, res) => {\r\n    const { name, estado, valor } = req.body;\r\n    const { situacionId } = req.params;\r\n    try {\r\n        const query = await Situacion.findByIdAndUpdate(situacionId, {\r\n            name,\r\n            valor,\r\n            estado\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Situación actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Situación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSituacion = async(req, res) => {\r\n    const { situacionId } = req.params;\r\n    try {\r\n        const query = await Situacion.findByIdAndDelete(situacionId);\r\n        if (query) {\r\n            res.json({ message: 'Situacion eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Situacion a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"mappings":"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"}