{"version":3,"sources":["../../src/controllers/situacion.controller.js"],"names":["getAll","req","res","Situacion","find","sort","name","query","length","json","status","message","console","log","getSituacionByActivo","estado","getSituacionById","situacionId","params","findById","createSituacion","body","objeto","save","updateSituacion","findByIdAndUpdate","deleteSituacion","findByIdAndDelete"],"mappings":";;;;;;;;;;;;;AAAA;;AAEO,IAAMA,MAAM;AAAA,qFAAG,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEMC,mBAAUC,IAAV,GAAiBC,IAAjB,CAAsB;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAtB,CAFN;;AAAA;AAERC,YAAAA,KAFQ;;AAAA,kBAGVA,KAAK,CAACC,MAAN,GAAe,CAHL;AAAA;AAAA;AAAA;;AAIVN,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AAJU;AAAA;;AAAA;AAAA,6CAMHL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CANG;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASdC,YAAAA,OAAO,CAACC,GAAR;AATc,6CAUPX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CAVO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANX,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAcA,IAAMc,oBAAoB;AAAA,sFAAG,kBAAMb,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAERC,mBAAUC,IAAV,CAAe;AAAEW,cAAAA,MAAM,EAAE;AAAV,aAAf,EAAiCV,IAAjC,CAAsC;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAtC,CAFQ;;AAAA;AAEtBC,YAAAA,KAFsB;;AAAA,kBAGxBA,KAAK,CAACC,MAAN,GAAe,CAHS;AAAA;AAAA;AAAA;;AAIxBN,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AAJwB;AAAA;;AAAA;AAAA,8CAMjBL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CANiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAS5BC,YAAAA,OAAO,CAACC,GAAR;AAT4B,8CAUrBX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAVqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBG,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;;;AAcA,IAAME,gBAAgB;AAAA,sFAAG,kBAAMf,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBe,YAAAA,WADoB,GACJhB,GAAG,CAACiB,MADA,CACpBD,WADoB;AAAA;AAAA;AAAA,mBAGJd,mBAAUgB,QAAV,CAAmBF,WAAnB,CAHI;;AAAA;AAGlBV,YAAAA,KAHkB;;AAAA,iBAIpBA,KAJoB;AAAA;AAAA;AAAA;;AAKpBL,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AALoB;AAAA;;AAAA;AAAA,8CAObL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPa;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUxBC,YAAAA,OAAO,CAACC,GAAR;AAVwB,8CAWjBX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBK,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;;;AAeA,IAAMI,eAAe;AAAA,sFAAG,kBAAMnB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACFD,GAAG,CAACoB,IADF,EACnBf,IADmB,aACnBA,IADmB,EACbS,MADa,aACbA,MADa;AAAA;AAGjBO,YAAAA,MAHiB,GAGR,IAAInB,kBAAJ,CAAc;AAAEG,cAAAA,IAAI,EAAJA,IAAF;AAAQS,cAAAA,MAAM,EAANA;AAAR,aAAd,CAHQ;AAAA;AAAA,mBAIHO,MAAM,CAACC,IAAP,EAJG;;AAAA;AAIjBhB,YAAAA,KAJiB;;AAKvB,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AAPsB;AAAA;;AAAA;AAAA;AAAA;AASvBC,YAAAA,OAAO,CAACC,GAAR;AATuB,8CAUhBX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAVgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfS,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAcA,IAAMI,eAAe;AAAA,sFAAG,kBAAMvB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACFD,GAAG,CAACoB,IADF,EACnBf,IADmB,cACnBA,IADmB,EACbS,MADa,cACbA,MADa;AAEnBE,YAAAA,WAFmB,GAEHhB,GAAG,CAACiB,MAFD,CAEnBD,WAFmB;AAAA;AAAA;AAAA,mBAIHd,mBAAUsB,iBAAV,CAA4BR,WAA5B,EAAyC;AACzDX,cAAAA,IAAI,EAAJA,IADyD;AAEzDS,cAAAA,MAAM,EAANA;AAFyD,aAAzC,CAJG;;AAAA;AAIjBR,YAAAA,KAJiB;;AAQvB,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH,aAFD,MAEO;AACHT,cAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB;AACH;;AAZsB;AAAA;;AAAA;AAAA;AAAA;AAcvBC,YAAAA,OAAO,CAACC,GAAR;AAduB,8CAehBX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAfgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfa,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAmBA,IAAME,eAAe;AAAA,sFAAG,kBAAMzB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBe,YAAAA,WADmB,GACHhB,GAAG,CAACiB,MADD,CACnBD,WADmB;AAAA;AAAA;AAAA,mBAGHd,mBAAUwB,iBAAV,CAA4BV,WAA5B,CAHG;;AAAA;AAGjBV,YAAAA,KAHiB;;AAAA,iBAInBA,KAJmB;AAAA;AAAA;AAAA;;AAKnBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAAT;AALmB;AAAA;;AAAA;AAAA,8CAOZT,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUvBC,YAAAA,OAAO,CAACC,GAAR;AAVuB,8CAWhBX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfe,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import Situacion from \"../models/Situacion\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Situacion.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Situaciones' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSituacionByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Situacion.find({ estado: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Situaciones Activas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSituacionById = async(req, res) => {\r\n    const { situacionId } = req.params;\r\n    try {\r\n        const query = await Situacion.findById(situacionId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Situación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createSituacion = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const objeto = new Situacion({ name, estado });\r\n        const query = await objeto.save();\r\n        if (query) {\r\n            res.json({ message: 'Situación creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSituacion = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { situacionId } = req.params;\r\n    try {\r\n        const query = await Situacion.findByIdAndUpdate(situacionId, {\r\n            name,\r\n            estado\r\n        });\r\n        if (query) {\r\n            res.json({ message: 'Situación actualizada con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Situación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSituacion = async(req, res) => {\r\n    const { situacionId } = req.params;\r\n    try {\r\n        const query = await Situacion.findByIdAndDelete(situacionId);\r\n        if (query) {\r\n            res.json({ message: 'Situacion eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Situacion a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"situacion.controller.js"}