{"version":3,"sources":["../../src/controllers/seguro.controller.js"],"names":["getAll","req","res","Seguro","find","populate","query","length","json","status","message","console","error","getSeguroByActivo","getSeguroById","seguroId","params","findById","createSeguro","body","cliente","company","sucursal","mes","forma_pago","cuotas","fecha_emision","tipo_venta","area_venta","poliza","vendedor","placa","chasis","motor","marca","modelo","anio","uso","asesor","endoso","entidad","inicio_vigencia","fin_vigencia","suma_asegurada","aseguradora","comision_seguro","comision_asesor","empleado","newObj","Customer","name","$in","foundCliente","map","a","_id","User","username","foundEmployee","b","save","objSaved","updateSeguro","findByIdAndUpdate","updateObj","deleteSeguro","findByIdAndDelete","deleteObj","log"],"mappings":"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","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport Seguro from \"../models/Seguro\";\r\nimport User from \"../models/User\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Seguro.find().populate(\"cliente\").populate(\"empleado\");\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getSeguroByActivo = async(req, res) => {};\r\n\r\nexport const getSeguroById = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    try {\r\n        const query = await Seguro.findById(seguroId)\r\n            .populate(\"cliente\")\r\n            .populate(\"empleado\");\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Seguro\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const createSeguro = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        company,\r\n        sucursal,\r\n        mes,\r\n        status,\r\n        forma_pago,\r\n        cuotas,\r\n        fecha_emision,\r\n        tipo_venta,\r\n        area_venta,\r\n        poliza,\r\n        vendedor,\r\n        placa,\r\n        chasis,\r\n        motor,\r\n        marca,\r\n        modelo,\r\n        anio,\r\n        uso,\r\n        asesor,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        suma_asegurada,\r\n        aseguradora,\r\n        comision_seguro,\r\n        comision_asesor,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        const newObj = new Seguro({\r\n            company,\r\n            sucursal,\r\n            mes,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_emision,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            vendedor,\r\n            placa,\r\n            chasis,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            anio,\r\n            uso,\r\n            asesor,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n            aseguradora,\r\n            comision_seguro,\r\n            comision_asesor,\r\n        });\r\n\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        newObj.cliente = foundCliente.map((a) => a._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este cliente\" });\r\n        }\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newObj.empleado = foundEmployee.map((b) => b._id);\r\n\r\n        const objSaved = await newObj.save();\r\n\r\n        if (objSaved) {\r\n            res.json({ message: \"Seguro creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    const {\r\n        cliente,\r\n        company,\r\n        sucursal,\r\n        mes,\r\n        status,\r\n        forma_pago,\r\n        cuotas,\r\n        fecha_emision,\r\n        tipo_venta,\r\n        area_venta,\r\n        poliza,\r\n        vendedor,\r\n        placa,\r\n        chasis,\r\n        motor,\r\n        marca,\r\n        modelo,\r\n        anio,\r\n        uso,\r\n        asesor,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        suma_asegurada,\r\n        aseguradora,\r\n        comision_seguro,\r\n        comision_asesor,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        //Cliente\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        //Empleado\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n\r\n        const updateObj = await Seguro.findByIdAndUpdate(seguroId, {\r\n            cliente: foundCliente.map((a) => a._id),\r\n            company,\r\n            sucursal,\r\n            mes,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_emision,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            vendedor,\r\n            placa,\r\n            chasis,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            anio,\r\n            uso,\r\n            asesor,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n            aseguradora,\r\n            comision_seguro,\r\n            comision_asesor,\r\n            empleado: foundEmployee.map((b) => b._id),\r\n        });\r\n\r\n        if (updateObj) {\r\n            res.json({ message: \"Seguro actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n\r\n    try {\r\n        const deleteObj = await Seguro.findByIdAndDelete(seguroId);\r\n\r\n        if (deleteObj) {\r\n            res.json({ message: \"Seguro eliminado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};"],"file":"seguro.controller.js"}