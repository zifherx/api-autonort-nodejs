{"version":3,"sources":["../../src/controllers/seguro.controller.js"],"names":["getAll","req","res","Seguro","find","populate","path","select","query","length","json","total","seguros","status","message","console","error","getSeguroById","seguroId","params","findById","createSeguro","body","cliente","company","sucursal","mes","forma_pago","cuotas","fecha_emision","tipo_venta","area_venta","poliza","vendedor","placa","chasis","motor","marca","modelo","version","anio","uso","asesor","endoso","entidad","inicio_vigencia","fin_vigencia","suma_asegurada","aseguradora","comision_seguro","comision_asesor","createdBy","newObj","Customer","name","$in","foundCliente","map","a","_id","Seller","foundSeller","b","User","username","foundEmployee","c","save","objSaved","updateSeguro","isProceso","fechaProceso","isEmitido","fechaEmision","findByIdAndUpdate","updateObj","deleteSeguro","findByIdAndDelete","deleteObj","log","countAll","countDocuments","count","countByStatus","estado","start","end","fechaRegistro","$gte","Date","$lte"],"mappings":"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","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport Seguro from \"../models/Seguro\";\r\nimport User from \"../models/User\";\r\nimport Seller from \"../models/Seller\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Seguro.find()\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({ path: 'vendedor', select: 'name document sucursal' })\r\n            .populate({ path: 'createdBy', select: 'name' })\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, seguros: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getSeguroById = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    try {\r\n        const query = await Seguro.findById(seguroId)\r\n            .populate({ path: 'cliente', select: 'name document cellphone email' })\r\n            .populate({ path: 'vendedor', select: 'name document sucursal' })\r\n            .populate({ path: 'createdBy', select: 'name' })\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Seguro\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const createSeguro = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        company,\r\n        sucursal,\r\n        mes,\r\n        status,\r\n        forma_pago,\r\n        cuotas,\r\n        fecha_emision,\r\n        tipo_venta,\r\n        area_venta,\r\n        poliza,\r\n        vendedor,\r\n        placa,\r\n        chasis,\r\n        motor,\r\n        marca,\r\n        modelo,\r\n        version,\r\n        anio,\r\n        uso,\r\n        asesor,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        suma_asegurada,\r\n        aseguradora,\r\n        comision_seguro,\r\n        comision_asesor,\r\n        createdBy,\r\n    } = req.body;\r\n\r\n    try {\r\n        const newObj = new Seguro({\r\n            company,\r\n            sucursal,\r\n            mes,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_emision,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            vendedor,\r\n            placa,\r\n            chasis,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            version,\r\n            anio,\r\n            uso,\r\n            asesor,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n            aseguradora,\r\n            comision_seguro,\r\n            comision_asesor,\r\n        });\r\n\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        newObj.cliente = foundCliente.map((a) => a._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este cliente\" });\r\n        }\r\n\r\n        const foundSeller = await Seller.find({ name: { $in: vendedor } });\r\n        newObj.vendedor = foundSeller.map(b => b._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este Vendedor\" });\r\n        }\r\n\r\n        const foundEmployee = await User.find({ username: { $in: createdBy } });\r\n        newObj.createdBy = foundEmployee.map((c) => c._id);\r\n\r\n        const objSaved = await newObj.save();\r\n\r\n        if (objSaved) {\r\n            res.json({ message: \"Seguro creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    const {\r\n        status,\r\n        isProceso,\r\n        fechaProceso,\r\n        isEmitido,\r\n        fechaEmision\r\n    } = req.body;\r\n\r\n    try {\r\n        const updateObj = await Seguro.findByIdAndUpdate(seguroId, {\r\n            status,\r\n            isProceso,\r\n            fechaProceso,\r\n            isEmitido,\r\n            fechaEmision\r\n        });\r\n\r\n        if (updateObj) {\r\n            res.json({ message: \"Seguro actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n\r\n    try {\r\n        const deleteObj = await Seguro.findByIdAndDelete(seguroId);\r\n\r\n        if (deleteObj) {\r\n            res.json({ message: \"Seguro eliminado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const countAll = async(req, res) => {\r\n    try {\r\n        const query = await Seguro.countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const countByStatus = async(req, res) => {\r\n    const { estado, start, end } = req.body;\r\n    try {\r\n        const query = await Seguro.find({ status: estado, fechaRegistro: { $gte: new Date(start), $lte: new Date(end) } }).countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"seguro.controller.js"}