{"version":3,"sources":["../../src/controllers/seguro.controller.js"],"names":["getAll","req","res","Seguro","find","populate","query","length","json","status","message","console","error","getSeguroByActivo","getSeguroById","seguroId","params","findById","createSeguro","body","cliente","company","sucursal","mes","forma_pago","cuotas","fecha_emision","tipo_venta","area_venta","poliza","vendedor","placa","chasis","serie","motor","marca","modelo","anio","uso","asesor","endoso","entidad","inicio_vigencia","fin_vigencia","suma_asegurada","aseguradora","comision_seguro","comision_asesor","empleado","newObj","Customer","name","$in","foundCliente","map","a","_id","User","username","foundEmployee","b","save","objSaved","updateSeguro","findByIdAndUpdate","updateObj","deleteSeguro","findByIdAndDelete","deleteObj","log"],"mappings":"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","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport Seguro from \"../models/Seguro\";\r\nimport User from \"../models/User\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Seguro.find().populate(\"cliente\").populate(\"empleado\");\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getSeguroByActivo = async(req, res) => {};\r\n\r\nexport const getSeguroById = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    try {\r\n        const query = await Seguro.findById(seguroId)\r\n            .populate(\"cliente\")\r\n            .populate(\"empleado\");\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Seguro\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const createSeguro = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        company,\r\n        sucursal,\r\n        mes,\r\n        status,\r\n        forma_pago,\r\n        cuotas,\r\n        fecha_emision,\r\n        tipo_venta,\r\n        area_venta,\r\n        poliza,\r\n        vendedor,\r\n        placa,\r\n        chasis,\r\n        serie,\r\n        motor,\r\n        marca,\r\n        modelo,\r\n        anio,\r\n        uso,\r\n        asesor,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        suma_asegurada,\r\n        aseguradora,\r\n        comision_seguro,\r\n        comision_asesor,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        const newObj = new Seguro({\r\n            company,\r\n            sucursal,\r\n            mes,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_emision,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            vendedor,\r\n            placa,\r\n            chasis,\r\n            serie,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            anio,\r\n            uso,\r\n            asesor,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n            aseguradora,\r\n            comision_seguro,\r\n            comision_asesor,\r\n        });\r\n\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        newObj.cliente = foundCliente.map((a) => a._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este cliente\" });\r\n        }\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newObj.empleado = foundEmployee.map((b) => b._id);\r\n\r\n        const objSaved = await newObj.save();\r\n\r\n        if (objSaved) {\r\n            res.json({ message: \"Seguro creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    const {\r\n        cliente,\r\n        company,\r\n        sucursal,\r\n        mes,\r\n        status,\r\n        forma_pago,\r\n        cuotas,\r\n        fecha_emision,\r\n        tipo_venta,\r\n        area_venta,\r\n        poliza,\r\n        vendedor,\r\n        placa,\r\n        chasis,\r\n        serie,\r\n        motor,\r\n        marca,\r\n        modelo,\r\n        anio,\r\n        uso,\r\n        asesor,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        suma_asegurada,\r\n        aseguradora,\r\n        comision_seguro,\r\n        comision_asesor,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        //Cliente\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        //Empleado\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n\r\n        const updateObj = await Seguro.findByIdAndUpdate(seguroId, {\r\n            cliente: foundCliente.map((a) => a._id),\r\n            company,\r\n            sucursal,\r\n            mes,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_emision,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            vendedor,\r\n            placa,\r\n            chasis,\r\n            serie,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            anio,\r\n            uso,\r\n            asesor,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n            aseguradora,\r\n            comision_seguro,\r\n            comision_asesor,\r\n            empleado: foundEmployee.map((b) => b._id),\r\n        });\r\n\r\n        if (updateObj) {\r\n            res.json({ message: \"Seguro actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n\r\n    try {\r\n        const deleteObj = await Seguro.findByIdAndDelete(seguroId);\r\n\r\n        if (deleteObj) {\r\n            res.json({ message: \"Seguro eliminado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};"],"file":"seguro.controller.js"}