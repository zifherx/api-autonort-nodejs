{"version":3,"sources":["../../src/controllers/seguro.controller.js"],"names":["seguroController","getAll","req","res","Seguro","find","sort","fechaRegistro","populate","path","select","query","length","json","total","all","status","message","console","error","getOneById","seguroId","params","findById","one","createOne","body","cliente","company","sucursal","sucursalE","estadoSeguroE","tipo_venta","area_venta","fecha_registro","forma_pago","cuotas","poliza","vendedor","marca","modelo","version","vehicleE","anioE","placa","uso","tipoUsoE","chasis","motor","asesorConexosE","endoso","entidad","inicio_vigencia","fin_vigencia","aseguradoraE","suma_asegurada","createdBy","newObj","Sucursal","findOne","name","foundSucursal","_id","EstadoSeguro","foundEstado","Customer","foundCliente","Seller","foundSeller","Vehicle","cod_tdp","foundVehicle","TipoUso","foundTUso","Anio","foundAnio","Conexos","foundConexos","Aseguradora","foundAseguradora","User","username","foundEmployee","save","updateOneById","isProceso","fechaProceso","isEmitido","fechaEmision","findByIdAndUpdate","deleteOneById","findByIdAndDelete","log","getRankingByStatus","start","end","filtro","$gte","Date","$lte","aggregate","$match","$group","qty","$sum","deploy","getRankingByTipo","getRankingByVehicle","getRankingBySeller","getRankingByAseguradora","getSegurosByVendedor","sellerFound","response","getSegurosByModelo","estado","getBySucursalFecha","$regex","getSegurosByCreator","userFound","getSegurosByEstado","estadoFound"],"mappings":"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","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport Seller from \"../models/Seller\";\r\nimport Seguro from \"../models/Seguro\";\r\nimport Sucursal from '../models/Sucursal';\r\nimport User from \"../models/User\";\r\nimport EstadoSeguro from \"../models/EstadoSeguro\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport Anio from \"../models/Anio\";\r\nimport Conexos from \"../models/Conexos\";\r\nimport Aseguradora from \"../models/Aseguradora\";\r\nimport TipoUso from '../models/TipoUso';\r\n\r\nconst seguroController = {};\r\n\r\nseguroController.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Seguro.find()\r\n            .sort({ fechaRegistro: -1 })\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"vendedor\",\r\n                select: \"name document avatar sucursalE marcaE\",\r\n                populate: [\r\n                    {\r\n                        path: \"sucursalE\",\r\n                        select: \"name\",\r\n                    },\r\n                    {\r\n                        path: \"marcaE\",\r\n                        select: \"name avatar\",\r\n                    },\r\n                ],\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name\",\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getOneById = async (req, res) => {\r\n    const { seguroId } = req.params;\r\n    try {\r\n        const query = await Seguro.findById(seguroId)\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document cellphone email typeDocument\",\r\n            })\r\n            .populate({\r\n                path: \"vendedor\",\r\n                select: \"name document avatar sucursalE\",\r\n                populate:{\r\n                    path: 'sucursalE',\r\n                    select: 'name'\r\n                }\r\n            })\r\n            .populate({\r\n                path: \"vehicleE\",\r\n                select: \"model version cod_tdp\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"name avatar marca\",\r\n                    populate: {\r\n                        path: 'marca',\r\n                        select: 'name avatar'\r\n                    }\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"anioE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"sucursalE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"aseguradoraE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"estadoSeguroE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"asesorConexosE\",\r\n                select: \"name encargadoDe areaE\",\r\n                populate: {\r\n                    path: 'areaE',\r\n                    select: 'name'\r\n                }\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Seguro\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.createOne = async (req, res) => {\r\n    const {\r\n        cliente,//---\r\n        company,\r\n        sucursal,\r\n        sucursalE,\r\n        status,\r\n        estadoSeguroE,\r\n        tipo_venta,\r\n        area_venta,\r\n        fecha_registro,\r\n        fechaRegistro,\r\n        forma_pago,\r\n        cuotas,\r\n        poliza,//---\r\n        vendedor,//---\r\n        marca,\r\n        modelo,\r\n        version,\r\n        vehicleE,\r\n        anioE,\r\n        placa,\r\n        uso,\r\n        tipoUsoE,\r\n        chasis,\r\n        motor,//---\r\n        asesorConexosE,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        aseguradoraE,\r\n        suma_asegurada,//---\r\n        createdBy,\r\n    } = req.body;\r\n\r\n    try {\r\n        const newObj = new Seguro({\r\n            company,\r\n            sucursal,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_registro,\r\n            fechaRegistro,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            placa,\r\n            chasis,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            version,\r\n            uso,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n        });\r\n\r\n        const foundSucursal = await Sucursal.findOne({ name: sucursalE });\r\n        if (!foundSucursal) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrado` });\r\n        newObj.sucursalE = foundSucursal._id;\r\n        \r\n        const foundEstado = await EstadoSeguro.findOne({ name: estadoSeguroE });\r\n        if (!foundEstado) return res.status(404).json({ message: `Estado ${estadoSeguroE} no encontrado` });\r\n        newObj.estadoSeguroE = foundEstado._id;\r\n\r\n        const foundCliente = await Customer.findOne({ name: cliente });\r\n        if (!foundCliente) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n        newObj.cliente = foundCliente._id;\r\n\r\n        const foundSeller = await Seller.findOne({ name: vendedor });\r\n        if (!foundSeller) return res.status(404).json({ message: `Vendedor ${vendedor} no encontrado` });\r\n        newObj.vendedor = foundSeller._id;\r\n\r\n        const foundVehicle = await Vehicle.findOne({ cod_tdp: vehicleE });\r\n        if (!foundVehicle) return res.status(404).json({ message: `Vehículo ${vehicleE} no encontrado` });\r\n        newObj.vehicleE = foundVehicle._id;\r\n\r\n        const foundTUso = await TipoUso.findOne({ name: tipoUsoE });\r\n        if (!foundTUso) return res.status(404).json({ message: `Tipo uso ${tipoUsoE} no encontrado` });\r\n        newObj.tipoUsoE = foundTUso._id;\r\n\r\n        const foundAnio = await Anio.findOne({ name: anioE });\r\n        if (!foundAnio) return res.status(404).json({ message: `Año ${anioE} no encontrado` });\r\n        newObj.anioE = foundAnio._id;\r\n\r\n        const foundConexos = await Conexos.findOne({ name: asesorConexosE });\r\n        if (!foundConexos) return res.status(404).json({ message: `Asesor conexos ${asesorConexosE} no encontrado` });\r\n        newObj.asesorConexosE = foundConexos._id;\r\n\r\n        const foundAseguradora = await Aseguradora.findOne({ name: aseguradoraE });\r\n        if (!foundAseguradora) return res.status(404).json({ message: `Aseguradora ${aseguradoraE} no encontrado` });\r\n        newObj.aseguradoraE = foundAseguradora._id;\r\n\r\n        const foundEmployee = await User.findOne({ username: createdBy });\r\n        if (!foundEmployee) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n        newObj.createdBy = foundEmployee._id;\r\n\r\n        const query = await newObj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: \"Seguro creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.updateOneById = async (req, res) => {\r\n    const { seguroId } = req.params;\r\n    const { status, estadoSeguroE, isProceso, fechaProceso, isEmitido, fechaEmision } = req.body;\r\n    let query = null;\r\n\r\n    try {\r\n        const foundEstado = await EstadoSeguro.findOne({ name: estadoSeguroE });\r\n        if (!foundEstado) return res.status(404).json({ message: `Estado ${estadoSeguroE} no encontrado` });\r\n\r\n        if(estadoSeguroE == 'EN PROCESO'){\r\n            query = await Seguro.findByIdAndUpdate(seguroId,{\r\n                status,\r\n                estadoSeguroE: foundEstado._id,\r\n                isProceso,\r\n                fechaProceso\r\n            });\r\n        }else if(estadoSeguroE == 'EMITIDO'){\r\n            query = await Seguro.findByIdAndUpdate(seguroId,{\r\n                status,\r\n                estadoSeguroE: foundEstado._id,\r\n                isEmitido,\r\n                fechaEmision,\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: \"Seguro actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe seguro a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.deleteOneById = async (req, res) => {\r\n    const { seguroId } = req.params;\r\n\r\n    try {\r\n        const query = await Seguro.findByIdAndDelete(seguroId);\r\n\r\n        if (query) {\r\n            res.json({ message: \"Seguro eliminado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe seguro a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getRankingByStatus = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: \"$status\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getRankingByTipo = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: \"$tipo_venta\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getRankingByVehicle = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: \"$modelo\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getRankingBySeller = async (req, res) => {\r\n    const { sucursal, status, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        status: status,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: \"$vendedor\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getRankingByAseguradora = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: \"$aseguradora\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getSegurosByVendedor = async (req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n        if (!sellerFound) return res.status(404).json({ message: \"No existe el vendedor\" });\r\n\r\n        const filtro = {\r\n            vendedor: sellerFound._id,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Seguro.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$status\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"Vendedor no cuenta con seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getSegurosByModelo = async (req, res) => {\r\n    const { vendedor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n        if (!sellerFound) return res.status(404).json({ message: \"No existe el vendedor\" });\r\n\r\n        let filtro = {\r\n            vendedor: sellerFound._id,\r\n            status: estado,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Seguro.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$modelo\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"Vendedor no cuenta con solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getBySucursalFecha = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Seguro.find({\r\n            sucursal: { $regex: \".*\" + sucursal + \".*\" },\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) },\r\n        })\r\n            .sort({ fechaRegistro: -1 })\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"estadoSeguroE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"vendedor\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"asesorConexosE\",\r\n                select: \"name email\",\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query.length >= 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getSegurosByCreator = async (req, res) => {\r\n    const { status,createdBy } = req.body;\r\n\r\n    try {\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n\r\n        const query = await Seguro.find({\r\n            status: {$regex: '.*' + status + '.*'},\r\n            createdBy: userFound._id,\r\n        })\r\n            .sort({ fechaRegistro: -1 })\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"estadoSeguroE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"vendedor\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"asesorConexosE\",\r\n                select: \"name email\",\r\n            })\r\n            .populate({\r\n                path: \"aseguradoraE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"vehicleE\",\r\n                select: \"model\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"name avatar marca\",\r\n                    populate: {\r\n                        path: 'marca',\r\n                        select: 'name avatar'\r\n                    }\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query.length >= 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: `No existen seguros ${status} de ${createdBy}`  });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nseguroController.getSegurosByEstado = async (req, res) => {\r\n    const { estado, start, end } = req.body;\r\n    // console.log(req.body);\r\n\r\n    try {\r\n        const estadoFound = await EstadoSeguro.findOne({ name: estado });\r\n        // console.log(estadoFound);\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estado} no encontrado` });\r\n\r\n        const query = await Seguro.find({\r\n            estadoSeguroE: estadoFound._id,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end)}\r\n        })\r\n            .sort({ fechaRegistro: -1 })\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"estadoSeguroE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"vendedor\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"asesorConexosE\",\r\n                select: \"name email\",\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport default seguroController;\r\n"],"file":"seguro.controller.js"}