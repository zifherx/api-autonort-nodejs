{"version":3,"sources":["../../src/controllers/seguro.controller.js"],"names":["getAll","req","res","Seguro","find","populate","path","select","query","length","json","total","seguros","status","message","console","error","getSeguroById","seguroId","params","findById","createSeguro","body","cliente","company","sucursal","mes","forma_pago","cuotas","fecha_emision","tipo_venta","area_venta","poliza","vendedor","placa","chasis","motor","marca","modelo","version","anio","uso","asesor","endoso","entidad","inicio_vigencia","fin_vigencia","suma_asegurada","aseguradora","comision_seguro","comision_asesor","createdBy","newObj","Customer","name","$in","foundCliente","map","a","_id","Seller","foundSeller","b","User","username","foundEmployee","c","save","objSaved","updateSeguro","isProceso","fechaProceso","isEmitido","fechaEmision","findByIdAndUpdate","updateObj","deleteSeguro","findByIdAndDelete","deleteObj","log","countAll","countDocuments","count","countByStatusySucursal","estado","start","end","fechaRegistro","$gte","Date","$lte","countByDates","getRankingByStatus","filtro","aggregate","$match","$group","qty","$sum","deploy","getRankingByTipo","getRankingByVehicle","getRankingBySeller","getRankingByAseguradora","getSegurosByVendedor","findOne","sellerFound","response","getSegurosByModelo"],"mappings":"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","sourcesContent":["import Customer from \"../models/Customer\";\r\nimport Seguro from \"../models/Seguro\";\r\nimport User from \"../models/User\";\r\nimport Seller from \"../models/Seller\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Seguro.find()\r\n            .populate({ path: 'cliente', select: 'name document' })\r\n            .populate({ path: 'vendedor', select: 'name document sucursal' })\r\n            .populate({ path: 'createdBy', select: 'name' })\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, seguros: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Seguros\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getSeguroById = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    try {\r\n        const query = await Seguro.findById(seguroId)\r\n            .populate({ path: 'cliente', select: 'name document cellphone email' })\r\n            .populate({ path: 'vendedor', select: 'name document sucursal' })\r\n            .populate({ path: 'createdBy', select: 'name' })\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Seguro\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const createSeguro = async(req, res) => {\r\n    const {\r\n        cliente,\r\n        company,\r\n        sucursal,\r\n        mes,\r\n        status,\r\n        forma_pago,\r\n        cuotas,\r\n        fecha_emision,\r\n        tipo_venta,\r\n        area_venta,\r\n        poliza,\r\n        vendedor,\r\n        placa,\r\n        chasis,\r\n        motor,\r\n        marca,\r\n        modelo,\r\n        version,\r\n        anio,\r\n        uso,\r\n        asesor,\r\n        endoso,\r\n        entidad,\r\n        inicio_vigencia,\r\n        fin_vigencia,\r\n        suma_asegurada,\r\n        aseguradora,\r\n        comision_seguro,\r\n        comision_asesor,\r\n        createdBy,\r\n    } = req.body;\r\n\r\n    try {\r\n        const newObj = new Seguro({\r\n            company,\r\n            sucursal,\r\n            mes,\r\n            status,\r\n            forma_pago,\r\n            cuotas,\r\n            fecha_emision,\r\n            tipo_venta,\r\n            area_venta,\r\n            poliza,\r\n            vendedor,\r\n            placa,\r\n            chasis,\r\n            motor,\r\n            marca,\r\n            modelo,\r\n            version,\r\n            anio,\r\n            uso,\r\n            asesor,\r\n            endoso,\r\n            entidad,\r\n            inicio_vigencia,\r\n            fin_vigencia,\r\n            suma_asegurada,\r\n            aseguradora,\r\n            comision_seguro,\r\n            comision_asesor,\r\n        });\r\n\r\n        const foundCliente = await Customer.find({ name: { $in: cliente } });\r\n        newObj.cliente = foundCliente.map((a) => a._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este cliente\" });\r\n        }\r\n\r\n        const foundSeller = await Seller.find({ name: { $in: vendedor } });\r\n        newObj.vendedor = foundSeller.map(b => b._id);\r\n\r\n        if (!foundCliente.length > 0) {\r\n            return res.status(404).json({ message: \"No existe este Vendedor\" });\r\n        }\r\n\r\n        const foundEmployee = await User.find({ username: { $in: createdBy } });\r\n        newObj.createdBy = foundEmployee.map((c) => c._id);\r\n\r\n        const objSaved = await newObj.save();\r\n\r\n        if (objSaved) {\r\n            res.json({ message: \"Seguro creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n    const {\r\n        status,\r\n        isProceso,\r\n        fechaProceso,\r\n        isEmitido,\r\n        fechaEmision\r\n    } = req.body;\r\n\r\n    try {\r\n        const updateObj = await Seguro.findByIdAndUpdate(seguroId, {\r\n            status,\r\n            isProceso,\r\n            fechaProceso,\r\n            isEmitido,\r\n            fechaEmision\r\n        });\r\n\r\n        if (updateObj) {\r\n            res.json({ message: \"Seguro actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteSeguro = async(req, res) => {\r\n    const { seguroId } = req.params;\r\n\r\n    try {\r\n        const deleteObj = await Seguro.findByIdAndDelete(seguroId);\r\n\r\n        if (deleteObj) {\r\n            res.json({ message: \"Seguro eliminado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Seguro a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const countAll = async(req, res) => {\r\n    try {\r\n        const query = await Seguro.countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const countByStatusySucursal = async(req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n    try {\r\n        const query = await Seguro.find({\r\n            sucursal: sucursal,\r\n            status: estado,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n        }).countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const countByDates = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Seguro.find({\r\n            sucursal: sucursal,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n        }).countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByStatus = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: '$status',\r\n                    qty: { $sum: 1 }\r\n                }\r\n            }\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByTipo = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: '$tipo_venta',\r\n                    qty: { $sum: 1 }\r\n                }\r\n            }\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByVehicle = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: '$modelo',\r\n                    qty: { $sum: 1 }\r\n                }\r\n            }\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingBySeller = async(req, res) => {\r\n    const { sucursal, status, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        status: status,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: '$vendedor',\r\n                    qty: { $sum: 1 }\r\n                }\r\n            }\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByAseguradora = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    let filtro = {\r\n        sucursal: sucursal,\r\n        fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n    };\r\n\r\n    try {\r\n        const query = await Seguro.aggregate([\r\n            { $match: filtro },\r\n            {\r\n                $group: {\r\n                    _id: '$aseguradora',\r\n                    qty: { $sum: 1 }\r\n                }\r\n            }\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSegurosByVendedor = async(req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        const filtro = {\r\n            vendedor: sellerFound._id,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n        }\r\n\r\n        const query = await Seguro.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$status',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no cuenta con seguros' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSegurosByModelo = async(req, res) => {\r\n    const { vendedor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        let filtro = {\r\n            vendedor: sellerFound._id,\r\n            status: estado,\r\n            fechaRegistro: { $gte: new Date(start), $lte: new Date(end) }\r\n        }\r\n\r\n        const query = await Seguro.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$modelo',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no cuenta con solicitudes' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"seguro.controller.js"}