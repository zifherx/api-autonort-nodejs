{"version":3,"sources":["../../src/controllers/banco.controller.js"],"names":["getBancos","req","res","Banco","find","sort","name","bancos","length","json","status","message","console","log","getBancoById","bancoId","params","findById","getBancoByActivo","createBanco","body","newBanco","save","bancoCreado","updateBanco","findByIdAndUpdate","deleteBanco","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Banco from \"../models/Banco\";\r\n\r\nexport const getBancos = async(req, res) => {\r\n    try {\r\n        const bancos = await Banco.find().sort({ name: 'asc' });\r\n        if (bancos.length > 0) {\r\n            res.json(bancos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Bancos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getBancoById = async(req, res) => {\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const bancos = await Banco.findById(bancoId);\r\n        if (bancos) {\r\n            res.json(bancos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getBancoByActivo = async(req, res) => {\r\n    try {\r\n        const bancos = await Banco.find({ status: \"Activo\" }).sort({ name: 'asc' });\r\n        if (bancos.length > 0) {\r\n            res.json(bancos);\r\n        } else {\r\n            res.status(404).json({ message: 'No existen Bancos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createBanco = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    try {\r\n        const newBanco = new Banco({ name, status });\r\n\r\n        const bancoCreado = await newBanco.save();\r\n\r\n        if (bancoCreado) {\r\n            res.json({ message: 'Banco creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateBanco = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const updateBanco = await Banco.findByIdAndUpdate(bancoId, { name, status });\r\n\r\n        if (updateBanco) {\r\n            res.json({ message: 'Banco actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Banco a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteBanco = async(req, res) => {\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const deleteBanco = await Banco.findByIdAndDelete(bancoId);\r\n        if (deleteBanco) {\r\n            res.json({ message: 'Banco eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"banco.controller.js"}