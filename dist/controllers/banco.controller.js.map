{"version":3,"sources":["../../src/controllers/banco.controller.js"],"names":["getBancos","req","res","Banco","find","sort","name","query","length","json","total","all","status","message","console","log","getBancoById","bancoId","params","findById","one","getBancoByActivo","estado","total_active","all_active","createBanco","body","avatar","file","obj","undefined","location","save","updateBanco","findByIdAndUpdate","deleteBanco","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Banco from \"../models/Banco\";\r\n\r\nexport const getBancos = async(req, res) => {\r\n    try {\r\n        const query = await Banco.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Bancos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getBancoById = async(req, res) => {\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const query = await Banco.findById(bancoId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getBancoByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Banco.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Bancos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createBanco = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const avatar = req.file;\r\n\r\n    try {\r\n        let obj = null;\r\n        if (avatar == undefined || avatar == null) {\r\n            obj = new Banco({ name, estado });\r\n        } else {\r\n            obj = new Banco({\r\n                avatar: avatar.location,\r\n                name,\r\n                estado\r\n            });\r\n        }\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Banco creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateBanco = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { bancoId } = req.params;\r\n    const avatar = req.file;\r\n\r\n    try {\r\n        let query = null;\r\n\r\n        if (avatar == undefined || avatar == null) {\r\n            query = await Banco.findByIdAndUpdate(bancoId, {\r\n                name,\r\n                estado\r\n            });\r\n        } else {\r\n            query = await Banco.findByIdAndUpdate(bancoId, {\r\n                avatar: avatar.location,\r\n                name,\r\n                estado\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: 'Banco actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteBanco = async(req, res) => {\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const query = await Banco.findByIdAndDelete(bancoId);\r\n        if (query) {\r\n            res.json({ message: 'Banco eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"banco.controller.js"}