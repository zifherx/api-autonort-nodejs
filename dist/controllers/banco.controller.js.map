{"version":3,"sources":["../../src/controllers/banco.controller.js"],"names":["getBancos","req","res","Banco","find","sort","name","bancos","length","json","status","message","console","log","getBancoById","bancoId","params","findById","getBancoByActivo","createBanco","body","avatar","file","obj","undefined","location","save","query","updateBanco","findByIdAndUpdate","deleteBanco","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Banco from \"../models/Banco\";\r\n\r\nexport const getBancos = async(req, res) => {\r\n    try {\r\n        const bancos = await Banco.find().sort({ name: 'asc' });\r\n        if (bancos.length > 0) {\r\n            res.json(bancos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Bancos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getBancoById = async(req, res) => {\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const bancos = await Banco.findById(bancoId);\r\n        if (bancos) {\r\n            res.json(bancos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getBancoByActivo = async(req, res) => {\r\n    try {\r\n        const bancos = await Banco.find({ status: true }).sort({ name: 'asc' });\r\n        if (bancos.length > 0) {\r\n            res.json(bancos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Bancos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createBanco = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const avatar = req.file;\r\n\r\n    try {\r\n        let obj = null;\r\n        if (avatar == undefined || avatar == null) {\r\n            obj = new Banco({ name, status });\r\n        } else {\r\n            obj = new Banco({\r\n                avatar: avatar.location,\r\n                name,\r\n                status\r\n            });\r\n        }\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Banco creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateBanco = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const { bancoId } = req.params;\r\n    const avatar = req.file;\r\n\r\n    try {\r\n        let query = null;\r\n\r\n        if (avatar == undefined || avatar == null) {\r\n            query = await Banco.findByIdAndUpdate(bancoId, {\r\n                name,\r\n                status\r\n            });\r\n        } else {\r\n            query = await Banco.findByIdAndUpdate(bancoId, {\r\n                avatar: avatar.location,\r\n                name,\r\n                status\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: 'Banco actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteBanco = async(req, res) => {\r\n    const { bancoId } = req.params;\r\n    try {\r\n        const query = await Banco.findByIdAndDelete(bancoId);\r\n        if (query) {\r\n            res.json({ message: 'Banco eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Banco a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"banco.controller.js"}