{"version":3,"file":"maf.controller.js","names":["mafController","createOne","req","res","body","nro_solicitud","fecha_ingreso","sucursal","sucursalE","customer","fecha_nacimiento_titular","estado_civil","observaciones_ingreso","conyuge","document_conyuge","fecha_nacimiento_conyuge","lugar_trabajo","ingreso_promedio","cuota_inicial","seller","car","anioFabE","anioModE","pvp","planMAF","tipoUsoE","primer_status_request","estadoSolicitudMAF","fechaIngresoSolicitud","createdBy","evidencias","files","length","status","json","message","obj","Maf","map","a","location","Sucursal","findOne","name","sucursalFound","_id","Customer","customerFound","Seller","sellerFound","Vehicle","cod_tdp","carFound","Anio","anioFFound","anioMFound","PlanMAF","planMafFound","TipoUso","tipoUsoFound","StatusMafRequest","estadoFound","User","username","userFound","userCreator","save","query","console","log","getAllByCreador","mesage","find","$or","$regex","sort","populate","path","select","total","all","getAllBySucursal","startDate","endDate","$gte","Date","$lte","getAllByEstado","estado","getOneById","mafId","params","findById","one","updateRequestStateById","observacion","motivo","isEvaluacion","fechaEvaluacion","isObservado","fechaObservado","isRechazado","fechaRechazado","mafStatusFound","findByIdAndUpdate","approveRequestStateById","fecha_aprobacion","carta_aprobacion","isAprobado","fechaAprobado","userApprove","docuAprobacion","carta_evidencia","cronograma_pagos","reenrollRequestStateById","isReingresado","fechaReingreso","adicionales","files_adicionales","deleteOneById","findByIdAndDelete","getAllSolicitudesAprobadas","start","end"],"sources":["../../src/controllers/maf.controller.js"],"sourcesContent":["import Maf from \"../models/Maf\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport Customer from \"../models/Customer\";\r\nimport Seller from \"../models/Seller\";\r\nimport Anio from \"../models/Anio\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport User from \"../models/User\";\r\nimport PlanMAF from \"../models/PlanMAF\";\r\nimport TipoUso from \"../models/TipoUso\";\r\nimport StatusMafRequest from \"../models/StatusMafRequest\";\r\nimport \"dotenv/config\";\r\nimport fs from \"fs\";\r\nimport nodemailer from \"nodemailer\";\r\nimport path from \"path\";\r\nimport download from \"download\";\r\nimport AdmZip from \"adm-zip\";\r\nimport twilio from \"twilio\";\r\n\r\nconst mafController = {};\r\n\r\n// Nuevos\r\n\r\nmafController.createOne = async (req, res) => {\r\n    const {\r\n        nro_solicitud,\r\n        fecha_ingreso,\r\n        sucursal,\r\n        sucursalE,\r\n        customer,\r\n        fecha_nacimiento_titular,\r\n        estado_civil,\r\n        observaciones_ingreso,\r\n        conyuge,\r\n        document_conyuge,\r\n        fecha_nacimiento_conyuge,\r\n        lugar_trabajo,\r\n        ingreso_promedio,\r\n        cuota_inicial,\r\n        seller,\r\n        car,\r\n        anioFabE,\r\n        anioModE,\r\n        pvp,\r\n        planMAF,\r\n        tipoUsoE,\r\n        primer_status_request,\r\n        estadoSolicitudMAF,\r\n        fechaIngresoSolicitud,\r\n        createdBy,\r\n    } = req.body;\r\n    // console.log(req.body);\r\n    const evidencias = req.files;\r\n\r\n    try {\r\n        if (evidencias.length == 0) return res.status(404).json({ message: \"No se cargó ningún archivo\" });\r\n        if (evidencias.length > 50) return res.status(404).json({ message: \"Excedió el límite de archivos\" });\r\n\r\n        // evidencias.map((a) => {\r\n        //     archivos.push(a.location);\r\n        // });\r\n\r\n        const obj = new Maf({\r\n            nro_solicitud,\r\n            fecha_ingreso,\r\n            sucursal,\r\n            fecha_nacimiento_titular,\r\n            estado_civil,\r\n            lugar_trabajo,\r\n            observaciones_ingreso,\r\n            conyuge,\r\n            document_conyuge,\r\n            fecha_nacimiento_conyuge,\r\n            ingreso_promedio,\r\n            cuota_inicial,\r\n            pvp,\r\n            evidencias: evidencias.map((a) => a.location),\r\n            primer_status_request,\r\n            fechaIngresoSolicitud,\r\n        });\r\n\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n        if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n        obj.sucursalE = sucursalFound._id;\r\n\r\n        const customerFound = await Customer.findOne({ name: customer });\r\n        if (!customerFound) return res.status(404).json({ message: `Cliente ${customer} no encontrado` });\r\n        obj.customer = customerFound._id;\r\n\r\n        const sellerFound = await Seller.findOne({ name: seller });\r\n        if (!sellerFound) return res.status(404).json({ message: `Vendedor ${seller} no encontrado` });\r\n        obj.seller = sellerFound._id;\r\n\r\n        const carFound = await Vehicle.findOne({ cod_tdp: car });\r\n        if (!carFound) return res.status(404).json({ message: `Vehículo ${car} no encontrado` });\r\n        obj.car = carFound._id;\r\n\r\n        const anioFFound = await Anio.findOne({ name: anioFabE });\r\n        if (!anioFFound) return res.status(404).json({ message: `Año Fab ${anioFabE} no encontrado` });\r\n        obj.anioFabE = anioFFound._id;\r\n\r\n        const anioMFound = await Anio.findOne({ name: anioModE });\r\n        if (!anioMFound) return res.status(404).json({ message: `Año Mod ${anioModE} no encontrado` });\r\n        obj.anioModE = anioMFound._id;\r\n\r\n        const planMafFound = await PlanMAF.findOne({ name: planMAF });\r\n        if (!planMafFound) return res.status(404).json({ message: `Plan ${planMAF} no encontrado` });\r\n        obj.planMAF = planMafFound._id;\r\n\r\n        const tipoUsoFound = await TipoUso.findOne({ name: tipoUsoE });\r\n        if (!tipoUsoFound) return res.status(404).json({ message: `Tipo de uso ${tipoUsoE} no encontrado` });\r\n        obj.tipoUsoE = tipoUsoFound._id;\r\n\r\n        const estadoFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n        obj.estadoSolicitudMAF = estadoFound._id;\r\n\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n        obj.createdBy = userFound._id;\r\n        obj.userCreator = userFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllByCreador = async (req, res) => {\r\n    const { primer_status_request, createdBy } = req.body;\r\n    // console.log(req.body);\r\n\r\n    try {\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ mesage: `Usuario ${createdBy} no encontrado` });\r\n\r\n        const query = await Maf.find({\r\n            $or: [\r\n                {\r\n                    primer_status_request: { $regex: \".*\" + primer_status_request + \".*\" },\r\n                    createdBy: userFound._id,\r\n                },\r\n                {\r\n                    primer_status_request: { $regex: \".*\" + primer_status_request + \".*\" },\r\n                    userCreator: userFound._id,\r\n                },\r\n            ],\r\n        })\r\n            .sort({ fecha_ingreso: -1 })\r\n            .populate({ path: \"sucursalE\", select: \"name\" })\r\n            .populate({ path: \"customer\", select: \"name document\" })\r\n            .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n            .populate({ path: \"car\", select: \"cod_tdp model version\", populate: { path: \"model\", select: \"avatar name\" } })\r\n            .populate({ path: \"seller\", select: \"name\" });\r\n\r\n        if (query.length >= 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllBySucursal = async (req, res) => {\r\n    const { sucursalE, startDate, endDate } = req.body;\r\n    // console.log(req.body);\r\n    let query = null;\r\n\r\n    try {\r\n        if (sucursalE == \"\") {\r\n            query = await Maf.find({\r\n                sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name\" })\r\n                .populate({ \r\n                    path: \"car\", \r\n                    select: \"model cod_tdp version\",\r\n                    populate: {\r\n                        path: 'model',\r\n                        select: 'avatar name marca',\r\n                        populate: {\r\n                            path: 'marca',\r\n                            select: 'name avatar'\r\n                        }\r\n                    }\r\n                })\r\n                .populate({ path: \"userApprove\", select: \"name username\" })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" });\r\n        } else {\r\n            const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n            if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n\r\n            query = await Maf.find({\r\n                $or: [\r\n                    {\r\n                        sucursalE: sucursalFound._id,\r\n                        fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n                    },\r\n                    {\r\n                        sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                        fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n                    },\r\n                ],\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name\" })\r\n                .populate({ \r\n                    path: \"car\", \r\n                    select: \"model cod_tdp version\",\r\n                    populate: {\r\n                        path: 'model',\r\n                        select: 'avatar name marca',\r\n                        populate: {\r\n                            path: 'marca',\r\n                            select: 'name avatar'\r\n                        }\r\n                    }\r\n                })\r\n                .populate({ path: \"userApprove\", select: \"name username\" })\r\n                .populate({ path: \"seller\", select: \"name\" })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" });\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllByEstado = async (req, res) => {\r\n    const { estado, sucursalE, startDate, endDate } = req.body;\r\n    let query = null;\r\n    // console.log(object);\r\n\r\n    try {\r\n        if (startDate && endDate) {\r\n            query = await Maf.find({\r\n                sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                primer_status_request: { $regex: \".*\" + estado + \".*\" },\r\n                fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name email telefono\" })\r\n                .populate({ path: \"car\", select: \"model cod_tdp version\", populate: { path: \"model\", select: \"name avatar marca\", populate: { path: \"marca\", select: \"name avatar\" } } })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"anioFabE\", select: \"name\" })\r\n                .populate({ path: \"anioModE\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" })\r\n                .populate({ path: \"userApprove\", select: \"name username email phone\" })\r\n                .populate({ path: \"userCreator\", select: \"name username\" })\r\n                .populate({ path: \"createdBy\", select: \"name username\" });\r\n        } else {\r\n\r\n            const estadoFound = await StatusMafRequest.findOne({name: estado});\r\n\r\n            query = await Maf.find({\r\n                $or: [\r\n                    {\r\n                        sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                        primer_status_request: { $regex: \".*\" + estado + \".*\" },\r\n                    },\r\n                    {\r\n                        sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                        estadoSolicitudMAF: estadoFound._id,\r\n                    },\r\n                ],\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name email telefono\" })\r\n                .populate({ path: \"car\", select: \"model cod_tdp version\", populate: { path: \"model\", select: \"name avatar marca\", populate: { path: \"marca\", select: \"name avatar\" } } })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"anioFabE\", select: \"name\" })\r\n                .populate({ path: \"anioModE\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" })\r\n                .populate({ path: \"userApprove\", select: \"name username email phone\" })\r\n                .populate({ path: \"userCreator\", select: \"name username\" })\r\n                .populate({ path: \"createdBy\", select: \"name username\" });\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }else{\r\n            return res.status(404).json({message: `No existen solicitudes ${estado}`});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getOneById = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findById(mafId)\r\n            .populate({ path: \"customer\", select: \"name document cellphone email typeDocument\" })\r\n            .populate({ path: \"sucursalE\", select: \"name\" })\r\n            .populate({ path: \"seller\", select: \"name email cellphone\" })\r\n            .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n            .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" })\r\n            .populate({ path: \"userCreator\", select: \"name username\" })\r\n            .populate({ path: \"createdBy\", select: \"name username\" })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"cod_tdp model version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"name avatar marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"name avatar\",\r\n                    },\r\n                },\r\n            })\r\n            .populate({ path: \"anioFabE\", select: \"name\" })\r\n            .populate({ path: \"anioModE\", select: \"name\" })\r\n            .populate({ path: \"planMAF\", select: \"name\" })\r\n            .populate({ path: \"tipoUsoE\", select: \"name\" });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.updateRequestStateById = async (req, res) => {\r\n    const { primer_status_request, estadoSolicitudMAF, observacion, motivo, isEvaluacion, fechaEvaluacion, isObservado, fechaObservado, isRechazado, fechaRechazado } = req.body;\r\n    const { mafId } = req.params;\r\n\r\n    let query = null;\r\n\r\n    try {\r\n        const mafStatusFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!mafStatusFound) return res.status(503).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n\r\n        if (estadoSolicitudMAF == \"EN EVALUACIÓN\") {\r\n            query = await Maf.findByIdAndUpdate(mafId, {\r\n                primer_status_request,\r\n                estadoSolicitudMAF: mafStatusFound._id,\r\n                observacion,\r\n                isEvaluacion,\r\n                fechaEvaluacion,\r\n            });\r\n        } else if (estadoSolicitudMAF == \"OBSERVADO\") {\r\n            query = await Maf.findByIdAndUpdate(mafId, {\r\n                primer_status_request,\r\n                estadoSolicitudMAF: mafStatusFound._id,\r\n                observacion,\r\n                isObservado,\r\n                fechaObservado,\r\n            });\r\n        } else if (estadoSolicitudMAF == \"RECHAZADO\") {\r\n            query = await Maf.findByIdAndUpdate(mafId, {\r\n                primer_status_request,\r\n                estadoSolicitudMAF: mafStatusFound._id,\r\n                motivo,\r\n                isRechazado,\r\n                fechaRechazado,\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontró la solicitud MAF\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.approveRequestStateById = async (req, res) => {\r\n    const { primer_status_request, estadoSolicitudMAF, fecha_aprobacion, carta_aprobacion, observacion, isAprobado, fechaAprobado, userApprove } = req.body;\r\n    const { mafId } = req.params;\r\n    const docuAprobacion = req.files;\r\n\r\n    // console.log(req.body);\r\n    // console.log(docuAprobacion);\r\n\r\n    if (docuAprobacion.length == 0) return res.status(404).json({ message: \"No se adjuntó ningún documento\" });\r\n\r\n    try {\r\n        const estadoFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n\r\n        const userFound = await User.findOne({ username: userApprove });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${userApprove} no encontrado` });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            estadoSolicitudMAF: estadoFound._id,\r\n            fecha_aprobacion,\r\n            carta_aprobacion,\r\n            observacion,\r\n            isAprobado,\r\n            fechaAprobado,\r\n            carta_evidencia: docuAprobacion[0].location,\r\n            cronograma_pagos: docuAprobacion[1].location,\r\n            userApprove: userFound._id,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: `No se logró actualizar solicitud ${mafId}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.reenrollRequestStateById = async (req, res) => {\r\n    const { primer_status_request, estadoSolicitudMAF, observaciones_ingreso, isReingresado, fechaReingreso } = req.body;\r\n    const { mafId } = req.params;\r\n    const adicionales = req.files;\r\n\r\n    if (adicionales.length == 0) return res.status(404).json({ message: \"No se adjuntó ningún documento\" });\r\n    if (adicionales.length > 30) return res.status(404).json({ message: \"Se excedió el límite de archivos\" });\r\n\r\n    try {\r\n        const estadoFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            estadoSolicitudMAF: estadoFound._id,\r\n            observaciones_ingreso,\r\n            isReingresado,\r\n            fechaReingreso,\r\n            files_adicionales: adicionales.map((a) => a.location),\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: `No se logró actualizar solicitud ${mafId}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.deleteOneById = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndDelete(mafId);\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontró solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\n// Anteriores1\r\n/*\r\n\r\nmafController.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Maf.find()\r\n            .populate({ path: \"customer\", select: \"name document cellphone email\" })\r\n            .populate({ path: \"seller\", select: \"name avatar sucursal marca\" })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"cod_tdp model version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"avatar name marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"avatar name\",\r\n                    },\r\n                },\r\n            })\r\n            .populate({ path: \"userCreator\", select: \"name username avatar\" })\r\n            .populate({ path: \"userApprove\", select: \"name username avatar\" });\r\n        // console.log(query)\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getOneById = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findById(mafId)\r\n            .populate({ path: \"customer\", select: \"name document cellphone email\" })\r\n            .populate({ path: \"seller\", select: \"name avatar sucursal marca\" })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"cod_tdp model version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"avatar name marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"avatar name\",\r\n                    },\r\n                },\r\n            })\r\n            .populate({ path: \"userCreator\", select: \"name username avatar\" })\r\n            .populate({ path: \"userApprove\", select: \"name username avatar\" });\r\n        // console.log(query)\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllByVendedor = async (req, res) => {\r\n    const { vendedor } = req.body;\r\n    try {\r\n        const sellerFound = await Seller.find({ name: vendedor });\r\n        const query = await Maf.find({ seller: sellerFound.map((a) => a._id) }).populate(\"customer seller car userCreator userApprove\");\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllBySucursalyFecha = async (req, res) => {\r\n    const { sucursal, startDate, endDate } = req.body;\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: { $regex: \".*\" + sucursal + \".*\" },\r\n            fecha_ingreso: {\r\n                $gte: new Date(startDate),\r\n                $lte: new Date(endDate),\r\n            },\r\n        })\r\n            .sort({ fecha_ingreso: -1 })\r\n            .populate({\r\n                path: \"customer\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"seller\",\r\n                select: \"name document avatar sucursalE\",\r\n                populate: {\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"model cod_tdp version chasis\",\r\n                populate: [\r\n                    { path: \"chasis\", select: \"name\" },\r\n                    { path: \"model\", select: \"name avatar marca\", populate: { path: \"marca\", select: \"name avatar\" } },\r\n                ],\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes MAF\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.obtenerRequestbyStatus = async (req, res) => {\r\n    const { status, pasoaHot, sucursal } = req.body;\r\n    try {\r\n        const query = await Maf.find({ primer_status_request: status, pasoaHot: pasoaHot, sucursal: sucursal }).populate(\"car seller customer\");\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: `No se encuentran solicitudes en ${status}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.createRequest = async (req, res) => {\r\n    const {\r\n        nro_solicitud,\r\n        fecha_ingreso,\r\n        hora_ingreso,\r\n        sucursal,\r\n        cliente,\r\n        estado_civil,\r\n        lugar_trabajo,\r\n        conyuge,\r\n        document_conyuge,\r\n        fecha_nacimiento_conyuge,\r\n        ingreso_promedio,\r\n        cuota_inicial,\r\n        vendedor,\r\n        vehiculo,\r\n        anio_fab,\r\n        anio_mod,\r\n        pvp,\r\n        plan,\r\n        tipo_uso,\r\n        primer_status_request,\r\n        observaciones_ingreso,\r\n        userCreator,\r\n    } = req.body;\r\n    const files = req.files;\r\n\r\n    let filePaths = [];\r\n\r\n    try {\r\n        if (files.length === 0) return res.status(400).json({ message: \"Faltan los documentos\" });\r\n\r\n        files.map((file) => {\r\n            filePaths.push(file.location);\r\n        });\r\n\r\n        const obj = new Maf({\r\n            nro_solicitud,\r\n            fecha_ingreso,\r\n            hora_ingreso,\r\n            sucursal,\r\n            estado_civil,\r\n            lugar_trabajo,\r\n            conyuge,\r\n            document_conyuge,\r\n            fecha_nacimiento_conyuge,\r\n            ingreso_promedio,\r\n            cuota_inicial,\r\n            anio_fab,\r\n            anio_mod,\r\n            pvp,\r\n            plan,\r\n            tipo_uso,\r\n            evidencias: filePaths,\r\n            primer_status_request,\r\n            observaciones_ingreso,\r\n        });\r\n\r\n        let clienteEncontrado = await Customer.find({ name: cliente });\r\n        obj.customer = clienteEncontrado.map((a) => a._id);\r\n\r\n        let vendedorEncontrado = await Seller.find({ name: vendedor });\r\n        obj.seller = vendedorEncontrado.map((b) => b._id);\r\n\r\n        let vehiculoEncontrado = await Vehicle.find({ cod_tdp: vehiculo });\r\n        obj.car = vehiculoEncontrado.map((c) => c._id);\r\n\r\n        let usuarioCreador = await User.find({ username: userCreator });\r\n        obj.userCreator = usuarioCreador.map((d) => d._id);\r\n\r\n        const objCreated = await obj.save();\r\n\r\n        if (objCreated) {\r\n            res.json({ message: \"Solicitud MAF creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.actualizarRequest = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { primer_status_request, fecha_respuesta, observacion, motivo, userApprove } = req.body;\r\n\r\n    try {\r\n        const userFound = await User.find({ username: userApprove });\r\n        const obj = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            motivo,\r\n            userApprove: userFound.map((a) => a._id),\r\n        });\r\n        if (obj) {\r\n            res.json({ message: \"Solicitud MAF actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ messsage: \"No existe Solicitud a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n};\r\n\r\nmafController.agregarNewDocuments = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { reingresado, fecha_ingreso, primer_status_request } = req.body;\r\n    const adicionales = req.files;\r\n    // console.log(req)\r\n    let filePaths = [];\r\n\r\n    try {\r\n        if (adicionales.length === 0) return res.status(400).json({ message: \"Falta los Documentos\" });\r\n\r\n        adicionales.map((file) => {\r\n            filePaths.push(file.location);\r\n        });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            isReingresado: reingresado,\r\n            fecha_ingreso,\r\n            primer_status_request,\r\n            files_adicionales: filePaths,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Documentos agregados con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Solicitud a modificar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.actualizarReqAprobada = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { primer_status_request, fecha_respuesta, observacion, fecha_aprobacion, carta_aprobacion } = req.body;\r\n    const carta = req.file;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            fecha_aprobacion,\r\n            carta_aprobacion,\r\n            carta_evidencia: carta.location,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF aprobada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Solicitud a aprobar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.requestaHot = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { pasoaHot } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { pasoaHot });\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF se actualizó con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ messsage: \"No existe Solicitud a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n};\r\n\r\nmafController.cambioStatusByMaf = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { tercer_status_request } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { tercer_status_request });\r\n        if (query) {\r\n            res.json({ message: `Cambio de Status a ${tercer_status_request} con éxito` });\r\n        } else {\r\n            return res.status(404).json({ messsage: \"No existe Solicitud a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n};\r\n\r\nmafController.deleteRequest = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndRemove(mafId);\r\n        if (query) {\r\n            res.json({ message: \"Solicitud eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe la solicitud a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.enviarCorreoSolicitud = async (req, res) => {\r\n    const { to, cc, subject, text, html } = req.body;\r\n\r\n    try {\r\n        const transporter = nodemailer.createTransport({\r\n            host: \"mail.autonortnor.com\",\r\n            port: \"465\",\r\n            secure: true,\r\n            auth: {\r\n                user: \"sistemadv@autonortnor.com\",\r\n                pass: \"k=q0mdgLo,QS\",\r\n            },\r\n        });\r\n\r\n        let email = await transporter.sendMail({\r\n            from: '\"Sistema ADV 👻\" <sistemadv@autonortnor.com>',\r\n            to: to,\r\n            cc: [cc, \"frojas@autonortnor.com.pe\"],\r\n            subject: subject,\r\n            text: text,\r\n            html: html,\r\n        });\r\n\r\n        let respuesta = email.response.split(\" \");\r\n        // console.log(respuesta)\r\n        // console.log(respuesta[1])\r\n        if (respuesta[1] == \"OK\") {\r\n            console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(email));\r\n            res.json({ message: \"Mensaje enviado\", info: email.messageId, retardo: email.envelopeTime, respuesta: email.response });\r\n        } else {\r\n            return res.status(500).json({ message: \"Error al enviar correo\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.downloadAndZipeo = async (req, res) => {\r\n    const { files } = req.body;\r\n\r\n    try {\r\n        await Promise.all(files.map((url) => download(url, path.resolve(\"src/uploads\"))));\r\n\r\n        console.log(\"Download completed!\");\r\n\r\n        var dir = path.resolve(\"src/uploads\");\r\n        var uploadDir = fs.readdirSync(dir);\r\n\r\n        const zip = new AdmZip();\r\n\r\n        for (var i = 0; i < uploadDir.length; i++) {\r\n            zip.addLocalFile(dir + \"/\" + uploadDir[i]);\r\n        }\r\n\r\n        const downloadName = `${Date.now()}.zip`;\r\n\r\n        const data = zip.toBuffer();\r\n\r\n        zip.writeZip(dir + \"/\" + downloadName);\r\n\r\n        res.json({ url: downloadName });\r\n\r\n        // delFiles();\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.descargaYZip = async (req, res) => {\r\n    const { links } = req.body;\r\n    const fileZip = req.file;\r\n\r\n    await Promise.all(links\r\n        .map(url => download(url, path.resolve('src/uploads'))));\r\n\r\n    console.log('Download completed!');\r\n    console.log(fileZip);\r\n};\r\n\r\nmafController.sendMessageWsp = async (req, res) => {\r\n    const { placa, sucursal, servicio, mejora, calificacion, destino } = req.body;\r\n    const accountSid = \"AC5145f2cf5442844fa805e987f09751c6\";\r\n    const authToken = \"42d0808b60a3917dddcf06879e56ff4e\";\r\n\r\n    const client = new twilio(accountSid, authToken);\r\n\r\n    client.messages\r\n        .create({\r\n            // body: 'Se registró una calificación en la siguiente encuesta.\r\n            Cliente con placa: {{1}} perteneciente a la sucursal: {{2}} que realizó el servicio de: {{3}}, sugiere mejorar en: {{4}}.\r\n            Su calificación es: {{5}}'\r\n            body: `Se registró una calificación en la siguiente encuesta. \\nCliente con placa: *${placa}* perteneciente a la sucursal: *${sucursal}* que realizó el servicio de: *${servicio}*, sugiere mejorar en: *${mejora}*. \\nSu calificación es: *${calificacion}*`,\r\n            // to: 'whatsapp:+51924063422', // Fernando Rojas\r\n            to: \"whatsapp:+51\" + destino, // Paul holguin\r\n            // to: '+51989927794', // Paul holguin\r\n            // to: '+51924063422',\r\n            from: \"whatsapp:+18482856322\", // From a valid Twilio number\r\n            // from: '+18482856322',\r\n        })\r\n        .then((message) => {\r\n            // console.log(message)\r\n            res.json({ ok: \"Message sent\", sid: message.sid, status: message.status });\r\n        });\r\n};\r\n\r\nmafController.getCountAll = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: sucursal,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getCountByStatus = async (req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getRankingByStatus = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$primer_status_request\",\r\n                    num_solicitudes: { $sum: 1 },\r\n                },\r\n            },\r\n            {\r\n                $sort: { num_solicitudes: -1 },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen Solicitudes aún\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getRankingByVendedor = async (req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$seller\",\r\n                    num_solicitudes: { $sum: 1 },\r\n                },\r\n            },\r\n            {\r\n                $sort: { num_solicitudes: -1 },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen Solicitudes aún\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getRankingByVehicle = async (req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$car\",\r\n                    num_solicitudes: { $sum: 1 },\r\n                },\r\n            },\r\n            {\r\n                $sort: { num_solicitudes: -1 },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen Solicitudes aún\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getSolicitudesBySeller = async (req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n\r\n        if (!sellerFound) return res.status(404).json({ message: \"No existe el vendedor\" });\r\n\r\n        const filtro = { seller: sellerFound._id, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$primer_status_request\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"Vendedor no ingresó ninguna solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getVehiclesBySeller = async (req, res) => {\r\n    const { vendedor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n\r\n        if (!sellerFound) return res.status(404).json({ message: \"No existe el vendedor\" });\r\n\r\n        const filtro = {\r\n            seller: sellerFound._id,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$car\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"Vendedor no ingresó ninguna solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.testRanking = async (req, res) => {\r\n    // const { sucursal,marca, start, end } = req.body;\r\n    const { marca } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            \"car.model.marca.name\": marca,\r\n        });\r\n        // const filtro = {\r\n        //     sucursal: sucursal,\r\n        //     \"car.model.marca.name\" : marca,\r\n        //     fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        // };\r\n\r\n        console.log(query);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ deploy: query, total: query.length });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen filtros\" });\r\n        }\r\n\r\n        // const query = await Maf.aggregate([{\r\n        //     $match: filtro\r\n        // }, {\r\n        //     $group: {\r\n        //         _id: \"$primer_status_request\",\r\n        //         num_solicitudes: { $sum: 1 }\r\n        //     }\r\n        // }, {\r\n        //     $sort: { num_solicitudes: -1 }\r\n        // }]);\r\n\r\n        // if (query.length > 0) {\r\n        //     res.json({ total: query.length, ranking: query });\r\n        // } else {\r\n        //     return res.status(201).json({ message: 'No existen Solicitudes aún' });\r\n        // }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n*/\r\n\r\nmafController.getAllSolicitudesAprobadas = async (req, res) => {\r\n    const { customer, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const customerFound = await Customer.findOne({ name: customer });\r\n\r\n        const query = await Maf.find({\r\n            customer: customerFound._id,\r\n            primer_status_request: estado,\r\n        })\r\n            .select(\"nro_solicitud fecha_ingreso customer seller car fecha_aprobacion carta_evidencia primer_status_request\")\r\n            .populate({\r\n                path: \"customer\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"seller\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"model cod_tdp version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"name avatar marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"name avatar\",\r\n                    },\r\n                },\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message:  `El cliente ${customer} no cuenta con solicitudes MAF`});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport default mafController;\r\n"],"mappings":"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"}