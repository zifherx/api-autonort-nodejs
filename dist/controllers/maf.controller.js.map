{"version":3,"sources":["../../src/controllers/maf.controller.js"],"names":["mafController","createOne","req","res","body","nro_solicitud","fecha_ingreso","sucursal","sucursalE","customer","fecha_nacimiento_titular","estado_civil","observaciones_ingreso","conyuge","document_conyuge","fecha_nacimiento_conyuge","lugar_trabajo","ingreso_promedio","cuota_inicial","seller","car","anioFabE","anioModE","pvp","planMAF","tipoUsoE","primer_status_request","estadoSolicitudMAF","fechaIngresoSolicitud","createdBy","evidencias","files","length","status","json","message","obj","Maf","map","a","location","Sucursal","findOne","name","sucursalFound","_id","Customer","customerFound","Seller","sellerFound","Vehicle","cod_tdp","carFound","Anio","anioFFound","anioMFound","PlanMAF","planMafFound","TipoUso","tipoUsoFound","StatusMafRequest","estadoFound","User","username","userFound","userCreator","save","query","console","log","getAllByCreador","mesage","find","$or","$regex","sort","populate","path","select","total","all","getAllBySucursal","startDate","endDate","$gte","Date","$lte","getAllByEstado","estado","getOneById","mafId","params","findById","one","updateRequestStateById","observacion","motivo","isEvaluacion","fechaEvaluacion","isObservado","fechaObservado","isRechazado","fechaRechazado","mafStatusFound","findByIdAndUpdate","approveRequestStateById","fecha_aprobacion","carta_aprobacion","isAprobado","fechaAprobado","userApprove","docuAprobacion","carta_evidencia","cronograma_pagos","reenrollRequestStateById","isReingresado","fechaReingreso","adicionales","files_adicionales","deleteOneById","findByIdAndDelete","getAllSolicitudesAprobadas","start","end"],"mappings":"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","sourcesContent":["import Maf from \"../models/Maf\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport Customer from \"../models/Customer\";\r\nimport Seller from \"../models/Seller\";\r\nimport Anio from \"../models/Anio\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport User from \"../models/User\";\r\nimport PlanMAF from \"../models/PlanMAF\";\r\nimport TipoUso from \"../models/TipoUso\";\r\nimport StatusMafRequest from \"../models/StatusMafRequest\";\r\nimport \"dotenv/config\";\r\nimport fs from \"fs\";\r\nimport nodemailer from \"nodemailer\";\r\nimport path from \"path\";\r\nimport download from \"download\";\r\nimport AdmZip from \"adm-zip\";\r\nimport twilio from \"twilio\";\r\n\r\nconst mafController = {};\r\n\r\n// Nuevos\r\n\r\nmafController.createOne = async (req, res) => {\r\n    const {\r\n        nro_solicitud,\r\n        fecha_ingreso,\r\n        sucursal,\r\n        sucursalE,\r\n        customer,\r\n        fecha_nacimiento_titular,\r\n        estado_civil,\r\n        observaciones_ingreso,\r\n        conyuge,\r\n        document_conyuge,\r\n        fecha_nacimiento_conyuge,\r\n        lugar_trabajo,\r\n        ingreso_promedio,\r\n        cuota_inicial,\r\n        seller,\r\n        car,\r\n        anioFabE,\r\n        anioModE,\r\n        pvp,\r\n        planMAF,\r\n        tipoUsoE,\r\n        primer_status_request,\r\n        estadoSolicitudMAF,\r\n        fechaIngresoSolicitud,\r\n        createdBy,\r\n    } = req.body;\r\n    // console.log(req.body);\r\n    const evidencias = req.files;\r\n\r\n    try {\r\n        if (evidencias.length == 0) return res.status(404).json({ message: \"No se cargó ningún archivo\" });\r\n        if (evidencias.length > 50) return res.status(404).json({ message: \"Excedió el límite de archivos\" });\r\n\r\n        // evidencias.map((a) => {\r\n        //     archivos.push(a.location);\r\n        // });\r\n\r\n        const obj = new Maf({\r\n            nro_solicitud,\r\n            fecha_ingreso,\r\n            sucursal,\r\n            fecha_nacimiento_titular,\r\n            estado_civil,\r\n            lugar_trabajo,\r\n            observaciones_ingreso,\r\n            conyuge,\r\n            document_conyuge,\r\n            fecha_nacimiento_conyuge,\r\n            ingreso_promedio,\r\n            cuota_inicial,\r\n            pvp,\r\n            evidencias: evidencias.map((a) => a.location),\r\n            primer_status_request,\r\n            fechaIngresoSolicitud,\r\n        });\r\n\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n        if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n        obj.sucursalE = sucursalFound._id;\r\n\r\n        const customerFound = await Customer.findOne({ name: customer });\r\n        if (!customerFound) return res.status(404).json({ message: `Cliente ${customer} no encontrado` });\r\n        obj.customer = customerFound._id;\r\n\r\n        const sellerFound = await Seller.findOne({ name: seller });\r\n        if (!sellerFound) return res.status(404).json({ message: `Vendedor ${seller} no encontrado` });\r\n        obj.seller = sellerFound._id;\r\n\r\n        const carFound = await Vehicle.findOne({ cod_tdp: car });\r\n        if (!carFound) return res.status(404).json({ message: `Vehículo ${car} no encontrado` });\r\n        obj.car = carFound._id;\r\n\r\n        const anioFFound = await Anio.findOne({ name: anioFabE });\r\n        if (!anioFFound) return res.status(404).json({ message: `Año Fab ${anioFabE} no encontrado` });\r\n        obj.anioFabE = anioFFound._id;\r\n\r\n        const anioMFound = await Anio.findOne({ name: anioModE });\r\n        if (!anioMFound) return res.status(404).json({ message: `Año Mod ${anioModE} no encontrado` });\r\n        obj.anioModE = anioMFound._id;\r\n\r\n        const planMafFound = await PlanMAF.findOne({ name: planMAF });\r\n        if (!planMafFound) return res.status(404).json({ message: `Plan ${planMAF} no encontrado` });\r\n        obj.planMAF = planMafFound._id;\r\n\r\n        const tipoUsoFound = await TipoUso.findOne({ name: tipoUsoE });\r\n        if (!tipoUsoFound) return res.status(404).json({ message: `Tipo de uso ${tipoUsoE} no encontrado` });\r\n        obj.tipoUsoE = tipoUsoFound._id;\r\n\r\n        const estadoFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n        obj.estadoSolicitudMAF = estadoFound._id;\r\n\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n        obj.createdBy = userFound._id;\r\n        obj.userCreator = userFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllByCreador = async (req, res) => {\r\n    const { primer_status_request, createdBy } = req.body;\r\n    // console.log(req.body);\r\n\r\n    try {\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ mesage: `Usuario ${createdBy} no encontrado` });\r\n\r\n        const query = await Maf.find({\r\n            $or: [\r\n                {\r\n                    primer_status_request: { $regex: \".*\" + primer_status_request + \".*\" },\r\n                    createdBy: userFound._id,\r\n                },\r\n                {\r\n                    primer_status_request: { $regex: \".*\" + primer_status_request + \".*\" },\r\n                    userCreator: userFound._id,\r\n                },\r\n            ],\r\n        })\r\n            .sort({ fecha_ingreso: -1 })\r\n            .populate({ path: \"sucursalE\", select: \"name\" })\r\n            .populate({ path: \"customer\", select: \"name document\" })\r\n            .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n            .populate({ path: \"car\", select: \"cod_tdp model version\", populate: { path: \"model\", select: \"avatar name\" } })\r\n            .populate({ path: \"seller\", select: \"name\" });\r\n\r\n        if (query.length >= 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllBySucursal = async (req, res) => {\r\n    const { sucursalE, startDate, endDate } = req.body;\r\n    // console.log(req.body);\r\n    let query = null;\r\n\r\n    try {\r\n        if (sucursalE == \"\") {\r\n            query = await Maf.find({\r\n                sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name\" })\r\n                .populate({ \r\n                    path: \"car\", \r\n                    select: \"model cod_tdp version\",\r\n                    populate: {\r\n                        path: 'model',\r\n                        select: 'avatar name marca',\r\n                        populate: {\r\n                            path: 'marca',\r\n                            select: 'name avatar'\r\n                        }\r\n                    }\r\n                })\r\n                .populate({ path: \"userApprove\", select: \"name username\" })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" });\r\n        } else {\r\n            const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n            if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n\r\n            query = await Maf.find({\r\n                $or: [\r\n                    {\r\n                        sucursalE: sucursalFound._id,\r\n                        fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n                    },\r\n                    {\r\n                        sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                        fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n                    },\r\n                ],\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name\" })\r\n                .populate({ \r\n                    path: \"car\", \r\n                    select: \"model cod_tdp version\",\r\n                    populate: {\r\n                        path: 'model',\r\n                        select: 'avatar name marca',\r\n                        populate: {\r\n                            path: 'marca',\r\n                            select: 'name avatar'\r\n                        }\r\n                    }\r\n                })\r\n                .populate({ path: \"userApprove\", select: \"name username\" })\r\n                .populate({ path: \"seller\", select: \"name\" })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" });\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllByEstado = async (req, res) => {\r\n    const { estado, sucursalE, startDate, endDate } = req.body;\r\n    let query = null;\r\n    // console.log(object);\r\n\r\n    try {\r\n        if (startDate && endDate) {\r\n            query = await Maf.find({\r\n                sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                primer_status_request: { $regex: \".*\" + estado + \".*\" },\r\n                fecha_ingreso: { $gte: new Date(startDate), $lte: new Date(endDate) },\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name email telefono\" })\r\n                .populate({ path: \"car\", select: \"model cod_tdp version\", populate: { path: \"model\", select: \"name avatar marca\", populate: { path: \"marca\", select: \"name avatar\" } } })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"anioFabE\", select: \"name\" })\r\n                .populate({ path: \"anioModE\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" })\r\n                .populate({ path: \"userApprove\", select: \"name username email phone\" })\r\n                .populate({ path: \"userCreator\", select: \"name username\" })\r\n                .populate({ path: \"createdBy\", select: \"name username\" });\r\n        } else {\r\n\r\n            const estadoFound = await StatusMafRequest.findOne({name: estado});\r\n\r\n            query = await Maf.find({\r\n                $or: [\r\n                    {\r\n                        sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                        primer_status_request: { $regex: \".*\" + estado + \".*\" },\r\n                    },\r\n                    {\r\n                        sucursal: { $regex: \".*\" + sucursalE + \".*\" },\r\n                        estadoSolicitudMAF: estadoFound._id,\r\n                    },\r\n                ],\r\n            })\r\n                .sort({ fecha_ingreso: -1 })\r\n                .populate({ path: \"customer\", select: \"name document\" })\r\n                .populate({ path: \"sucursalE\", select: \"name\" })\r\n                .populate({ path: \"seller\", select: \"name email telefono\" })\r\n                .populate({ path: \"car\", select: \"model cod_tdp version\", populate: { path: \"model\", select: \"name avatar marca\", populate: { path: \"marca\", select: \"name avatar\" } } })\r\n                .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n                .populate({ path: \"planMAF\", select: \"name\" })\r\n                .populate({ path: \"tipoUsoE\", select: \"name\" })\r\n                .populate({ path: \"anioFabE\", select: \"name\" })\r\n                .populate({ path: \"anioModE\", select: \"name\" })\r\n                .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" })\r\n                .populate({ path: \"userApprove\", select: \"name username email phone\" })\r\n                .populate({ path: \"userCreator\", select: \"name username\" })\r\n                .populate({ path: \"createdBy\", select: \"name username\" });\r\n        }\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        }else{\r\n            return res.status(404).json({message: `No existen solicitudes ${estado}`});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getOneById = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findById(mafId)\r\n            .populate({ path: \"customer\", select: \"name document cellphone email typeDocument\" })\r\n            .populate({ path: \"sucursalE\", select: \"name\" })\r\n            .populate({ path: \"seller\", select: \"name email cellphone\" })\r\n            .populate({ path: \"estadoSolicitudMAF\", select: \"name\" })\r\n            .populate({ path: \"estadoAprobacionJefatura\", select: \"name\" })\r\n            .populate({ path: \"userCreator\", select: \"name username\" })\r\n            .populate({ path: \"createdBy\", select: \"name username\" })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"cod_tdp model version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"name avatar marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"name avatar\",\r\n                    },\r\n                },\r\n            })\r\n            .populate({ path: \"anioFabE\", select: \"name\" })\r\n            .populate({ path: \"anioModE\", select: \"name\" })\r\n            .populate({ path: \"planMAF\", select: \"name\" })\r\n            .populate({ path: \"tipoUsoE\", select: \"name\" });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.updateRequestStateById = async (req, res) => {\r\n    const { primer_status_request, estadoSolicitudMAF, observacion, motivo, isEvaluacion, fechaEvaluacion, isObservado, fechaObservado, isRechazado, fechaRechazado } = req.body;\r\n    const { mafId } = req.params;\r\n\r\n    let query = null;\r\n\r\n    try {\r\n        const mafStatusFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!mafStatusFound) return res.status(503).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n\r\n        if (estadoSolicitudMAF == \"EN EVALUACIÓN\") {\r\n            query = await Maf.findByIdAndUpdate(mafId, {\r\n                primer_status_request,\r\n                estadoSolicitudMAF: mafStatusFound._id,\r\n                observacion,\r\n                isEvaluacion,\r\n                fechaEvaluacion,\r\n            });\r\n        } else if (estadoSolicitudMAF == \"OBSERVADO\") {\r\n            query = await Maf.findByIdAndUpdate(mafId, {\r\n                primer_status_request,\r\n                estadoSolicitudMAF: mafStatusFound._id,\r\n                observacion,\r\n                isObservado,\r\n                fechaObservado,\r\n            });\r\n        } else if (estadoSolicitudMAF == \"RECHAZADO\") {\r\n            query = await Maf.findByIdAndUpdate(mafId, {\r\n                primer_status_request,\r\n                estadoSolicitudMAF: mafStatusFound._id,\r\n                motivo,\r\n                isRechazado,\r\n                fechaRechazado,\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontró la solicitud MAF\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.approveRequestStateById = async (req, res) => {\r\n    const { primer_status_request, estadoSolicitudMAF, fecha_aprobacion, carta_aprobacion, observacion, isAprobado, fechaAprobado, userApprove } = req.body;\r\n    const { mafId } = req.params;\r\n    const docuAprobacion = req.files;\r\n\r\n    // console.log(req.body);\r\n    // console.log(docuAprobacion);\r\n\r\n    if (docuAprobacion.length == 0) return res.status(404).json({ message: \"No se adjuntó ningún documento\" });\r\n\r\n    try {\r\n        const estadoFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n\r\n        const userFound = await User.findOne({ username: userApprove });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${userApprove} no encontrado` });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            estadoSolicitudMAF: estadoFound._id,\r\n            fecha_aprobacion,\r\n            carta_aprobacion,\r\n            observacion,\r\n            isAprobado,\r\n            fechaAprobado,\r\n            carta_evidencia: docuAprobacion[0].location,\r\n            cronograma_pagos: docuAprobacion[1].location,\r\n            userApprove: userFound._id,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: `No se logró actualizar solicitud ${mafId}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.reenrollRequestStateById = async (req, res) => {\r\n    const { primer_status_request, estadoSolicitudMAF, observaciones_ingreso, isReingresado, fechaReingreso } = req.body;\r\n    const { mafId } = req.params;\r\n    const adicionales = req.files;\r\n\r\n    if (adicionales.length == 0) return res.status(404).json({ message: \"No se adjuntó ningún documento\" });\r\n    if (adicionales.length > 30) return res.status(404).json({ message: \"Se excedió el límite de archivos\" });\r\n\r\n    try {\r\n        const estadoFound = await StatusMafRequest.findOne({ name: estadoSolicitudMAF });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoSolicitudMAF} no encontrado` });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            estadoSolicitudMAF: estadoFound._id,\r\n            observaciones_ingreso,\r\n            isReingresado,\r\n            fechaReingreso,\r\n            files_adicionales: adicionales.map((a) => a.location),\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: `No se logró actualizar solicitud ${mafId}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.deleteOneById = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndDelete(mafId);\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontró solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\n// Anteriores1\r\n/*\r\n\r\nmafController.getAll = async (req, res) => {\r\n    try {\r\n        const query = await Maf.find()\r\n            .populate({ path: \"customer\", select: \"name document cellphone email\" })\r\n            .populate({ path: \"seller\", select: \"name avatar sucursal marca\" })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"cod_tdp model version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"avatar name marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"avatar name\",\r\n                    },\r\n                },\r\n            })\r\n            .populate({ path: \"userCreator\", select: \"name username avatar\" })\r\n            .populate({ path: \"userApprove\", select: \"name username avatar\" });\r\n        // console.log(query)\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getOneById = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findById(mafId)\r\n            .populate({ path: \"customer\", select: \"name document cellphone email\" })\r\n            .populate({ path: \"seller\", select: \"name avatar sucursal marca\" })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"cod_tdp model version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"avatar name marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"avatar name\",\r\n                    },\r\n                },\r\n            })\r\n            .populate({ path: \"userCreator\", select: \"name username avatar\" })\r\n            .populate({ path: \"userApprove\", select: \"name username avatar\" });\r\n        // console.log(query)\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllByVendedor = async (req, res) => {\r\n    const { vendedor } = req.body;\r\n    try {\r\n        const sellerFound = await Seller.find({ name: vendedor });\r\n        const query = await Maf.find({ seller: sellerFound.map((a) => a._id) }).populate(\"customer seller car userCreator userApprove\");\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getAllBySucursalyFecha = async (req, res) => {\r\n    const { sucursal, startDate, endDate } = req.body;\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: { $regex: \".*\" + sucursal + \".*\" },\r\n            fecha_ingreso: {\r\n                $gte: new Date(startDate),\r\n                $lte: new Date(endDate),\r\n            },\r\n        })\r\n            .sort({ fecha_ingreso: -1 })\r\n            .populate({\r\n                path: \"customer\",\r\n                select: \"name document\",\r\n            })\r\n            .populate({\r\n                path: \"seller\",\r\n                select: \"name document avatar sucursalE\",\r\n                populate: {\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n                },\r\n            })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"model cod_tdp version chasis\",\r\n                populate: [\r\n                    { path: \"chasis\", select: \"name\" },\r\n                    { path: \"model\", select: \"name avatar marca\", populate: { path: \"marca\", select: \"name avatar\" } },\r\n                ],\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen solicitudes MAF\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.obtenerRequestbyStatus = async (req, res) => {\r\n    const { status, pasoaHot, sucursal } = req.body;\r\n    try {\r\n        const query = await Maf.find({ primer_status_request: status, pasoaHot: pasoaHot, sucursal: sucursal }).populate(\"car seller customer\");\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: `No se encuentran solicitudes en ${status}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.response);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.createRequest = async (req, res) => {\r\n    const {\r\n        nro_solicitud,\r\n        fecha_ingreso,\r\n        hora_ingreso,\r\n        sucursal,\r\n        cliente,\r\n        estado_civil,\r\n        lugar_trabajo,\r\n        conyuge,\r\n        document_conyuge,\r\n        fecha_nacimiento_conyuge,\r\n        ingreso_promedio,\r\n        cuota_inicial,\r\n        vendedor,\r\n        vehiculo,\r\n        anio_fab,\r\n        anio_mod,\r\n        pvp,\r\n        plan,\r\n        tipo_uso,\r\n        primer_status_request,\r\n        observaciones_ingreso,\r\n        userCreator,\r\n    } = req.body;\r\n    const files = req.files;\r\n\r\n    let filePaths = [];\r\n\r\n    try {\r\n        if (files.length === 0) return res.status(400).json({ message: \"Faltan los documentos\" });\r\n\r\n        files.map((file) => {\r\n            filePaths.push(file.location);\r\n        });\r\n\r\n        const obj = new Maf({\r\n            nro_solicitud,\r\n            fecha_ingreso,\r\n            hora_ingreso,\r\n            sucursal,\r\n            estado_civil,\r\n            lugar_trabajo,\r\n            conyuge,\r\n            document_conyuge,\r\n            fecha_nacimiento_conyuge,\r\n            ingreso_promedio,\r\n            cuota_inicial,\r\n            anio_fab,\r\n            anio_mod,\r\n            pvp,\r\n            plan,\r\n            tipo_uso,\r\n            evidencias: filePaths,\r\n            primer_status_request,\r\n            observaciones_ingreso,\r\n        });\r\n\r\n        let clienteEncontrado = await Customer.find({ name: cliente });\r\n        obj.customer = clienteEncontrado.map((a) => a._id);\r\n\r\n        let vendedorEncontrado = await Seller.find({ name: vendedor });\r\n        obj.seller = vendedorEncontrado.map((b) => b._id);\r\n\r\n        let vehiculoEncontrado = await Vehicle.find({ cod_tdp: vehiculo });\r\n        obj.car = vehiculoEncontrado.map((c) => c._id);\r\n\r\n        let usuarioCreador = await User.find({ username: userCreator });\r\n        obj.userCreator = usuarioCreador.map((d) => d._id);\r\n\r\n        const objCreated = await obj.save();\r\n\r\n        if (objCreated) {\r\n            res.json({ message: \"Solicitud MAF creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.actualizarRequest = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { primer_status_request, fecha_respuesta, observacion, motivo, userApprove } = req.body;\r\n\r\n    try {\r\n        const userFound = await User.find({ username: userApprove });\r\n        const obj = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            motivo,\r\n            userApprove: userFound.map((a) => a._id),\r\n        });\r\n        if (obj) {\r\n            res.json({ message: \"Solicitud MAF actualizada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ messsage: \"No existe Solicitud a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n};\r\n\r\nmafController.agregarNewDocuments = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { reingresado, fecha_ingreso, primer_status_request } = req.body;\r\n    const adicionales = req.files;\r\n    // console.log(req)\r\n    let filePaths = [];\r\n\r\n    try {\r\n        if (adicionales.length === 0) return res.status(400).json({ message: \"Falta los Documentos\" });\r\n\r\n        adicionales.map((file) => {\r\n            filePaths.push(file.location);\r\n        });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            isReingresado: reingresado,\r\n            fecha_ingreso,\r\n            primer_status_request,\r\n            files_adicionales: filePaths,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Documentos agregados con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Solicitud a modificar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.actualizarReqAprobada = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { primer_status_request, fecha_respuesta, observacion, fecha_aprobacion, carta_aprobacion } = req.body;\r\n    const carta = req.file;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            fecha_aprobacion,\r\n            carta_aprobacion,\r\n            carta_evidencia: carta.location,\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF aprobada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Solicitud a aprobar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.requestaHot = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { pasoaHot } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { pasoaHot });\r\n        if (query) {\r\n            res.json({ message: \"Solicitud MAF se actualizó con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ messsage: \"No existe Solicitud a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n};\r\n\r\nmafController.cambioStatusByMaf = async (req, res) => {\r\n    const { mafId } = req.params;\r\n    const { tercer_status_request } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { tercer_status_request });\r\n        if (query) {\r\n            res.json({ message: `Cambio de Status a ${tercer_status_request} con éxito` });\r\n        } else {\r\n            return res.status(404).json({ messsage: \"No existe Solicitud a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n};\r\n\r\nmafController.deleteRequest = async (req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndRemove(mafId);\r\n        if (query) {\r\n            res.json({ message: \"Solicitud eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe la solicitud a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.enviarCorreoSolicitud = async (req, res) => {\r\n    const { to, cc, subject, text, html } = req.body;\r\n\r\n    try {\r\n        const transporter = nodemailer.createTransport({\r\n            host: \"mail.autonortnor.com\",\r\n            port: \"465\",\r\n            secure: true,\r\n            auth: {\r\n                user: \"sistemadv@autonortnor.com\",\r\n                pass: \"k=q0mdgLo,QS\",\r\n            },\r\n        });\r\n\r\n        let email = await transporter.sendMail({\r\n            from: '\"Sistema ADV 👻\" <sistemadv@autonortnor.com>',\r\n            to: to,\r\n            cc: [cc, \"frojas@autonortnor.com.pe\"],\r\n            subject: subject,\r\n            text: text,\r\n            html: html,\r\n        });\r\n\r\n        let respuesta = email.response.split(\" \");\r\n        // console.log(respuesta)\r\n        // console.log(respuesta[1])\r\n        if (respuesta[1] == \"OK\") {\r\n            console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(email));\r\n            res.json({ message: \"Mensaje enviado\", info: email.messageId, retardo: email.envelopeTime, respuesta: email.response });\r\n        } else {\r\n            return res.status(500).json({ message: \"Error al enviar correo\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.downloadAndZipeo = async (req, res) => {\r\n    const { files } = req.body;\r\n\r\n    try {\r\n        await Promise.all(files.map((url) => download(url, path.resolve(\"src/uploads\"))));\r\n\r\n        console.log(\"Download completed!\");\r\n\r\n        var dir = path.resolve(\"src/uploads\");\r\n        var uploadDir = fs.readdirSync(dir);\r\n\r\n        const zip = new AdmZip();\r\n\r\n        for (var i = 0; i < uploadDir.length; i++) {\r\n            zip.addLocalFile(dir + \"/\" + uploadDir[i]);\r\n        }\r\n\r\n        const downloadName = `${Date.now()}.zip`;\r\n\r\n        const data = zip.toBuffer();\r\n\r\n        zip.writeZip(dir + \"/\" + downloadName);\r\n\r\n        res.json({ url: downloadName });\r\n\r\n        // delFiles();\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.descargaYZip = async (req, res) => {\r\n    const { links } = req.body;\r\n    const fileZip = req.file;\r\n\r\n    await Promise.all(links\r\n        .map(url => download(url, path.resolve('src/uploads'))));\r\n\r\n    console.log('Download completed!');\r\n    console.log(fileZip);\r\n};\r\n\r\nmafController.sendMessageWsp = async (req, res) => {\r\n    const { placa, sucursal, servicio, mejora, calificacion, destino } = req.body;\r\n    const accountSid = \"AC5145f2cf5442844fa805e987f09751c6\";\r\n    const authToken = \"42d0808b60a3917dddcf06879e56ff4e\";\r\n\r\n    const client = new twilio(accountSid, authToken);\r\n\r\n    client.messages\r\n        .create({\r\n            // body: 'Se registró una calificación en la siguiente encuesta.\r\n            Cliente con placa: {{1}} perteneciente a la sucursal: {{2}} que realizó el servicio de: {{3}}, sugiere mejorar en: {{4}}.\r\n            Su calificación es: {{5}}'\r\n            body: `Se registró una calificación en la siguiente encuesta. \\nCliente con placa: *${placa}* perteneciente a la sucursal: *${sucursal}* que realizó el servicio de: *${servicio}*, sugiere mejorar en: *${mejora}*. \\nSu calificación es: *${calificacion}*`,\r\n            // to: 'whatsapp:+51924063422', // Fernando Rojas\r\n            to: \"whatsapp:+51\" + destino, // Paul holguin\r\n            // to: '+51989927794', // Paul holguin\r\n            // to: '+51924063422',\r\n            from: \"whatsapp:+18482856322\", // From a valid Twilio number\r\n            // from: '+18482856322',\r\n        })\r\n        .then((message) => {\r\n            // console.log(message)\r\n            res.json({ ok: \"Message sent\", sid: message.sid, status: message.status });\r\n        });\r\n};\r\n\r\nmafController.getCountAll = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: sucursal,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getCountByStatus = async (req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getRankingByStatus = async (req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$primer_status_request\",\r\n                    num_solicitudes: { $sum: 1 },\r\n                },\r\n            },\r\n            {\r\n                $sort: { num_solicitudes: -1 },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen Solicitudes aún\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getRankingByVendedor = async (req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$seller\",\r\n                    num_solicitudes: { $sum: 1 },\r\n                },\r\n            },\r\n            {\r\n                $sort: { num_solicitudes: -1 },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen Solicitudes aún\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getRankingByVehicle = async (req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$car\",\r\n                    num_solicitudes: { $sum: 1 },\r\n                },\r\n            },\r\n            {\r\n                $sort: { num_solicitudes: -1 },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"No existen Solicitudes aún\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getSolicitudesBySeller = async (req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n\r\n        if (!sellerFound) return res.status(404).json({ message: \"No existe el vendedor\" });\r\n\r\n        const filtro = { seller: sellerFound._id, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$primer_status_request\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"Vendedor no ingresó ninguna solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.getVehiclesBySeller = async (req, res) => {\r\n    const { vendedor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n\r\n        if (!sellerFound) return res.status(404).json({ message: \"No existe el vendedor\" });\r\n\r\n        const filtro = {\r\n            seller: sellerFound._id,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) },\r\n        };\r\n\r\n        const query = await Maf.aggregate([\r\n            {\r\n                $match: filtro,\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: \"$car\",\r\n                    qty: { $sum: 1 },\r\n                },\r\n            },\r\n        ]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: \"Vendedor no ingresó ninguna solicitud\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nmafController.testRanking = async (req, res) => {\r\n    // const { sucursal,marca, start, end } = req.body;\r\n    const { marca } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            \"car.model.marca.name\": marca,\r\n        });\r\n        // const filtro = {\r\n        //     sucursal: sucursal,\r\n        //     \"car.model.marca.name\" : marca,\r\n        //     fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        // };\r\n\r\n        console.log(query);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ deploy: query, total: query.length });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen filtros\" });\r\n        }\r\n\r\n        // const query = await Maf.aggregate([{\r\n        //     $match: filtro\r\n        // }, {\r\n        //     $group: {\r\n        //         _id: \"$primer_status_request\",\r\n        //         num_solicitudes: { $sum: 1 }\r\n        //     }\r\n        // }, {\r\n        //     $sort: { num_solicitudes: -1 }\r\n        // }]);\r\n\r\n        // if (query.length > 0) {\r\n        //     res.json({ total: query.length, ranking: query });\r\n        // } else {\r\n        //     return res.status(201).json({ message: 'No existen Solicitudes aún' });\r\n        // }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n*/\r\n\r\nmafController.getAllSolicitudesAprobadas = async (req, res) => {\r\n    const { customer, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const customerFound = await Customer.findOne({ name: customer });\r\n\r\n        const query = await Maf.find({\r\n            customer: customerFound._id,\r\n            primer_status_request: estado,\r\n        })\r\n            .select(\"nro_solicitud fecha_ingreso customer seller car fecha_aprobacion carta_evidencia primer_status_request\")\r\n            .populate({\r\n                path: \"customer\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"seller\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"car\",\r\n                select: \"model cod_tdp version\",\r\n                populate: {\r\n                    path: \"model\",\r\n                    select: \"name avatar marca\",\r\n                    populate: {\r\n                        path: \"marca\",\r\n                        select: \"name avatar\",\r\n                    },\r\n                },\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontraron solicitudes\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport default mafController;\r\n"],"file":"maf.controller.js"}