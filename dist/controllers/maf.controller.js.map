{"version":3,"sources":["../../src/controllers/maf.controller.js"],"names":["getAll","req","res","Maf","find","populate","query","length","json","status","message","console","log","getOneById","mafId","params","findById","getAllByVendedor","vendedor","body","Seller","name","sellerFound","seller","map","a","_id","nro_request","requests","getAllBySucursal","sucursal","obtenerRequestbyStatus","pasoaHot","primer_status_request","response","createRequest","nro_solicitud","fecha_ingreso","hora_ingreso","cliente","estado_civil","lugar_trabajo","conyuge","document_conyuge","fecha_nacimiento_conyuge","ingreso_promedio","cuota_inicial","vehiculo","anio_fab","anio_mod","pvp","plan","tipo_uso","observaciones_ingreso","userCreator","files","filePaths","file","push","location","obj","evidencias","Customer","clienteEncontrado","customer","vendedorEncontrado","b","Vehicle","cod_tdp","vehiculoEncontrado","car","c","User","username","usuarioCreador","d","save","objCreated","actualizarRequest","fecha_respuesta","observacion","motivo","userApprove","userFound","findByIdAndUpdate","messsage","error","agregarNewDocuments","reingresado","adicionales","isReingresado","files_adicionales","actualizarReqAprobada","fecha_aprobacion","carta_aprobacion","carta","carta_evidencia","requestaHot","cambioStatusByMaf","tercer_status_request","deleteRequest","findByIdAndRemove","enviarCorreoSolicitud","to","cc","subject","text","html","transporter","nodemailer","createTransport","host","port","secure","auth","user","pass","sendMail","from","email","respuesta","split","getTestMessageUrl","info","messageId","retardo","envelopeTime","downloadAndZipeo","Promise","all","url","path","resolve","dir","uploadDir","fs","readdirSync","zip","AdmZip","i","addLocalFile","downloadName","Date","now","data","toBuffer","writeZip","descargaYZip","links","fileZip"],"mappings":"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","sourcesContent":["import nodemailer from 'nodemailer'\r\nimport Customer from '../models/Customer'\r\nimport Maf from '../models/Maf'\r\nimport Seller from '../models/Seller'\r\nimport Vehicle from '../models/Vehicle'\r\nimport User from '../models/User'\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport download from 'download';\r\nimport AdmZip from 'adm-zip';\r\nimport { delFiles } from '../middlewares/deleteFiles'\r\nimport 'dotenv/config';\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Maf.find().populate('customer seller car userCreator userApprove')\r\n            // console.log(query)\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getOneById = async(req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findById(mafId).populate('customer seller car userCreator userApprove')\r\n            // console.log(query)\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAllByVendedor = async(req, res) => {\r\n    const { vendedor } = req.body;\r\n    try {\r\n        const sellerFound = await Seller.find({ name: vendedor });\r\n        const query = await Maf.find({ seller: sellerFound.map(a => a._id) }).populate('customer seller car userCreator userApprove');\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAllBySucursal = async(req, res) => {\r\n    const { sucursal } = req.body;\r\n    try {\r\n        const query = await Maf.find({ sucursal: sucursal }).populate('customer seller car userCreator userApprove');\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const obtenerRequestbyStatus = async(req, res) => {\r\n    const { status, pasoaHot, sucursal } = req.body\r\n    try {\r\n        const query = await Maf.find({ primer_status_request: status, pasoaHot: pasoaHot, sucursal: sucursal })\r\n            .populate('car seller customer')\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: `No se encuentran solicitudes en ${status}` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err.response)\r\n        return res.status(503).json({ message: err.message })\r\n\r\n    }\r\n}\r\n\r\nexport const createRequest = async(req, res) => {\r\n    const {\r\n        nro_solicitud,\r\n        fecha_ingreso,\r\n        hora_ingreso,\r\n        sucursal,\r\n        cliente,\r\n        estado_civil,\r\n        lugar_trabajo,\r\n        conyuge,\r\n        document_conyuge,\r\n        fecha_nacimiento_conyuge,\r\n        ingreso_promedio,\r\n        cuota_inicial,\r\n        vendedor,\r\n        vehiculo,\r\n        anio_fab,\r\n        anio_mod,\r\n        pvp,\r\n        plan,\r\n        tipo_uso,\r\n        primer_status_request,\r\n        observaciones_ingreso,\r\n        userCreator\r\n    } = req.body\r\n    const files = req.files;\r\n\r\n    let filePaths = [];\r\n\r\n    try {\r\n\r\n        if (files.length === 0) return res.status(400).json({ message: 'Faltan los documentos' })\r\n\r\n        files.map((file) => {\r\n            filePaths.push(file.location);\r\n        })\r\n\r\n        const obj = new Maf({\r\n            nro_solicitud,\r\n            fecha_ingreso,\r\n            hora_ingreso,\r\n            sucursal,\r\n            estado_civil,\r\n            lugar_trabajo,\r\n            conyuge,\r\n            document_conyuge,\r\n            fecha_nacimiento_conyuge,\r\n            ingreso_promedio,\r\n            cuota_inicial,\r\n            anio_fab,\r\n            anio_mod,\r\n            pvp,\r\n            plan,\r\n            tipo_uso,\r\n            evidencias: filePaths,\r\n            primer_status_request,\r\n            observaciones_ingreso\r\n        });\r\n\r\n        let clienteEncontrado = await Customer.find({ name: cliente });\r\n        obj.customer = clienteEncontrado.map(a => a._id);\r\n\r\n        let vendedorEncontrado = await Seller.find({ name: vendedor });\r\n        obj.seller = vendedorEncontrado.map(b => b._id);\r\n\r\n        let vehiculoEncontrado = await Vehicle.find({ cod_tdp: vehiculo });\r\n        obj.car = vehiculoEncontrado.map(c => c._id)\r\n\r\n        let usuarioCreador = await User.find({ username: userCreator });\r\n        obj.userCreator = usuarioCreador.map(d => d._id);\r\n\r\n        const objCreated = await obj.save()\r\n\r\n        if (objCreated) {\r\n            res.json({ message: 'Solicitud MAF creada con éxito' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const actualizarRequest = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const {\r\n        primer_status_request,\r\n        fecha_respuesta,\r\n        observacion,\r\n        motivo,\r\n        userApprove\r\n    } = req.body\r\n\r\n    try {\r\n\r\n        const userFound = await User.find({ username: userApprove });\r\n        const obj = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            motivo,\r\n            userApprove: userFound.map(a => a._id)\r\n        })\r\n        if (obj) {\r\n            res.json({ message: 'Solicitud MAF actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Solicitud a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const agregarNewDocuments = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const { reingresado, fecha_ingreso, primer_status_request } = req.body;\r\n    const adicionales = req.files;\r\n    // console.log(req)\r\n    let filePaths = [];\r\n\r\n    try {\r\n        if (adicionales.length === 0) return res.status(400).json({ message: 'Falta los Documentos' });\r\n\r\n        adicionales.map((file) => {\r\n            filePaths.push(file.location);\r\n        });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            isReingresado: reingresado,\r\n            fecha_ingreso,\r\n            primer_status_request,\r\n            files_adicionales: filePaths\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Documentos agregados con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Solicitud a modificar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const actualizarReqAprobada = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const {\r\n        primer_status_request,\r\n        fecha_respuesta,\r\n        observacion,\r\n        fecha_aprobacion,\r\n        carta_aprobacion\r\n    } = req.body\r\n    const carta = req.file;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            fecha_aprobacion,\r\n            carta_aprobacion,\r\n            carta_evidencia: carta.location\r\n        })\r\n\r\n        if (query) {\r\n            res.json({ message: 'Solicitud MAF aprobada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Solicitud a aprobar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const requestaHot = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const { pasoaHot } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { pasoaHot });\r\n        if (query) {\r\n            res.json({ message: 'Solicitud MAF se actualizó con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Solicitud a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const cambioStatusByMaf = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const { tercer_status_request } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { tercer_status_request });\r\n        if (query) {\r\n            res.json({ message: `Cambio de Status a ${tercer_status_request} con éxito` });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Solicitud a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const deleteRequest = async(req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndRemove(mafId);\r\n        if (query) {\r\n            res.json({ message: 'Solicitud eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la solicitud a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const enviarCorreoSolicitud = async(req, res) => {\r\n    const { to, cc, subject, text, html } = req.body\r\n\r\n    try {\r\n        const transporter = nodemailer.createTransport({\r\n            host: 'mail.autonortnor.com',\r\n            port: '465',\r\n            secure: true,\r\n            auth: {\r\n                user: 'sistemadv@autonortnor.com',\r\n                pass: 'k=q0mdgLo,QS'\r\n            }\r\n        })\r\n\r\n        let email = await transporter.sendMail({\r\n            from: '\"Sistema ADV 👻\" <sistemadv@autonortnor.com>',\r\n            to: to,\r\n            cc: [cc, 'frojas@autonortnor.com.pe'],\r\n            subject: subject,\r\n            text: text,\r\n            html: html\r\n        })\r\n\r\n        let respuesta = email.response.split(\" \")\r\n            // console.log(respuesta)\r\n            // console.log(respuesta[1])\r\n        if (respuesta[1] == 'OK') {\r\n            console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(email));\r\n            res.json({ message: 'Mensaje enviado', info: email.messageId, retardo: email.envelopeTime, respuesta: email.response })\r\n        } else {\r\n            return res.status(500).json({ message: 'Error al enviar correo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const downloadAndZipeo = async(req, res) => {\r\n\r\n    const { files } = req.body;\r\n\r\n    try {\r\n        await Promise.all(files\r\n            .map(url => download(url, path.resolve('src/uploads'))));\r\n\r\n        console.log('Download completed!')\r\n\r\n        var dir = path.resolve('src/uploads');\r\n        var uploadDir = fs.readdirSync(dir);\r\n\r\n        const zip = new AdmZip();\r\n\r\n        for (var i = 0; i < uploadDir.length; i++) {\r\n            zip.addLocalFile(dir + '/' + uploadDir[i]);\r\n        }\r\n\r\n        const downloadName = `${Date.now()}.zip`;\r\n\r\n        const data = zip.toBuffer();\r\n\r\n        zip.writeZip(dir + '/' + downloadName);\r\n\r\n        res.json({ url: downloadName });\r\n\r\n        // delFiles();\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const descargaYZip = async(req, res) => {\r\n    const { links } = req.body;\r\n    const fileZip = req.file;\r\n\r\n    /* await Promise.all(links\r\n        .map(url => download(url, path.resolve('src/uploads'))));\r\n\r\n    console.log('Download completed!'); */\r\n    console.log(fileZip);\r\n}"],"file":"maf.controller.js"}