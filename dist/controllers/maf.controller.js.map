{"version":3,"sources":["../../src/controllers/maf.controller.js"],"names":["getAll","req","res","Maf","find","populate","path","select","query","length","json","status","message","console","log","getOneById","mafId","params","findById","getAllByVendedor","vendedor","body","Seller","name","sellerFound","seller","map","a","_id","nro_request","requests","getAllBySucursal","sucursal","obtenerRequestbyStatus","pasoaHot","primer_status_request","response","createRequest","nro_solicitud","fecha_ingreso","hora_ingreso","cliente","estado_civil","lugar_trabajo","conyuge","document_conyuge","fecha_nacimiento_conyuge","ingreso_promedio","cuota_inicial","vehiculo","anio_fab","anio_mod","pvp","plan","tipo_uso","observaciones_ingreso","userCreator","files","filePaths","file","push","location","obj","evidencias","Customer","clienteEncontrado","customer","vendedorEncontrado","b","Vehicle","cod_tdp","vehiculoEncontrado","car","c","User","username","usuarioCreador","d","save","objCreated","actualizarRequest","fecha_respuesta","observacion","motivo","userApprove","userFound","findByIdAndUpdate","messsage","error","agregarNewDocuments","reingresado","adicionales","isReingresado","files_adicionales","actualizarReqAprobada","fecha_aprobacion","carta_aprobacion","carta","carta_evidencia","requestaHot","cambioStatusByMaf","tercer_status_request","deleteRequest","findByIdAndRemove","enviarCorreoSolicitud","to","cc","subject","text","html","transporter","nodemailer","createTransport","host","port","secure","auth","user","pass","sendMail","from","email","respuesta","split","getTestMessageUrl","info","messageId","retardo","envelopeTime","downloadAndZipeo","Promise","all","url","resolve","dir","uploadDir","fs","readdirSync","zip","AdmZip","i","addLocalFile","downloadName","Date","now","data","toBuffer","writeZip","descargaYZip","links","fileZip","sendMessageWsp","placa","servicio","mejora","calificacion","destino","accountSid","authToken","client","twilio","messages","create","then","ok","sid","getCountAll","start","end","$gte","$lte","countDocuments","count","getCountByStatus","estado","getRankingByStatus","filtro","aggregate","$match","$group","num_solicitudes","$sum","$sort","total","ranking","getRankingByVendedor","getRankingByVehicle","getSolicitudesBySeller","findOne","qty","deploy","getVehiclesBySeller","testRanking","marca"],"mappings":"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","sourcesContent":["import nodemailer from 'nodemailer'\r\nimport Customer from '../models/Customer'\r\nimport Maf from '../models/Maf'\r\nimport Seller from '../models/Seller'\r\nimport Vehicle from '../models/Vehicle'\r\nimport User from '../models/User'\r\nimport fs from 'fs';\r\nimport path from 'path';\r\nimport download from 'download';\r\nimport AdmZip from 'adm-zip';\r\nimport 'dotenv/config';\r\nimport twilio from 'twilio';\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Maf.find()\r\n        .populate({ path: 'customer', select: 'name document cellphone email'})\r\n        .populate({path: 'seller', select: 'name avatar sucursal marca'})\r\n        .populate({\r\n            path: 'car',\r\n            select: 'cod_tdp model version',\r\n            populate: {\r\n                path: 'model',\r\n                select: 'avatar name marca',\r\n                populate: {\r\n                    path: 'marca',\r\n                    select: 'avatar name'\r\n                }\r\n            }\r\n        })\r\n        .populate({path: 'userCreator', select: 'name username avatar'})\r\n        .populate({ path: 'userApprove', select: 'name username avatar'})\r\n            // console.log(query)\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getOneById = async(req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findById(mafId)\r\n        .populate({ path: 'customer', select: 'name document cellphone email'})\r\n        .populate({path: 'seller', select: 'name avatar sucursal marca'})\r\n        .populate({\r\n            path: 'car',\r\n            select: 'cod_tdp model version',\r\n            populate: {\r\n                path: 'model',\r\n                select: 'avatar name marca',\r\n                populate: {\r\n                    path: 'marca',\r\n                    select: 'avatar name'\r\n                }\r\n            }\r\n        })\r\n        .populate({path: 'userCreator', select: 'name username avatar'})\r\n        .populate({ path: 'userApprove', select: 'name username avatar'});\r\n            // console.log(query)\r\n        if (query) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitud' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAllByVendedor = async(req, res) => {\r\n    const { vendedor } = req.body;\r\n    try {\r\n        const sellerFound = await Seller.find({ name: vendedor });\r\n        const query = await Maf.find({ seller: sellerFound.map(a => a._id) }).populate('customer seller car userCreator userApprove');\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getAllBySucursal = async(req, res) => {\r\n    const { sucursal } = req.body;\r\n    try {\r\n        const query = await Maf.find({ sucursal: sucursal }).populate('customer seller car userCreator userApprove');\r\n        if (query.length > 0) {\r\n            res.json({ nro_request: query.length, requests: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen solicitudes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const obtenerRequestbyStatus = async(req, res) => {\r\n    const { status, pasoaHot, sucursal } = req.body\r\n    try {\r\n        const query = await Maf.find({ primer_status_request: status, pasoaHot: pasoaHot, sucursal: sucursal })\r\n            .populate('car seller customer')\r\n        if (query.length > 0) {\r\n            res.json(query)\r\n        } else {\r\n            return res.status(404).json({ message: `No se encuentran solicitudes en ${status}` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err.response)\r\n        return res.status(503).json({ message: err.message })\r\n\r\n    }\r\n}\r\n\r\nexport const createRequest = async(req, res) => {\r\n    const {\r\n        nro_solicitud,\r\n        fecha_ingreso,\r\n        hora_ingreso,\r\n        sucursal,\r\n        cliente,\r\n        estado_civil,\r\n        lugar_trabajo,\r\n        conyuge,\r\n        document_conyuge,\r\n        fecha_nacimiento_conyuge,\r\n        ingreso_promedio,\r\n        cuota_inicial,\r\n        vendedor,\r\n        vehiculo,\r\n        anio_fab,\r\n        anio_mod,\r\n        pvp,\r\n        plan,\r\n        tipo_uso,\r\n        primer_status_request,\r\n        observaciones_ingreso,\r\n        userCreator\r\n    } = req.body\r\n    const files = req.files;\r\n\r\n    let filePaths = [];\r\n\r\n    try {\r\n\r\n        if (files.length === 0) return res.status(400).json({ message: 'Faltan los documentos' })\r\n\r\n        files.map((file) => {\r\n            filePaths.push(file.location);\r\n        })\r\n\r\n        const obj = new Maf({\r\n            nro_solicitud,\r\n            fecha_ingreso,\r\n            hora_ingreso,\r\n            sucursal,\r\n            estado_civil,\r\n            lugar_trabajo,\r\n            conyuge,\r\n            document_conyuge,\r\n            fecha_nacimiento_conyuge,\r\n            ingreso_promedio,\r\n            cuota_inicial,\r\n            anio_fab,\r\n            anio_mod,\r\n            pvp,\r\n            plan,\r\n            tipo_uso,\r\n            evidencias: filePaths,\r\n            primer_status_request,\r\n            observaciones_ingreso\r\n        });\r\n\r\n        let clienteEncontrado = await Customer.find({ name: cliente });\r\n        obj.customer = clienteEncontrado.map(a => a._id);\r\n\r\n        let vendedorEncontrado = await Seller.find({ name: vendedor });\r\n        obj.seller = vendedorEncontrado.map(b => b._id);\r\n\r\n        let vehiculoEncontrado = await Vehicle.find({ cod_tdp: vehiculo });\r\n        obj.car = vehiculoEncontrado.map(c => c._id)\r\n\r\n        let usuarioCreador = await User.find({ username: userCreator });\r\n        obj.userCreator = usuarioCreador.map(d => d._id);\r\n\r\n        const objCreated = await obj.save()\r\n\r\n        if (objCreated) {\r\n            res.json({ message: 'Solicitud MAF creada con éxito' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const actualizarRequest = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const {\r\n        primer_status_request,\r\n        fecha_respuesta,\r\n        observacion,\r\n        motivo,\r\n        userApprove\r\n    } = req.body\r\n\r\n    try {\r\n\r\n        const userFound = await User.find({ username: userApprove });\r\n        const obj = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            motivo,\r\n            userApprove: userFound.map(a => a._id)\r\n        })\r\n        if (obj) {\r\n            res.json({ message: 'Solicitud MAF actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Solicitud a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const agregarNewDocuments = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const { reingresado, fecha_ingreso, primer_status_request } = req.body;\r\n    const adicionales = req.files;\r\n    // console.log(req)\r\n    let filePaths = [];\r\n\r\n    try {\r\n        if (adicionales.length === 0) return res.status(400).json({ message: 'Falta los Documentos' });\r\n\r\n        adicionales.map((file) => {\r\n            filePaths.push(file.location);\r\n        });\r\n\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            isReingresado: reingresado,\r\n            fecha_ingreso,\r\n            primer_status_request,\r\n            files_adicionales: filePaths\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Documentos agregados con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Solicitud a modificar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const actualizarReqAprobada = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const {\r\n        primer_status_request,\r\n        fecha_respuesta,\r\n        observacion,\r\n        fecha_aprobacion,\r\n        carta_aprobacion\r\n    } = req.body\r\n    const carta = req.file;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, {\r\n            primer_status_request,\r\n            fecha_respuesta,\r\n            observacion,\r\n            fecha_aprobacion,\r\n            carta_aprobacion,\r\n            carta_evidencia: carta.location\r\n        })\r\n\r\n        if (query) {\r\n            res.json({ message: 'Solicitud MAF aprobada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Solicitud a aprobar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const requestaHot = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const { pasoaHot } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { pasoaHot });\r\n        if (query) {\r\n            res.json({ message: 'Solicitud MAF se actualizó con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Solicitud a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const cambioStatusByMaf = async(req, res) => {\r\n    const { mafId } = req.params;\r\n    const { tercer_status_request } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndUpdate(mafId, { tercer_status_request });\r\n        if (query) {\r\n            res.json({ message: `Cambio de Status a ${tercer_status_request} con éxito` });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Solicitud a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const deleteRequest = async(req, res) => {\r\n    const { mafId } = req.params;\r\n\r\n    try {\r\n        const query = await Maf.findByIdAndRemove(mafId);\r\n        if (query) {\r\n            res.json({ message: 'Solicitud eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la solicitud a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const enviarCorreoSolicitud = async(req, res) => {\r\n    const { to, cc, subject, text, html } = req.body\r\n\r\n    try {\r\n        const transporter = nodemailer.createTransport({\r\n            host: 'mail.autonortnor.com',\r\n            port: '465',\r\n            secure: true,\r\n            auth: {\r\n                user: 'sistemadv@autonortnor.com',\r\n                pass: 'k=q0mdgLo,QS'\r\n            }\r\n        })\r\n\r\n        let email = await transporter.sendMail({\r\n            from: '\"Sistema ADV 👻\" <sistemadv@autonortnor.com>',\r\n            to: to,\r\n            cc: [cc, 'frojas@autonortnor.com.pe'],\r\n            subject: subject,\r\n            text: text,\r\n            html: html\r\n        })\r\n\r\n        let respuesta = email.response.split(\" \")\r\n            // console.log(respuesta)\r\n            // console.log(respuesta[1])\r\n        if (respuesta[1] == 'OK') {\r\n            console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(email));\r\n            res.json({ message: 'Mensaje enviado', info: email.messageId, retardo: email.envelopeTime, respuesta: email.response })\r\n        } else {\r\n            return res.status(500).json({ message: 'Error al enviar correo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const downloadAndZipeo = async(req, res) => {\r\n\r\n    const { files } = req.body;\r\n\r\n    try {\r\n        await Promise.all(files\r\n            .map(url => download(url, path.resolve('src/uploads'))));\r\n\r\n        console.log('Download completed!')\r\n\r\n        var dir = path.resolve('src/uploads');\r\n        var uploadDir = fs.readdirSync(dir);\r\n\r\n        const zip = new AdmZip();\r\n\r\n        for (var i = 0; i < uploadDir.length; i++) {\r\n            zip.addLocalFile(dir + '/' + uploadDir[i]);\r\n        }\r\n\r\n        const downloadName = `${Date.now()}.zip`;\r\n\r\n        const data = zip.toBuffer();\r\n\r\n        zip.writeZip(dir + '/' + downloadName);\r\n\r\n        res.json({ url: downloadName });\r\n\r\n        // delFiles();\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const descargaYZip = async(req, res) => {\r\n    const { links } = req.body;\r\n    const fileZip = req.file;\r\n\r\n    /* await Promise.all(links\r\n        .map(url => download(url, path.resolve('src/uploads'))));\r\n\r\n    console.log('Download completed!'); */\r\n    console.log(fileZip);\r\n}\r\n\r\nexport const sendMessageWsp = async(req, res) => {\r\n    const { placa, sucursal, servicio, mejora, calificacion, destino } = req.body;\r\n    const accountSid = 'AC5145f2cf5442844fa805e987f09751c6';\r\n    const authToken = '42d0808b60a3917dddcf06879e56ff4e';\r\n\r\n    const client = new twilio(accountSid, authToken);\r\n\r\n    client.messages\r\n        .create({\r\n            /* body: 'Se registró una calificación en la siguiente encuesta.\r\n            Cliente con placa: {{1}} perteneciente a la sucursal: {{2}} que realizó el servicio de: {{3}}, sugiere mejorar en: {{4}}.\r\n            Su calificación es: {{5}}' */\r\n            body: `Se registró una calificación en la siguiente encuesta. \\nCliente con placa: *${placa}* perteneciente a la sucursal: *${sucursal}* que realizó el servicio de: *${servicio}*, sugiere mejorar en: *${mejora}*. \\nSu calificación es: *${calificacion}*`,\r\n            // to: 'whatsapp:+51924063422', // Fernando Rojas\r\n            to: 'whatsapp:+51' + destino, // Paul holguin\r\n            // to: '+51989927794', // Paul holguin\r\n            // to: '+51924063422',\r\n            from: 'whatsapp:+18482856322', // From a valid Twilio number\r\n            // from: '+18482856322',\r\n        })\r\n        .then((message) => {\r\n            // console.log(message)\r\n            res.json({ ok: 'Message sent', sid: message.sid, status: message.status });\r\n        });\r\n}\r\n\r\nexport const getCountAll = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: sucursal,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getCountByStatus = async(req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const query = await Maf.find({\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByStatus = async(req, res) => {\r\n    const { sucursal, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Maf.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: \"$primer_status_request\",\r\n                num_solicitudes: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_solicitudes: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Solicitudes aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByVendedor = async(req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Maf.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: \"$seller\",\r\n                num_solicitudes: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_solicitudes: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Solicitudes aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRankingByVehicle = async(req, res) => {\r\n    const { sucursal, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const filtro = {\r\n            sucursal: sucursal,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Maf.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: \"$car\",\r\n                num_solicitudes: { $sum: 1 }\r\n            }\r\n        }, {\r\n            $sort: { num_solicitudes: -1 }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, ranking: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Solicitudes aún' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSolicitudesBySeller = async(req, res) => {\r\n    const { vendedor, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        const filtro = { seller: sellerFound._id, fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) } };\r\n\r\n        const query = await Maf.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: \"$primer_status_request\",\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna solicitud' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getVehiclesBySeller = async(req, res) => {\r\n    const { vendedor, estado, start, end } = req.body;\r\n\r\n    try {\r\n        const sellerFound = await Seller.findOne({ name: vendedor });\r\n\r\n        if (!sellerFound) return res.status(404).json({ message: 'No existe el vendedor' });\r\n\r\n        const filtro = {\r\n            seller: sellerFound._id,\r\n            primer_status_request: estado,\r\n            fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        };\r\n\r\n        const query = await Maf.aggregate([{\r\n            $match: filtro\r\n        }, {\r\n            $group: {\r\n                _id: '$car',\r\n                qty: { $sum: 1 }\r\n            }\r\n        }]);\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, deploy: query });\r\n        } else {\r\n            return res.status(201).json({ message: 'Vendedor no ingresó ninguna solicitud' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err.message);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const testRanking = async(req, res) => {\r\n    // const { sucursal,marca, start, end } = req.body;\r\n    const { marca } = req.body;\r\n\r\n    try {\r\n\r\n        const query = await Maf.find({\r\n            \"car.model.marca.name\" : marca,\r\n        });\r\n        // const filtro = {\r\n        //     sucursal: sucursal,\r\n        //     \"car.model.marca.name\" : marca,\r\n        //     fecha_ingreso: { $gte: new Date(start), $lte: new Date(end) }\r\n        // };\r\n\r\n        console.log(query);\r\n\r\n        if(query.length > 0){\r\n            res.json({deploy: query, total: query.length});\r\n        }else{\r\n            return res.status(404).json({message: 'No existen filtros'});\r\n        }\r\n\r\n        // const query = await Maf.aggregate([{\r\n        //     $match: filtro\r\n        // }, {\r\n        //     $group: {\r\n        //         _id: \"$primer_status_request\",\r\n        //         num_solicitudes: { $sum: 1 }\r\n        //     }\r\n        // }, {\r\n        //     $sort: { num_solicitudes: -1 }\r\n        // }]);\r\n\r\n        // if (query.length > 0) {\r\n        //     res.json({ total: query.length, ranking: query });\r\n        // } else {\r\n        //     return res.status(201).json({ message: 'No existen Solicitudes aún' });\r\n        // }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"maf.controller.js"}