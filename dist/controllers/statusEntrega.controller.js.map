{"version":3,"sources":["../../src/controllers/statusEntrega.controller.js"],"names":["statusCtrl","getAll","req","res","StatusEntrega","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","statusId","params","findById","one","getAllActivos","estado","value","total_active","all_active","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA,IAAMA,UAAU,GAAG,EAAnB;;AAEAA,UAAU,CAACC,MAAX;AAAA,qFAAoB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEEC,uBAAcC,IAAd,GAAqBC,IAArB,CAA0B;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAA1B,CAFF;;AAAA;AAEZC,YAAAA,KAFY;;AAAA,kBAGdA,KAAK,CAACC,MAAN,GAAe,CAHD;AAAA;AAAA;AAAA;;AAIjBN,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAf;AAAuBG,cAAAA,GAAG,EAAEJ;AAA5B,aAAT;AAJiB;AAAA;;AAAA;AAAA,6CAMVL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CANU;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASlBC,YAAAA,OAAO,CAACC,GAAR;AATkB,6CAUXb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CAVW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAAA;AAAA;AAAA;AAAA;;AAcAd,UAAU,CAACiB,UAAX;AAAA,sFAAwB,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACfe,YAAAA,QADe,GACFhB,GAAG,CAACiB,MADF,CACfD,QADe;AAAA;AAAA;AAAA,mBAGFd,uBAAcgB,QAAd,CAAuBF,QAAvB,CAHE;;AAAA;AAGhBV,YAAAA,KAHgB;;AAAA,iBAIlBA,KAJkB;AAAA;AAAA;AAAA;;AAKrBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEW,cAAAA,GAAG,EAAEb;AAAP,aAAT;AALqB;AAAA;;AAAA;AAAA,8CAOdL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUtBC,YAAAA,OAAO,CAACC,GAAR;AAVsB,8CAWfb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAeAd,UAAU,CAACsB,aAAX;AAAA,sFAA2B,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAELC,uBAAcC,IAAd,CAAmB;AAAEkB,cAAAA,MAAM,EAAE;AAAV,aAAnB,EAAqCjB,IAArC,CAA0C;AAAEkB,cAAAA,KAAK,EAAE;AAAT,aAA1C,CAFK;;AAAA;AAEnBhB,YAAAA,KAFmB;;AAAA,kBAGrBA,KAAK,CAACC,MAAN,GAAe,CAHM;AAAA;AAAA;AAAA;;AAIxBN,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEe,cAAAA,YAAY,EAAEjB,KAAK,CAACC,MAAtB;AAA8BiB,cAAAA,UAAU,EAAElB;AAA1C,aAAT;AAJwB;AAAA;;AAAA;AAAA,8CAMjBL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CANiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASzBC,YAAAA,OAAO,CAACC,GAAR;AATyB,8CAUlBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAVkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAcAd,UAAU,CAAC2B,SAAX;AAAA,sFAAuB,kBAAOzB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACUD,GAAG,CAAC0B,IADd,EACdrB,IADc,aACdA,IADc,EACRiB,KADQ,aACRA,KADQ,EACDD,MADC,aACDA,MADC;AAAA;AAGfM,YAAAA,GAHe,GAGT,IAAIzB,sBAAJ,CAAkB;AAAEG,cAAAA,IAAI,EAAJA,IAAF;AAAQiB,cAAAA,KAAK,EAALA,KAAR;AAAeD,cAAAA,MAAM,EAANA;AAAf,aAAlB,CAHS;AAAA;AAAA,mBAKDM,GAAG,CAACC,IAAJ,EALC;;AAAA;AAKftB,YAAAA,KALe;;AAOrB,gBAAIA,KAAJ,EAAW;AACVL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACA;;AAToB;AAAA;;AAAA;AAAA;AAAA;AAWrBC,YAAAA,OAAO,CAACC,GAAR;AAXqB,8CAYdb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAZc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAAA;AAAA;AAAA;AAAA;;AAgBAd,UAAU,CAAC+B,aAAX;AAAA,sFAA2B,kBAAO7B,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACMD,GAAG,CAAC0B,IADV,EAClBrB,IADkB,cAClBA,IADkB,EACZiB,KADY,cACZA,KADY,EACLD,MADK,cACLA,MADK;AAElBL,YAAAA,QAFkB,GAELhB,GAAG,CAACiB,MAFC,CAElBD,QAFkB;AAAA;AAAA;AAAA,mBAILd,uBAAc4B,iBAAd,CAAgCd,QAAhC,EAA0C;AAAEX,cAAAA,IAAI,EAAJA,IAAF;AAAQiB,cAAAA,KAAK,EAALA,KAAR;AAAeD,cAAAA,MAAM,EAANA;AAAf,aAA1C,CAJK;;AAAA;AAInBf,YAAAA,KAJmB;;AAAA,iBAMrBA,KANqB;AAAA;AAAA;AAAA;;AAOxBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAPwB;AAAA;;AAAA;AAAA,8CASjBX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CATiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYzBC,YAAAA,OAAO,CAACC,GAAR;AAZyB,8CAalBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAbkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAiBAd,UAAU,CAACiC,aAAX;AAAA,sFAA2B,kBAAO/B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBe,YAAAA,QADkB,GACLhB,GAAG,CAACiB,MADC,CAClBD,QADkB;AAAA;AAAA;AAAA,mBAGLd,uBAAc8B,iBAAd,CAAgChB,QAAhC,CAHK;;AAAA;AAGnBV,YAAAA,KAHmB;;AAAA,iBAIrBA,KAJqB;AAAA;AAAA;AAAA;;AAKxBL,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AALwB;AAAA;;AAAA;AAAA,8CAOjBX,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPiB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUzBC,YAAAA,OAAO,CAACC,GAAR;AAVyB,8CAWlBb,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;eAeed,U","sourcesContent":["import StatusEntrega from \"../models/StatusEntrega\";\r\n\r\nconst statusCtrl = {};\r\n\r\nstatusCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await StatusEntrega.find().sort({ name: 1 });\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen estados de entrega\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nstatusCtrl.getOneById = async (req, res) => {\r\n\tconst { statusId } = req.params;\r\n\ttry {\r\n\t\tconst query = await StatusEntrega.findById(statusId);\r\n\t\tif (query) {\r\n\t\t\tres.json({ one: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe estado de entrega\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nstatusCtrl.getAllActivos = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await StatusEntrega.find({ estado: true }).sort({ value: 1 });\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total_active: query.length, all_active: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen estados de entrega activos\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nstatusCtrl.createOne = async (req, res) => {\r\n\tconst { name, value, estado } = req.body;\r\n\ttry {\r\n\t\tconst obj = new StatusEntrega({ name, value, estado });\r\n\r\n\t\tconst query = await obj.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Estado de entrega creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nstatusCtrl.updateOneById = async (req, res) => {\r\n\tconst { name, value, estado } = req.body;\r\n\tconst { statusId } = req.params;\r\n\ttry {\r\n\t\tconst query = await StatusEntrega.findByIdAndUpdate(statusId, { name, value, estado });\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Estado de entrega actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe estado de entrega a actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nstatusCtrl.deleteOneById = async (req, res) => {\r\n\tconst { statusId } = req.params;\r\n\ttry {\r\n\t\tconst query = await StatusEntrega.findByIdAndDelete(statusId);\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Estado de entrega eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe estado de entrega a eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default statusCtrl;\r\n"],"file":"statusEntrega.controller.js"}