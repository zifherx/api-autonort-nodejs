{"version":3,"sources":["../../src/controllers/modelo.controller.js"],"names":["getModelos","req","res","Modelo","find","sort","name","modelos","length","json","status","message","console","log","getModeloById","modeloId","params","findById","getModeloByActivo","createModelo","body","newModelo","save","modeloCreado","updateModelo","findByIdAndUpdate","deleteModelo","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Modelo from \"../models/Modelo\";\r\n\r\nexport const getModelos = async(req, res) => {\r\n    try {\r\n        const modelos = await Modelo.find().sort({ name: 'asc' });\r\n        if (modelos.length > 0) {\r\n            res.json(modelos);\r\n        } else {\r\n            res.status(404).json({ message: 'No existen Modelos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModeloById = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const modelos = await Modelo.findById(modeloId);\r\n        if (modelos) {\r\n            res.json(modelos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Modelo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModeloByActivo = async(req, res) => {\r\n    try {\r\n        const modelos = await Modelo.find({ status: \"Activo\" }).sort({ name: 'asc' });\r\n        if (modelos.length > 0) {\r\n            res.json(modelos);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createModelo = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    try {\r\n        const newModelo = new Modelo({ name, status });\r\n        const modeloCreado = await newModelo.save();\r\n        if (modeloCreado) {\r\n            res.json({ message: 'Modelo creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateModelo = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const updateModelo = await Modelo.findByIdAndUpdate(modeloId, { name, status });\r\n        if (updateModelo) {\r\n            res.json({ message: 'Modelo actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Modelo a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteModelo = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const deleteModelo = await Modelo.findByIdAndDelete(modeloId);\r\n        if (deleteModelo) {\r\n            res.json({ message: 'Modelo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Modelo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"modelo.controller.js"}