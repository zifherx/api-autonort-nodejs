{"version":3,"sources":["../../src/controllers/filtroMaf.controller.js"],"names":["estadoController","getAll","req","res","FiltroMaf","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","estadoId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","obj","save","updateOneById","value","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import FiltroMaf from '../models/FiltroMaf';\r\n\r\nconst estadoController = {};\r\n\r\nestadoController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await FiltroMaf.find().sort({ name: 1 })\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen filtros' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nestadoController.getOneById = async(req, res) => {\r\n    const { estadoId } = req.params\r\n    try {\r\n        const query = await FiltroMaf.findById(estadoId)\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe filtro' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nestadoController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await FiltroMaf.find({ estado: true }).sort({ name: 1 })\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen filtros activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nestadoController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new FiltroMaf({ name, estado });\r\n        const query = await obj.save()\r\n        if (query) {\r\n            res.json({ message: 'Estado de filtro creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nestadoController.updateOneById = async(req, res) => {\r\n    const { name, estado,value } = req.body;\r\n    const { estadoId } = req.params;\r\n    try {\r\n        const query = await FiltroMaf.findByIdAndUpdate(estadoId, { name, estado, value });\r\n        if (query) {\r\n            res.json({ message: 'Estado de filtro actualizado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Estado Maf a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nestadoController.deleteOneById = async(req, res) => {\r\n    const { estadoId } = req.params;\r\n    try {\r\n        const query = await FiltroMaf.findByIdAndDelete(estadoId);\r\n        if (query) {\r\n            res.json({ message: 'Estado de filtro eliminado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Estado Maf a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default estadoController;"],"file":"filtroMaf.controller.js"}