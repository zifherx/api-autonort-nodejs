{"version":3,"sources":["../../src/controllers/customer.controller.js"],"names":["createCustomer","req","res","body","name","typeDocument","document","representanteLegal","documentoRepresentante","cellphone","email","address","empleado","newCustomer","Customer","User","find","username","$in","foundEmployee","map","em","_id","save","customerSaved","json","message","console","log","status","getCustomers","populate","path","select","sort","query","length","getCustomerById","customerId","params","findById","customer","messsage","getCustomerByDni","customerDni","findOne","updateCustomerById","findByIdAndUpdate","updateCustomer","deleteCustomerById","findByIdAndDelete","deletedCustomer"],"mappings":"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","sourcesContent":["import Customer from '../models/Customer'\r\nimport User from '../models/User';\r\n\r\nexport const createCustomer = async(req, res) => {\r\n    const {\r\n        name,\r\n        typeDocument,\r\n        document,\r\n        representanteLegal,\r\n        documentoRepresentante,\r\n        cellphone,\r\n        email,\r\n        address,\r\n        empleado\r\n    } = req.body;\r\n    try {\r\n        const newCustomer = new Customer({\r\n            name,\r\n            typeDocument,\r\n            document,\r\n            representanteLegal,\r\n            documentoRepresentante,\r\n            cellphone,\r\n            email,\r\n            address\r\n        });\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newCustomer.empleado = foundEmployee.map(em => em._id)\r\n        const customerSaved = await newCustomer.save();\r\n        if (customerSaved) {\r\n            res.json({ message: 'Cliente creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCustomers = async(req, res) => {\r\n    try {\r\n        const query = await Customer.find()\r\n            .populate({ path: 'empleado', select: 'name username' })\r\n            .sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Clientes' });\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCustomerById = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    try {\r\n        const customer = await Customer.findById(customerId);\r\n        if (customer) {\r\n            res.json(customer);\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe cliente' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCustomerByDni = async(req, res) => {\r\n    const { customerDni } = req.body;\r\n    try {\r\n        const customer = await Customer.findOne({ document: customerDni });\r\n        if (customer) {\r\n            res.json(customer);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el DNI en el Sistema' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateCustomerById = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    const {\r\n        name,\r\n        typeDocument,\r\n        document,\r\n        representanteLegal,\r\n        documentoRepresentante,\r\n        cellphone,\r\n        email,\r\n        address\r\n    } = req.body;\r\n    try {\r\n        const updateCustomer = await Customer.findByIdAndUpdate(customerId, {\r\n            name,\r\n            typeDocument,\r\n            document,\r\n            representanteLegal,\r\n            documentoRepresentante,\r\n            cellphone,\r\n            email,\r\n            address\r\n        });\r\n        if (updateCustomer) {\r\n            res.json({ message: 'Cliente actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ messsage: 'No existe Cliente a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteCustomerById = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    try {\r\n        const deletedCustomer = await Customer.findByIdAndDelete(customerId);\r\n        if (deletedCustomer) {\r\n            res.json({ message: 'Cliente eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Cliente a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"customer.controller.js"}