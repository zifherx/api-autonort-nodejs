{"version":3,"sources":["../../src/controllers/customer.controller.js"],"names":["createCustomer","req","res","body","name","lastname","document","cellphone","email","address","newCustomer","Customer","save","customerSaved","status","json","console","log","messsage","getCustomers","find","customers","getCustomerById","customerId","params","findById","customer","getCustomerByDni","customerDni","findOne","updateCustomerById","findByIdAndUpdate","new","updateCustomer","deleteCustomerById","findByIdAndDelete","deletedCustomer"],"mappings":"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","sourcesContent":["import Customer from '../models/Customer'\r\n\r\nexport const createCustomer = async(req, res) => {\r\n    try {\r\n        const { name, lastname, document, cellphone, email, address } = req.body;\r\n        const newCustomer = new Customer({ name, lastname, document, cellphone, email, address });\r\n        const customerSaved = await newCustomer.save();\r\n        res.status(201).json(customerSaved);\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const getCustomers = async(req, res) => {\r\n    try {\r\n        const customers = await Customer.find();\r\n        if (customers) {\r\n            res.status(200).json(customers);\r\n        } else {\r\n            res.status(201).json({ messsage: 'No existen clientes a mostrar' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const getCustomerById = async(req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n        const customer = await Customer.findById(customerId);\r\n        if (customer) {\r\n            res.status(200).json(customer);\r\n        } else {\r\n            res.status(201).json({ messsage: 'No existe cliente a mostrar' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const getCustomerByDni = async(req, res) => {\r\n    try {\r\n        const { customerDni } = req.body;\r\n        const customer = await Customer.findOne({ document: customerDni });\r\n        console.log(customer);\r\n        if (customer) {\r\n            console.log(customer);\r\n            res.status(200).json(customer);\r\n        } else {\r\n            res.status(201).json({ messsage: 'No existe cliente a mostrar' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const updateCustomerById = async(req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n        const updateCustomer = await Customer.findByIdAndUpdate(customerId, req.body, { new: true });\r\n        if (updateCustomer) {\r\n            res.status(200).json(updateCustomer);\r\n        } else {\r\n            res.status(201).json({ messsage: 'No existe cliente a actualizar' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const deleteCustomerById = async(req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n        const deletedCustomer = await Customer.findByIdAndDelete(customerId);\r\n        if (deletedCustomer) {\r\n            res.status(200).json({ messsage: 'Cliente Eliminado' });\r\n        } else {\r\n            res.status(401).json({ messsage: 'Cliente no Existe' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}"],"file":"customer.controller.js"}