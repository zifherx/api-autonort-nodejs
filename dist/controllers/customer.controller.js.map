{"version":3,"sources":["../../src/controllers/customer.controller.js"],"names":["createCustomer","req","res","body","name","document","cellphone","email","address","newCustomer","Customer","save","customerSaved","json","message","console","log","status","messsage","getCustomers","find","customers","send","getCustomerById","customerId","params","findById","customer","getCustomerByDni","customerDni","findOne","updateCustomerById","findByIdAndUpdate","new","updateCustomer","deleteCustomerById","findByIdAndDelete","deletedCustomer"],"mappings":"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","sourcesContent":["import Customer from '../models/Customer'\r\n\r\nexport const createCustomer = async(req, res) => {\r\n    try {\r\n        const { name, document, cellphone, email, address } = req.body;\r\n        const newCustomer = new Customer({ name, document, cellphone, email, address });\r\n        const customerSaved = await newCustomer.save();\r\n        res.json({ message: 'Cliente creado con éxito' });\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const getCustomers = async(req, res) => {\r\n    try {\r\n        const customers = await Customer.find();\r\n        res.send(customers)\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const getCustomerById = async(req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n        const customer = await Customer.findById(customerId);\r\n        if (customer) {\r\n            res.status(200).json(customer);\r\n        } else {\r\n            res.status(201).json({ messsage: 'No existe cliente a mostrar' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(409).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const getCustomerByDni = async(req, res) => {\r\n    try {\r\n        const { customerDni } = req.body;\r\n        const customer = await Customer.findOne({ document: customerDni });\r\n        //console.log(customer);\r\n        if (customer) {\r\n            //console.log(customer);\r\n            res.send(customer);\r\n        } else {\r\n            return res.status(201).json({ message: 'No existe el DNI en el Sistema' })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(403).json({ message: 'No Autorizado' });\r\n    }\r\n}\r\n\r\nexport const updateCustomerById = async(req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n        const updateCustomer = await Customer.findByIdAndUpdate(customerId, req.body, { new: true });\r\n        if (updateCustomer) {\r\n            res.json({ message: 'Cliente actualizado con éxito' });\r\n        } else {\r\n            res.status(201).json({ messsage: 'No existe cliente a actualizar' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(409).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}\r\n\r\nexport const deleteCustomerById = async(req, res) => {\r\n    try {\r\n        const { customerId } = req.params;\r\n        const deletedCustomer = await Customer.findByIdAndDelete(customerId);\r\n        if (deletedCustomer) {\r\n            res.json({ message: 'Cliente eliminado con éxito' });\r\n        } else {\r\n            res.status(401).json({ messsage: 'Cliente no Existe' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(409).json({ messsage: 'No se puede ejecutar la consulta' });\r\n    }\r\n}"],"file":"customer.controller.js"}