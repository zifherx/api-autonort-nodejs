{"version":3,"sources":["../../src/controllers/customer.controller.js"],"names":["createCustomer","req","res","body","name","document","cellphone","email","address","empleado","newCustomer","Customer","User","find","username","$in","foundEmployee","map","em","_id","save","customerSaved","json","message","console","log","status","getCustomers","sort","customers","length","getCustomerById","customerId","params","findById","customer","messsage","getCustomerByDni","customerDni","findOne","updateCustomerById","findByIdAndUpdate","updateCustomer","deleteCustomerById","findByIdAndDelete","deletedCustomer"],"mappings":"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","sourcesContent":["import Customer from '../models/Customer'\r\nimport User from '../models/User';\r\n\r\nexport const createCustomer = async(req, res) => {\r\n    const { name, document, cellphone, email, address, empleado } = req.body;\r\n    try {\r\n        const newCustomer = new Customer({ name, document, cellphone, email, address });\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newCustomer.empleado = foundEmployee.map(em => em._id)\r\n        const customerSaved = await newCustomer.save();\r\n        if (customerSaved) {\r\n            res.json({ message: 'Cliente creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCustomers = async(req, res) => {\r\n    try {\r\n        const customers = await Customer.find().sort({ name: 'asc' });\r\n        if (customers.length > 0) {\r\n            res.json(customers);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Clientes' });\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCustomerById = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    try {\r\n        const customer = await Customer.findById(customerId);\r\n        if (customer) {\r\n            res.json(customer);\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe cliente' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getCustomerByDni = async(req, res) => {\r\n    const { customerDni } = req.body;\r\n    try {\r\n        const customer = await Customer.findOne({ document: customerDni });\r\n        if (customer) {\r\n            res.json(customer);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el DNI en el Sistema' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateCustomerById = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    const { name, document, cellphone, email, address } = req.body;\r\n    try {\r\n        const updateCustomer = await Customer.findByIdAndUpdate(customerId, { name, document, cellphone, email, address });\r\n        if (updateCustomer) {\r\n            res.json({ message: 'Cliente actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ messsage: 'No existe Cliente a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteCustomerById = async(req, res) => {\r\n    const { customerId } = req.params;\r\n    try {\r\n        const deletedCustomer = await Customer.findByIdAndDelete(customerId);\r\n        if (deletedCustomer) {\r\n            res.json({ message: 'Cliente eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe Cliente a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"customer.controller.js"}