{"version":3,"sources":["../../src/controllers/meta.controller.js"],"names":["metaCtrl","getAll","req","res","Meta","find","sort","name","query","length","json","status","message","console","log","getOneById","metaId","params","findById","getOneByStatus","fecha","metas","error","er","createOne","body","sucursal","area","tipo","mes","valor","createdBy","obj","User","username","$in","employeeFound","map","a","_id","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndRemove"],"mappings":"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","sourcesContent":["import Meta from '../models/Meta';\r\nimport User from '../models/User';\r\n\r\nconst metaCtrl = {};\r\n\r\nmetaCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Meta.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen metas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.getOneById = async(req, res) => {\r\n    const { metaId } = req.params;\r\n    try {\r\n        const query = await Meta.findById(metaId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe meta' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.getOneByStatus = async(req, res) => {\r\n    try {\r\n        const query = await Meta.find({ status: true })\r\n            .sort({ fecha: 'desc' });\r\n\r\n        if (query) {\r\n            res.json({ metas: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Metas Activas' })\r\n        }\r\n    } catch (err) {\r\n        console.error(er);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.createOne = async(req, res) => {\r\n    const { name, sucursal, area, tipo, fecha, mes, valor, status, createdBy } = req.body;\r\n    try {\r\n        const obj = new Meta({\r\n            name,\r\n            sucursal,\r\n            area,\r\n            tipo,\r\n            fecha,\r\n            mes,\r\n            valor,\r\n            status\r\n        });\r\n\r\n        const employeeFound = await User.find({ username: { $in: createdBy } });\r\n        obj.createdBy = employeeFound.map(a => a._id);\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta creada con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.updateOneById = async(req, res) => {\r\n    const { metaId } = req.params;\r\n    const { name, sucursal, area, tipo, fecha, mes, valor, status } = req.body;\r\n\r\n    try {\r\n        const query = await Meta.findByIdAndUpdate(metaId, {\r\n            name,\r\n            sucursal,\r\n            area,\r\n            tipo,\r\n            fecha,\r\n            mes,\r\n            valor,\r\n            status\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Meta a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.error(er);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.deleteOneById = async(req, res) => {\r\n    const { metaId } = req.params;\r\n\r\n    try {\r\n        const query = await Meta.findByIdAndRemove(metaId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Meta a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.error(er);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default metaCtrl;"],"file":"meta.controller.js"}