{"version":3,"sources":["../../src/controllers/meta.controller.js"],"names":["metaCtrl","getAll","req","res","Meta","find","sort","name","populate","path","select","query","length","json","total","all","status","message","console","log","getAllActivos","estado","total_active","all_active","getOneById","metaId","params","findById","one","createOne","body","sucursal","area","tipo","fecha","mes","valor","createdBy","obj","Sucursal","findOne","sucursalFound","_id","Area","areaFound","User","username","employeeFound","save","updateOneById","findByIdAndUpdate","map","a","error","er","deleteOneById","findByIdAndRemove"],"mappings":"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","sourcesContent":["import Meta from '../models/Meta';\r\nimport User from '../models/User';\r\nimport Sucursal from '../models/Sucursal';\r\nimport Area from '../models/Area';\r\n\r\nconst metaCtrl = {};\r\n\r\nmetaCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Meta.find().sort({ name: 1 })\r\n        .populate({\r\n            path: 'sucursal',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'area',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen metas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await Meta.find({estado: true}).sort({ name: 'asc' })\r\n        .populate({\r\n            path: 'sucursal',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'area',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen metas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.getOneById = async(req, res) => {\r\n    const { metaId } = req.params;\r\n    try {\r\n        const query = await Meta.findById(metaId)\r\n        .populate({\r\n            path: 'sucursal',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'area',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe meta' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.createOne = async(req, res) => {\r\n    const { name,sucursal, area, tipo, fecha, mes, valor, estado, createdBy } = req.body;\r\n    try {\r\n        const obj = new Meta({\r\n            name,\r\n            tipo,\r\n            fecha,\r\n            mes,\r\n            valor,\r\n            estado\r\n        });\r\n\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursal });\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursal} no encontrado`});\r\n        obj.sucursal = sucursalFound._id;\r\n\r\n        const areaFound = await Area.findOne({ name: area });\r\n        if(!areaFound) return res.status(404).json({message: `Area ${area} no encontrado`});\r\n        obj.area = areaFound._id;\r\n\r\n        const employeeFound = await User.findOne({ username: createdBy });\r\n        if(!employeeFound) return res.status(404).json({message: `Usuario ${createdBy} no encontrado`});\r\n        obj.createdBy = employeeFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta creada con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.updateOneById = async(req, res) => {\r\n    const { metaId } = req.params;\r\n    const { name, sucursal, area, tipo, fecha, mes, valor, estado } = req.body;\r\n    // console.log(req.body);\r\n\r\n    try {\r\n\r\n        const sucursalFound = await Sucursal.find({ name: sucursal });\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursal} no encontrado`});\r\n        \r\n        const areaFound = await Area.findOne({ name: area });\r\n        if(!areaFound) return res.status(404).json({message: `Area ${area} no encontrado`});\r\n        \r\n        const query = await Meta.findByIdAndUpdate(metaId, {\r\n            name,\r\n            sucursal: sucursalFound.map(a => a._id),\r\n            area: areaFound._id,\r\n            tipo,\r\n            fecha,\r\n            mes,\r\n            valor,\r\n            estado\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Meta a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.error(er);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.deleteOneById = async(req, res) => {\r\n    const { metaId } = req.params;\r\n\r\n    try {\r\n        const query = await Meta.findByIdAndRemove(metaId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Meta a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.error(er);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default metaCtrl;"],"file":"meta.controller.js"}