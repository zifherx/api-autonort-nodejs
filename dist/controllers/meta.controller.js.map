{"version":3,"sources":["../../src/controllers/meta.controller.js"],"names":["metaCtrl","getAll","req","res","Meta","find","sort","name","query","length","json","status","message","console","log","createOne","body","sucursal","area","tipo","fecha","mes","valor","createdBy","obj","User","username","$in","employeeFound","map","a","_id","save"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,QAAQ,GAAG,EAAjB;;AAEAA,QAAQ,CAACC,MAAT;AAAA,qFAAkB,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEUC,cAAKC,IAAL,GAAYC,IAAZ,CAAiB;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAAjB,CAFV;;AAAA;AAEJC,YAAAA,KAFI;;AAAA,kBAGNA,KAAK,CAACC,MAAN,GAAe,CAHT;AAAA;AAAA;AAAA;;AAINN,YAAAA,GAAG,CAACO,IAAJ,CAASF,KAAT;AAJM;AAAA;;AAAA;AAAA,6CAMCL,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CAND;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASVC,YAAAA,OAAO,CAACC,GAAR;AATU,6CAUHX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CAVG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA;;AAcAZ,QAAQ,CAACe,SAAT;AAAA,sFAAqB,kBAAMb,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACoDD,GAAG,CAACc,IADxD,EACTT,IADS,aACTA,IADS,EACHU,QADG,aACHA,QADG,EACOC,IADP,aACOA,IADP,EACaC,IADb,aACaA,IADb,EACmBC,KADnB,aACmBA,KADnB,EAC0BC,GAD1B,aAC0BA,GAD1B,EAC+BC,KAD/B,aAC+BA,KAD/B,EACsCC,SADtC,aACsCA,SADtC;AAAA;AAGPC,YAAAA,GAHO,GAGD,IAAIpB,aAAJ,CAAS;AAAEG,cAAAA,IAAI,EAAJA,IAAF;AAAQU,cAAAA,QAAQ,EAARA,QAAR;AAAkBC,cAAAA,IAAI,EAAJA,IAAlB;AAAwBC,cAAAA,IAAI,EAAJA,IAAxB;AAA8BC,cAAAA,KAAK,EAALA,KAA9B;AAAqCC,cAAAA,GAAG,EAAHA,GAArC;AAA0CC,cAAAA,KAAK,EAALA;AAA1C,aAAT,CAHC;AAAA;AAAA,mBAKeG,cAAKpB,IAAL,CAAU;AAAEqB,cAAAA,QAAQ,EAAE;AAAEC,gBAAAA,GAAG,EAAEJ;AAAP;AAAZ,aAAV,CALf;;AAAA;AAKPK,YAAAA,aALO;AAMbJ,YAAAA,GAAG,CAACD,SAAJ,GAAgBK,aAAa,CAACC,GAAd,CAAkB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,GAAN;AAAA,aAAnB,CAAhB;AANa;AAAA,mBAQOP,GAAG,CAACQ,IAAJ,EARP;;AAAA;AAQPxB,YAAAA,KARO;;AAUb,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AAZY;AAAA;;AAAA;AAAA;AAAA;AAcbC,YAAAA,OAAO,CAACC,GAAR;AAda,8CAeNX,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAfM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAAA;AAAA;AAAA;AAAA;;eAmBeZ,Q","sourcesContent":["import Meta from '../models/Meta';\r\nimport User from '../models/User';\r\n\r\nconst metaCtrl = {};\r\n\r\nmetaCtrl.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Meta.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen metas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmetaCtrl.createOne = async(req, res) => {\r\n    const { name, sucursal, area, tipo, fecha, mes, valor, createdBy } = req.body;\r\n    try {\r\n        const obj = new Meta({ name, sucursal, area, tipo, fecha, mes, valor });\r\n\r\n        const employeeFound = await User.find({ username: { $in: createdBy } });\r\n        obj.createdBy = employeeFound.map(a => a._id);\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Meta creada con Ã©xito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport default metaCtrl;"],"file":"meta.controller.js"}