{"version":3,"sources":["../../src/controllers/portada.controller.js"],"names":["portadaCtrl","getAll","req","res","Portada","find","query","length","json","total","all","status","message","console","log","getAllActivos","estado","select","total_active","all_active","getOneById","portadaId","params","findById","one","createOne","body","name","avatar","file","obj","undefined","nombreAvatar","originalname","location","save","updateOneById","findByIdAndUpdate","deleteOneByID","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Portada from \"../models/Portada\";\r\n\r\nconst portadaCtrl = {};\r\n\r\nportadaCtrl.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Portada.find();\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Portadas\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nportadaCtrl.getAllActivos = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Portada.find({ estado: true })\r\n        .select('name avatar estado');\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total_active: query.length, all_active: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Portadas\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n}\r\n\r\nportadaCtrl.getOneById = async (req, res) => {\r\n\tconst { portadaId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Portada.findById(portadaId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ one: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe portada\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nportadaCtrl.createOne = async (req, res) => {\r\n\tconst { name,estado } = req.body;\r\n\tconst avatar = req.file;\r\n\r\n\ttry {\r\n\t\tlet obj = null;\r\n\r\n\t\tif (avatar == null || avatar == undefined) {\r\n\t\t\tobj = new Portada({\r\n                name,\r\n\t\t\t\testado,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tobj = new Portada({\r\n                name,\r\n                nombreAvatar: avatar.originalname,\r\n\t\t\t\tavatar: avatar.location,\r\n\t\t\t\testado,\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst query = await obj.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Portada creada con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nportadaCtrl.updateOneById = async (req, res) => {\r\n\tconst { estado } = req.body;\r\n\tconst { portadaId } = req.params;\r\n\tconst avatar = req.file;\r\n\r\n\ttry {\r\n\r\n        let query = null;\r\n\r\n        if(avatar == null || avatar == undefined){\r\n            query = await Portada.findByIdAndUpdate(portadaId, {\r\n                estado\r\n            });\r\n        }else{\r\n            query = await Portada.findByIdAndUpdate(portadaId, {\r\n                nombreAvatar: avatar.originalname,\r\n                avatar: avatar.location,\r\n                estado\r\n            });\r\n        }\r\n        \r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Portada actualizada con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encontró portada\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nportadaCtrl.deleteOneByID = async (req, res) => {\r\n\tconst { portadaId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Portada.findByIdAndDelete(portadaId);\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Portada eliminada con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No se encontró portada\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default portadaCtrl;\r\n"],"file":"portada.controller.js"}