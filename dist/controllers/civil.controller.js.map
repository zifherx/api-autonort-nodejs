{"version":3,"sources":["../../src/controllers/civil.controller.js"],"names":["civilController","getAll","req","res","EstadoCivil","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","civilId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import EstadoCivil from \"../models/EstadoCivil\";\r\n\r\nconst civilController = {};\r\n\r\ncivilController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await EstadoCivil.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados civiles'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ncivilController.getOneById = async(req, res) => {\r\n    const { civilId } = req.params;\r\n    try {\r\n        const query = await EstadoCivil.findById(civilId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado civil'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ncivilController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await EstadoCivil.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados civiles activos'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\ncivilController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new EstadoCivil({ name, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Estado civil creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ncivilController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { civilId } = req.params;\r\n    try {\r\n        const query = await EstadoCivil.findByIdAndUpdate(civilId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Estado civil actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado civil a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\ncivilController.deleteOneById = async(req, res) => {\r\n    const { civilId } = req.params;\r\n    try {\r\n        const query = await EstadoCivil.findByIdAndDelete(civilId);\r\n        if (query) {\r\n            res.json({ message: 'Estado civil eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado civil a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default civilController;"],"file":"civil.controller.js"}