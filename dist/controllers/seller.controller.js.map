{"version":3,"sources":["../../src/controllers/seller.controller.js"],"names":["getSellers","req","res","Seller","find","sort","name","seller","length","json","status","message","console","log","getSellerById","sellerId","params","findById","getSellerBySucursal","sucursal","body","estatus","query","getSellerByName","findOne","where","createSeller","document","telefono","email","empleado","newSeller","User","username","$in","foundEmployee","map","em","_id","save","sellerSaved","updateSellerById","findByIdAndUpdate","updateSeller","deleteSellerById","findByIdAndDelete","deletedSeller"],"mappings":"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","sourcesContent":["import Seller from '../models/Seller'\r\nimport User from '../models/User'\r\n\r\nexport const getSellers = async(req, res) => {\r\n    try {\r\n        const seller = await Seller.find().sort({ name: 'asc' });\r\n        if (seller.length > 0) {\r\n            res.json(seller);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vendedores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const seller = await Seller.findById(sellerId);\r\n        if (seller) {\r\n            res.json(seller);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const getSellerBySucursal = async(req, res) => {\r\n    const { sucursal } = req.body;\r\n    try {\r\n        const query = await Seller.find({ sucursal: sucursal, estatus: true }).sort({ name: 'asc' });\r\n\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vendedores en esta Sucursal' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(404).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSellerByName = async(req, res) => {\r\n    const { name } = req.body;\r\n    try {\r\n        const query = await Seller.findOne().where({ name });\r\n\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vendedores con este Nombre' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(404).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createSeller = async(req, res) => {\r\n    const { name, sucursal, document, telefono, email, estatus, empleado } = req.body;\r\n    try {\r\n        const newSeller = new Seller({\r\n            name,\r\n            sucursal,\r\n            document,\r\n            telefono,\r\n            email,\r\n            estatus\r\n        });\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newSeller.empleado = foundEmployee.map(em => em._id);\r\n        const sellerSaved = await newSeller.save();\r\n        if (sellerSaved) {\r\n            res.json({ message: 'Vendedor creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    const { name, sucursal, document, telefono, email, estatus, empleado } = req.body;\r\n    try {\r\n        const updateSeller = await Seller.findByIdAndUpdate(sellerId, {\r\n            name,\r\n            sucursal,\r\n            document,\r\n            telefono,\r\n            email,\r\n            estatus\r\n        });\r\n        if (updateSeller) {\r\n            res.json({ message: 'Vendedor actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const deletedSeller = await Seller.findByIdAndDelete(sellerId);\r\n        if (deletedSeller) {\r\n            res.json({ message: 'Vendedor eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"seller.controller.js"}