{"version":3,"sources":["../../src/controllers/seller.controller.js"],"names":["createSeller","req","res","body","name","sucursal","document","empleado","newSeller","Seller","User","find","username","$in","foundEmployee","map","em","_id","save","sellerSaved","json","message","console","log","status","getSellerById","sellerId","params","findById","seller","getSellers","sort","length","updateSellerById","findByIdAndUpdate","updateSeller","deleteSellerById","findByIdAndDelete","deletedSeller"],"mappings":"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","sourcesContent":["import Seller from '../models/Seller'\r\nimport User from '../models/User'\r\n\r\nexport const createSeller = async(req, res) => {\r\n    const { name, sucursal, document, empleado } = req.body;\r\n    try {\r\n        const newSeller = new Seller({ name, sucursal, document });\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newSeller.empleado = foundEmployee.map(em => em._id);\r\n        const sellerSaved = await newSeller.save();\r\n        if (sellerSaved) {\r\n            res.json({ message: 'Vendedor creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const getSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const seller = await Seller.findById(sellerId);\r\n        if (seller) {\r\n            res.json(seller);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const getSellers = async(req, res) => {\r\n    try {\r\n        const seller = await Seller.find().sort({ name: 'asc' });\r\n        if (seller.length > 0) {\r\n            res.json(seller);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vendedores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    const { name, sucursal, document } = req.body;\r\n    try {\r\n\r\n        const updateSeller = await Seller.findByIdAndUpdate(sellerId, { name, sucursal, document });\r\n        if (updateSeller) {\r\n            res.json({ message: 'Vendedor actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const deletedSeller = await Seller.findByIdAndDelete(sellerId);\r\n        if (deletedSeller) {\r\n            res.json({ message: 'Vendedor eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"seller.controller.js"}