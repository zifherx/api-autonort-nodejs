{"version":3,"sources":["../../src/controllers/seller.controller.js"],"names":["getSellers","req","res","Seller","find","sort","name","query","length","json","status","message","console","log","getSellerById","sellerId","params","findById","getSellerBySucursal","sucursal","body","estatus","getSellerByMarcaAndSucursal","marca","error","getSellerByName","findOne","createSeller","document","telefono","email","empleado","newSeller","User","username","$in","foundEmployee","createdBy","map","em","_id","save","sellerSaved","uploadAvatar","photo","file","findByIdAndUpdate","avatar","location","updateSellerById","updateSeller","deleteSellerById","findByIdAndDelete","deletedSeller"],"mappings":"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","sourcesContent":["import Seller from '../models/Seller'\r\nimport User from '../models/User'\r\n\r\nexport const getSellers = async(req, res) => {\r\n    try {\r\n        const query = await Seller.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vendedores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const query = await Seller.findById(sellerId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const getSellerBySucursal = async(req, res) => {\r\n    const { sucursal } = req.body;\r\n    try {\r\n        const query = await Seller.find({ sucursal: sucursal, estatus: true }).sort({ name: 'asc' });\r\n\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: `No existen Vendedores en ${sucursal}` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSellerByMarcaAndSucursal = async(req, res) => {\r\n    const { sucursal, marca } = req.body;\r\n    try {\r\n        const query = await Seller.find({ sucursal: sucursal, marca: marca, estatus: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: `No existen vendedores en ${sucursal}` });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getSellerByName = async(req, res) => {\r\n    const { name } = req.body;\r\n    try {\r\n        const query = await Seller.findOne({ name: name });\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vendedores con este Nombre' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createSeller = async(req, res) => {\r\n    const { name, sucursal, marca, document, telefono, email, estatus, empleado } = req.body;\r\n    try {\r\n        const newSeller = new Seller({\r\n            name,\r\n            sucursal,\r\n            marca,\r\n            document,\r\n            telefono,\r\n            email,\r\n            estatus\r\n        });\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        newSeller.createdBy = foundEmployee.map(em => em._id);\r\n\r\n        const sellerSaved = await newSeller.save();\r\n        if (sellerSaved) {\r\n            res.json({ message: 'Vendedor creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const uploadAvatar = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    const photo = req.file;\r\n\r\n    try {\r\n        const query = await User.findByIdAndUpdate(sellerId, {\r\n            avatar: photo.location\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Avatar subido con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el vendedor' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    const { name, sucursal, marca, document, telefono, email, estatus, empleado } = req.body;\r\n    try {\r\n        const updateSeller = await Seller.findByIdAndUpdate(sellerId, {\r\n            name,\r\n            sucursal,\r\n            marca,\r\n            document,\r\n            telefono,\r\n            email,\r\n            estatus\r\n        });\r\n        if (updateSeller) {\r\n            res.json({ message: 'Vendedor actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSellerById = async(req, res) => {\r\n    const { sellerId } = req.params;\r\n    try {\r\n        const deletedSeller = await Seller.findByIdAndDelete(sellerId);\r\n        if (deletedSeller) {\r\n            res.json({ message: 'Vendedor eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vendedor a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"seller.controller.js"}