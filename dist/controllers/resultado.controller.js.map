{"version":3,"sources":["../../src/controllers/resultado.controller.js"],"names":["resultadoCtrl","getAll","req","res","Resultado","find","sort","fecha","populate","path","select","query","length","json","total","all","status","message","console","log","getOneById","itemId","params","findById","poppulat","one","createOne","body","cod_interno","tipoProducto","tipoProductoE","anio","mes","anioE","mesE","sucursal","sucursalE","meta","valor","createdBy","newObj","TipoProducto","findOne","name","productoFound","_id","Anio","anioFound","Mes","mesFound","undefined","Sucursal","sucursalFound","User","username","userFound","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete","getAllByProductSedeYear","productoE","yearE","$regex"],"mappings":"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","sourcesContent":["import Resultado from \"../models/Resultado\";\r\nimport TipoProducto from \"../models/TipoProducto\";\r\nimport Anio from \"../models/Anio\";\r\nimport Mes from \"../models/Mes\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport User from \"../models/User\";\r\n\r\nconst resultadoCtrl = {};\r\n\r\nresultadoCtrl.getAll = async (req, res) => {\r\n     try {\r\n          const query = await Resultado.find()\r\n               .sort({ fecha: -1 })\r\n               .populate({\r\n                    path: \"tipoProductoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"mesE\",\r\n                    select: \"name numero abreviatura\",\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen resultados\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nresultadoCtrl.getOneById = async (req, res) => {\r\n     const { itemId } = req.params;\r\n\r\n     try {\r\n          const query = await Resultado.findById(itemId)\r\n               .populate({\r\n                    path: \"tipoProductoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"mesE\",\r\n                    select: \"name numero abreviatura\",\r\n               })\r\n               .poppulat({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query) {\r\n               res.json({ one: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen el resultado\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nresultadoCtrl.createOne = async (req, res) => {\r\n     const { cod_interno, tipoProducto, tipoProductoE, fecha, anio, mes, anioE, mesE, sucursal, sucursalE, meta, valor, createdBy } = req.body;\r\n\r\n     try {\r\n          const newObj = new Resultado({\r\n               cod_interno,\r\n               tipoProducto,\r\n               fecha,\r\n               anio,\r\n               mes,\r\n               sucursal,\r\n               meta,\r\n               valor,\r\n          });\r\n\r\n          const productoFound = await TipoProducto.findOne({ name: tipoProductoE });\r\n          if (!productoFound) return res.status(404).json({ message: `Tipo Producto ${tipoProductoE} no encontrado` });\r\n          newObj.tipoProductoE = productoFound._id;\r\n\r\n          const anioFound = await Anio.findOne({ name: anioE });\r\n          if (!anioFound) return res.status(404).json({ message: `Año ${anioE} no encontrado` });\r\n          newObj.anioE = anioFound._id;\r\n\r\n          const mesFound = await Mes.findOne({ name: mesE });\r\n          if (!mesFound) return res.status(404).json({ message: `Mes ${mesE} no encontrado` });\r\n          newObj.mesE = mesFound._id;\r\n\r\n          if(sucursalE == null || sucursalE == undefined){\r\n               newObj.sucursalE == null;\r\n          }else{\r\n               const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n               if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrado` });\r\n               newObj.sucursalE = sucursalFound._id;\r\n          }\r\n\r\n          const userFound = await User.findOne({ username: createdBy });\r\n          if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n          newObj.createdBy = userFound._id;\r\n\r\n          const query = await newObj.save();\r\n\r\n          if (query) {\r\n               res.json({ message: `Resultado ${cod_interno} creado con éxito` });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nresultadoCtrl.updateOneById = async (req, res) => {\r\n     const { tipoProducto, tipoProductoE, anio, mes, anioE, mesE, sucursal, sucursalE, meta, valor } = req.body;\r\n     const { itemId } = req.params;\r\n\r\n     try {\r\n          const productoFound = await TipoProducto.findOne({ name: tipoProductoE });\r\n          if (!productoFound) return res.status(404).json({ message: `Tipo Producto ${tipoProductoE} no encontrado` });\r\n\r\n          const anioFound = await Anio.findOne({ name: anioE });\r\n          if (!anioFound) return res.status(404).json({ message: `Año ${anioE} no encontrado` });\r\n\r\n          const mesFound = await Mes.findOne({ name: mesE });\r\n          if (!mesFound) return res.status(404).json({ message: `Mes ${mesE} no encontrado` });\r\n\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrado` });\r\n\r\n          const query = await Resultado.findByIdAndUpdate(itemId, {\r\n               tipoProducto,\r\n               tipoProductoE: productoFound._id,\r\n               anio,\r\n               mes,\r\n               anioE: anioFound._id,\r\n               mesE: mesFound._id,\r\n               sucursal,\r\n               sucursalE: sucursalFound._id,\r\n               meta,\r\n               valor,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Resultado actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe el resultado a actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nresultadoCtrl.deleteOneById = async (req, res) => {\r\n    const { itemId } = req.params;\r\n\r\n    try {\r\n         const query = await Resultado.findByIdAndDelete(itemId);\r\n\r\n         if (query) {\r\n              res.json({ message: \"Resultado eliminado con éxito\" });\r\n         } else {\r\n              return res.status(404).json({ message: \"No existe el resultado a eliminar\" });\r\n         }\r\n    } catch (err) {\r\n         console.log(err);\r\n         return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nresultadoCtrl.getAllByProductSedeYear = async (req, res ) => {\r\n     const { sucursalE, productoE, yearE} = req.body;\r\n\r\n     try {\r\n\r\n          const productoFound = await TipoProducto.findOne({name: productoE});\r\n          if(!productoFound) return res.status(404).json({message: `Producto ${productoE} no encontrado`});\r\n\r\n          const query = await Resultado.find({\r\n               sucursal: { $regex: '.*' + sucursalE + '.*'},\r\n               tipoProductoE: productoFound._id,\r\n               anio: yearE\r\n          })\r\n          .select('cod_interno sucursalE tipoProductoE anioE mesE meta valor')\r\n          .sort({fecha: 1})\r\n          .populate({\r\n               path: 'sucursalE',\r\n               select: 'name'\r\n          })\r\n          .populate({\r\n               path: 'tipoProductoE',\r\n               select: 'name'\r\n          })\r\n          .populate({\r\n               path: 'anioE',\r\n               select: 'name'\r\n          })\r\n          .populate({\r\n               path: 'mesE',\r\n               select: 'name'\r\n          });\r\n\r\n          if(query.length > 0){\r\n               res.json({total: query.length, all: query});\r\n          }else{\r\n               return res.status(404).json({message: `No se cargaron resultados de ${productoE} en el ${yearE}`});\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({message: err.message});\r\n     }\r\n}\r\n\r\nexport default resultadoCtrl;\r\n"],"file":"resultado.controller.js"}