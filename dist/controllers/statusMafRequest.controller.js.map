{"version":3,"sources":["../../src/controllers/statusMafRequest.controller.js"],"names":["getAll","req","res","StatusMafRequest","find","sort","name","objeto","length","json","status","message","console","log","error","getStatusMafRequestById","statusMafRequestId","params","findById","getStatusMafRequestByActivo","createStatusMafRequest","body","nuevo","save","updateStatusMafRequest","findByIdAndUpdate","deleteStatusMafRequest","findByIdAndDelete"],"mappings":"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","sourcesContent":["import StatusMafRequest from '../models/StatusMafRequest'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const objeto = await StatusMafRequest.find().sort({ name: 'asc' })\r\n        if (objeto.length > 0) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados MAF' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const getStatusMafRequestById = async(req, res) => {\r\n    const { statusMafRequestId } = req.params\r\n    try {\r\n        const objeto = await StatusMafRequest.findById(statusMafRequestId)\r\n        if (objeto) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado MAF' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const getStatusMafRequestByActivo = async(req, res) => {\r\n    try {\r\n        const objeto = await StatusMafRequest.find({ status: true }).sort({ name: 'asc' })\r\n        if (objeto.length > 0) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados Maf Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const createStatusMafRequest = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    try {\r\n        const nuevo = new StatusMafRequest({ name, status })\r\n        const objeto = await nuevo.save()\r\n        if (objeto) {\r\n            res.json({ message: 'Estado Maf creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const updateStatusMafRequest = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const { statusMafRequestId } = req.params;\r\n    try {\r\n        const objeto = await StatusMafRequest.findByIdAndUpdate(statusMafRequestId, { name, status })\r\n        if (objeto) {\r\n            res.json({ message: 'Estado Maf actualizado con éxito' })\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Estado Maf a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const deleteStatusMafRequest = async(req, res) => {\r\n    const { statusMafRequestId } = req.params;\r\n    try {\r\n        const objeto = await StatusMafRequest.findByIdAndDelete(statusMafRequestId)\r\n        if (objeto) {\r\n            res.json({ message: 'Estado Maf eliminado con éxito' })\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Estado Maf a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}"],"file":"statusMafRequest.controller.js"}