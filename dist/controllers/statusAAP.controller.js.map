{"version":3,"sources":["../../src/controllers/statusAAP.controller.js"],"names":["getAll","req","res","StatusAAP","find","sort","value","query","length","json","status","message","console","log","getStatusAAPById","statusAAPId","params","findById","getStatusAAPByActivo","createStatusAAP","body","name","nuevo","save","updateStatusAAP","findByIdAndUpdate","deleteStatusAAP","findByIdAndDelete"],"mappings":"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","sourcesContent":["import StatusAAP from '../models/StatusAAP'\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await StatusAAP.find().sort({ value: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Estados' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getStatusAAPById = async(req, res) => {\r\n    const { statusAAPId } = req.params\r\n    try {\r\n        const query = await StatusAAP.findById(statusAAPId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Estado' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getStatusAAPByActivo = async(req, res) => {\r\n    try {\r\n        const query = await StatusAAP.find({ status: true }).sort({ value: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Estados activos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createStatusAAP = async(req, res) => {\r\n    const { name, value, status } = req.body;\r\n    try {\r\n        const nuevo = new StatusAAP({ name, value, status });\r\n        const query = await nuevo.save()\r\n        if (query) {\r\n            res.json({ message: 'Estado creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateStatusAAP = async(req, res) => {\r\n    const { name, value, status } = req.body;\r\n    const { statusAAPId } = req.params;\r\n    try {\r\n        const query = await StatusAAP.findByIdAndUpdate(statusAAPId, { name, value, status });\r\n        if (query) {\r\n            res.json({ message: 'Estado actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Estado a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteStatusAAP = async(req, res) => {\r\n    const { statusAAPId } = req.params;\r\n    try {\r\n        const query = await StatusAAP.findByIdAndDelete(statusAAPId);\r\n        if (query) {\r\n            res.json({ message: 'Estado eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Estado a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"statusAAP.controller.js"}