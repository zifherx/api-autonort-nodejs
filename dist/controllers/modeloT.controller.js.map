{"version":3,"sources":["../../src/controllers/modeloT.controller.js"],"names":["modeloController","getAll","req","res","ModeloTasaciones","find","sort","name","populate","path","select","query","length","json","total","all","status","message","console","log","getModeloById","modeloId","params","findById","one","getModeloActivos","estado","total_active","all_active","getModelosByMarca","marca","body","MarcaTasaciones","findOne","marcaFound","_id","getModelosByName","total_model","all_model","createModelo","avatar","file","obj","undefined","location","save","updateModeloById","findByIdAndUpdate","deleteModeloById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import MarcaTasaciones from \"../models/MarcaTasaciones\";\r\nimport ModeloTasaciones from \"../models/ModeloTasaciones\";\r\n\r\nconst modeloController = {};\r\n\r\nmodeloController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await ModeloTasaciones.find()\r\n            .sort({ name: 'asc' })\r\n            .populate({ path: 'marca', select: 'name avatar' })\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmodeloController.getModeloById = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const query = await ModeloTasaciones.findById(modeloId)\r\n            .populate({ path: 'marca', select: 'name avatar' })\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Modelo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmodeloController.getModeloActivos = async(req, res) => {\r\n    try {\r\n        const query = await ModeloTasaciones.find({ estado: true })\r\n            .sort({ name: 'asc' })\r\n            .populate({ path: 'marca', select: 'name avatar' });\r\n        if (query.length > 0) {\r\n            res.json({ total_active: query.length, all_active: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmodeloController.getModelosByMarca = async(req, res) => {\r\n    const { marca } = req.body;\r\n    try {\r\n        const marcaFound = await MarcaTasaciones.findOne({ name: marca });\r\n        if (!marcaFound) return res.status(404).json({ message: `La marca ${marca} no existe` });\r\n\r\n        const query = await ModeloTasaciones.find({ marca: marcaFound._id })\r\n        .sort({ name: 1 })\r\n        .populate({ path: 'marca', select: 'name avatar' });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: `La marca ${marca} no tiene modelos creados` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmodeloController.getModelosByName = async(req, res) => {\r\n    const { name } = req.body;\r\n    try {\r\n        const query = await ModeloTasaciones.findOne({ name: name })\r\n        .sort({ name: 'asc' })\r\n        .populate({ path: 'marca', select: 'name avatar' });\r\n\r\n        if (query) {\r\n            res.json({ total_model: query.length, all_model: query });\r\n        } else {\r\n            return res.status(404).json({ message: `El modelo ${name} no existe` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmodeloController.createModelo = async(req, res) => {\r\n    const { marca, name, estado } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let obj = null;\r\n        if (avatar == undefined || avatar == null) {\r\n            obj = new ModeloTasaciones({\r\n                name,\r\n                estado\r\n            });\r\n        } else {\r\n            obj = new ModeloTasaciones({\r\n                avatar: avatar.location,\r\n                name,\r\n                estado\r\n            });\r\n\r\n        }\r\n\r\n        const marcaFound = await MarcaTasaciones.findOne({ name: marca });\r\n        if (!marcaFound) return res.status(404).json({ message: `No existe la Marca ${marca}` })\r\n        obj.marca = marcaFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Modelo creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmodeloController.updateModeloById = async(req, res) => {\r\n    const { marca, name, estado } = req.body;\r\n    const { modeloId } = req.params;\r\n    const avatar = req.file;\r\n    try {\r\n        const marcaFound = await MarcaTasaciones.findOne({ name: marca });\r\n\r\n        let query = null;\r\n        if (avatar == undefined || avatar == null) {\r\n            query = await ModeloTasaciones.findByIdAndUpdate(modeloId, {\r\n                marca: marcaFound._id,\r\n                name,\r\n                estado\r\n            });\r\n        } else {\r\n            query = await ModeloTasaciones.findByIdAndUpdate(modeloId, {\r\n                marca: marcaFound._id,\r\n                avatar: avatar.location,\r\n                name,\r\n                estado\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: 'Modelo actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Modelo a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmodeloController.deleteModeloById = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const query = await ModeloTasaciones.findByIdAndDelete(modeloId);\r\n        if (query) {\r\n            res.json({ message: 'Modelo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Modelo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default modeloController;"],"file":"modeloT.controller.js"}