{"version":3,"sources":["../../src/controllers/modeloT.controller.js"],"names":["getAll","req","res","ModeloTasaciones","find","sort","name","populate","path","select","query","length","json","status","message","console","log","getModeloById","modeloId","params","findById","getModeloActivos","count","models","getModelosByMarca","marca","body","MarcaTasaciones","findOne","marcaFound","_id","getModelosByName","createModelo","avatar","file","obj","undefined","location","save","updateModeloById","findByIdAndUpdate","deleteModeloById","findByIdAndDelete","countAll","countDocuments"],"mappings":"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","sourcesContent":["import MarcaTasaciones from \"../models/MarcaTasaciones\";\r\nimport ModeloTasaciones from \"../models/ModeloTasaciones\";\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await ModeloTasaciones.find()\r\n            .sort({ name: 'asc' })\r\n            .populate({ path: 'marca', select: 'name' })\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getModeloById = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const query = await ModeloTasaciones.findById(modeloId)\r\n            .populate({ path: 'marca', select: 'name' })\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe la Modelo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getModeloActivos = async(req, res) => {\r\n    try {\r\n        const query = await ModeloTasaciones.find({ status: true })\r\n            .sort({ name: 'asc' })\r\n            .populate({ path: 'marca', select: 'name' });\r\n        if (query.length > 0) {\r\n            res.json({ count: query.length, models: query });\r\n        } else {\r\n            res.status(404).json({ message: 'No existen Modelos activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModelosByMarca = async(req, res) => {\r\n    const { marca } = req.body;\r\n    try {\r\n        const marcaFound = await MarcaTasaciones.findOne({ name: marca });\r\n        if (!marcaFound) return res.status(404).json({ message: `La marca ${marca} no existe` });\r\n\r\n        const query = await ModeloTasaciones.find({ marca: marcaFound._id }).sort({ name: 'asc' });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ count: query.length, models: query });\r\n        } else {\r\n            return res.status(404).json({ message: `La marca ${marca} no tiene modelos creados` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getModelosByName = async(req, res) => {\r\n    const { name } = req.body;\r\n    try {\r\n        const query = await ModeloTasaciones.findOne({ name: name }).sort({ name: 'asc' });\r\n\r\n        if (query) {\r\n            res.json({ count: query.length, models: query });\r\n        } else {\r\n            return res.status(404).json({ message: `El modelo ${name} no existe` })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const createModelo = async(req, res) => {\r\n    const { marca, name, status } = req.body;\r\n    const avatar = req.file;\r\n    try {\r\n        let obj = null;\r\n        if (avatar == undefined || avatar == null) {\r\n            obj = new ModeloTasaciones({\r\n                name,\r\n                status\r\n            });\r\n        } else {\r\n            obj = new ModeloTasaciones({\r\n                avatar: avatar.location,\r\n                name,\r\n                status\r\n            });\r\n\r\n        }\r\n\r\n        const marcaFound = await MarcaTasaciones.findOne({ name: marca });\r\n        if (!marcaFound) return res.status(404).json({ message: `No existe la Marca ${marca}` })\r\n        obj.marca = marcaFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Modelo creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const updateModeloById = async(req, res) => {\r\n    const { marca, name, status } = req.body;\r\n    const { modeloId } = req.params;\r\n    const avatar = req.file;\r\n    try {\r\n        const marcaFound = await MarcaTasaciones.findOne({ name: marca });\r\n        let query = null;\r\n        if (avatar == undefined || avatar == null) {\r\n            query = await ModeloTasaciones.findByIdAndUpdate(modeloId, {\r\n                marca: marcaFound._id,\r\n                name,\r\n                status\r\n            });\r\n        } else {\r\n            query = await ModeloTasaciones.findByIdAndUpdate(modeloId, {\r\n                marca: marcaFound._id,\r\n                avatar: avatar.location,\r\n                name,\r\n                status\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: 'Modelo actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Modelo a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteModeloById = async(req, res) => {\r\n    const { modeloId } = req.params;\r\n    try {\r\n        const query = await ModeloTasaciones.findByIdAndDelete(modeloId);\r\n        if (query) {\r\n            res.json({ message: 'Modelo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Modelo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const countAll = async(req, res) => {\r\n    try {\r\n        const query = await ModeloTasaciones.countDocuments();\r\n        if (query >= 0) {\r\n            res.json({ count: query });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"modeloT.controller.js"}