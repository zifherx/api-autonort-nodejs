{"version":3,"sources":["../../src/controllers/planMaf.controller.js"],"names":["planController","getAll","req","res","PlanMAF","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","planId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import PlanMAF from \"../models/PlanMAF\";\r\n\r\nconst planController = {};\r\n\r\nplanController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await PlanMAF.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen planes MAF'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.getOneById = async(req, res) => {\r\n    const { planId } = req.params;\r\n    try {\r\n        const query = await PlanMAF.findById(planId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe plan MAF'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await PlanMAF.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen planes MAF activos'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nplanController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new PlanMAF({ name, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Plan MAF creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { planId } = req.params;\r\n    try {\r\n        const query = await PlanMAF.findByIdAndUpdate(planId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Plan MAF actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe plan MAF a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.deleteOneById = async(req, res) => {\r\n    const { planId } = req.params;\r\n    try {\r\n        const query = await PlanMAF.findByIdAndDelete(planId);\r\n        if (query) {\r\n            res.json({ message: 'Plan MAF eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe plan MAF a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default planController;"],"file":"planMaf.controller.js"}