{"version":3,"file":"planMaf.controller.js","names":["planController","getAll","req","res","PlanMAF","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","planId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"sources":["../../src/controllers/planMaf.controller.js"],"sourcesContent":["import PlanMAF from \"../models/PlanMAF\";\r\n\r\nconst planController = {};\r\n\r\nplanController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await PlanMAF.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen planes MAF'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.getOneById = async(req, res) => {\r\n    const { planId } = req.params;\r\n    try {\r\n        const query = await PlanMAF.findById(planId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe plan MAF'})\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await PlanMAF.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen planes MAF activos'});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nplanController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const obj = new PlanMAF({ name, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Plan MAF creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { planId } = req.params;\r\n    try {\r\n        const query = await PlanMAF.findByIdAndUpdate(planId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Plan MAF actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe plan MAF a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nplanController.deleteOneById = async(req, res) => {\r\n    const { planId } = req.params;\r\n    try {\r\n        const query = await PlanMAF.findByIdAndDelete(planId);\r\n        if (query) {\r\n            res.json({ message: 'Plan MAF eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe plan MAF a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default planController;"],"mappings":"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"}