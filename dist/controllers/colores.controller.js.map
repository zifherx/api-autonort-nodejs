{"version":3,"sources":["../../src/controllers/colores.controller.js"],"names":["getColors","req","res","Colores","find","sort","name","colores","length","send","status","json","message","console","log","getColorByActivo","estado","getColorById","colorId","params","findById","color","createColor","body","newColor","save","colorCreado","updateColor","findByIdAndUpdate","deleteColor","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Colores from \"../models/Colores\";\r\n\r\nexport const getColors = async(req, res) => {\r\n    try {\r\n        const colores = await Colores.find().sort({ name: 'asc' });\r\n        if (colores.length > 0) {\r\n            res.send(colores);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Colores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getColorByActivo = async(req, res) => {\r\n    try {\r\n        const colores = await Colores.find({ estado: true }).sort({ name: 'asc' });\r\n        if (colores.length > 0) {\r\n            res.json(colores);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen colores Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getColorById = async(req, res) => {\r\n    const { colorId } = req.params;\r\n    try {\r\n        const color = await Colores.findById(colorId);\r\n        if (color) {\r\n            res.send(color);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Color' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createColor = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const newColor = new Colores({ name, estado });\r\n        const colorCreado = await newColor.save();\r\n        if (colorCreado) {\r\n            res.json({ message: 'Color creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateColor = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { colorId } = req.params;\r\n    try {\r\n        const updateColor = await Colores.findByIdAndUpdate(colorId, { name, estado });\r\n        if (updateColor) {\r\n            res.json({ message: 'Color actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Color' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteColor = async(req, res) => {\r\n    const { colorId } = req.params;\r\n    try {\r\n        const deleteColor = await Colores.findByIdAndDelete(colorId);\r\n        if (deleteColor) {\r\n            res.json({ message: 'Color eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Color' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"colores.controller.js"}