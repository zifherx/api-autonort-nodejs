{"version":3,"sources":["../../src/controllers/colores.controller.js"],"names":["getColors","req","res","Colores","find","sort","name","query","length","send","total","all","status","json","message","console","log","getColorByActivo","estado","total_active","all_active","getColorById","colorId","params","findById","one","createColor","body","newColor","save","updateColor","findByIdAndUpdate","deleteColor","findByIdAndDelete"],"mappings":";;;;;;;;;;;;;AAAA;;AAEO,IAAMA,SAAS;AAAA,qFAAG,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEGC,iBAAQC,IAAR,GAAeC,IAAf,CAAoB;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAApB,CAFH;;AAAA;AAEXC,YAAAA,KAFW;;AAAA,kBAGbA,KAAK,CAACC,MAAN,GAAe,CAHF;AAAA;AAAA;AAAA;;AAIbN,YAAAA,GAAG,CAACO,IAAJ,CAAS;AAACC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAd;AAAsBG,cAAAA,GAAG,EAAEJ;AAA3B,aAAT;AAJa;AAAA;;AAAA;AAAA,6CAMNL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CANM;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASjBC,YAAAA,OAAO,CAACC,GAAR;AATiB,6CAUVd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CAVU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATd,SAAS;AAAA;AAAA;AAAA,GAAf;;;;AAcA,IAAMiB,gBAAgB;AAAA,sFAAG,kBAAMhB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEJC,iBAAQC,IAAR,CAAa;AAAEc,cAAAA,MAAM,EAAE;AAAV,aAAb,EAA+Bb,IAA/B,CAAoC;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAApC,CAFI;;AAAA;AAElBC,YAAAA,KAFkB;;AAAA,kBAGpBA,KAAK,CAACC,MAAN,GAAe,CAHK;AAAA;AAAA;AAAA;;AAIpBN,YAAAA,GAAG,CAACW,IAAJ,CAAS;AAACM,cAAAA,YAAY,EAAEZ,KAAK,CAACC,MAArB;AAA6BY,cAAAA,UAAU,EAAEb;AAAzC,aAAT;AAJoB;AAAA;;AAAA;AAAA,8CAMbL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CANa;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASxBC,YAAAA,OAAO,CAACC,GAAR;AATwB,8CAUjBd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAViB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBG,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;;;AAcA,IAAMI,YAAY;AAAA,sFAAG,kBAAMpB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBoB,YAAAA,OADgB,GACJrB,GAAG,CAACsB,MADA,CAChBD,OADgB;AAAA;AAAA;AAAA,mBAGAnB,iBAAQqB,QAAR,CAAiBF,OAAjB,CAHA;;AAAA;AAGdf,YAAAA,KAHc;;AAAA,iBAIhBA,KAJgB;AAAA;AAAA;AAAA;;AAKhBL,YAAAA,GAAG,CAACW,IAAJ,CAAS;AAACY,cAAAA,GAAG,EAAElB;AAAN,aAAT;AALgB;AAAA;;AAAA;AAAA,8CAOTL,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUpBC,YAAAA,OAAO,CAACC,GAAR;AAVoB,8CAWbd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZO,YAAY;AAAA;AAAA;AAAA,GAAlB;;;;AAeA,IAAMK,WAAW;AAAA,sFAAG,kBAAMzB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACED,GAAG,CAAC0B,IADN,EACfrB,IADe,aACfA,IADe,EACTY,MADS,aACTA,MADS;AAAA;AAGbU,YAAAA,QAHa,GAGF,IAAIzB,gBAAJ,CAAY;AAAEG,cAAAA,IAAI,EAAJA,IAAF;AAAQY,cAAAA,MAAM,EAANA;AAAR,aAAZ,CAHE;AAAA;AAAA,mBAICU,QAAQ,CAACC,IAAT,EAJD;;AAAA;AAIbtB,YAAAA,KAJa;;AAKnB,gBAAIA,KAAJ,EAAW;AACPL,cAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEC,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AAPkB;AAAA;;AAAA;AAAA;AAAA;AASnBC,YAAAA,OAAO,CAACC,GAAR;AATmB,8CAUZd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAVY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXY,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAcA,IAAMI,WAAW;AAAA,sFAAG,kBAAM7B,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACED,GAAG,CAAC0B,IADN,EACfrB,IADe,cACfA,IADe,EACTY,MADS,cACTA,MADS;AAEfI,YAAAA,OAFe,GAEHrB,GAAG,CAACsB,MAFD,CAEfD,OAFe;AAAA;AAAA;AAAA,mBAICnB,iBAAQ4B,iBAAR,CAA0BT,OAA1B,EAAmC;AAAEhB,cAAAA,IAAI,EAAJA,IAAF;AAAQY,cAAAA,MAAM,EAANA;AAAR,aAAnC,CAJD;;AAAA;AAIbX,YAAAA,KAJa;;AAAA,iBAKfA,KALe;AAAA;AAAA;AAAA;;AAMfL,YAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAT;AANe;AAAA;;AAAA;AAAA,8CAQRZ,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CARQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAWnBC,YAAAA,OAAO,CAACC,GAAR;AAXmB,8CAYZd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAZY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXgB,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAgBA,IAAME,WAAW;AAAA,sFAAG,kBAAM/B,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACfoB,YAAAA,OADe,GACHrB,GAAG,CAACsB,MADD,CACfD,OADe;AAAA;AAAA;AAAA,mBAGCnB,iBAAQ8B,iBAAR,CAA0BX,OAA1B,CAHD;;AAAA;AAGbf,YAAAA,KAHa;;AAAA,iBAIfA,KAJe;AAAA;AAAA;AAAA;;AAKfL,YAAAA,GAAG,CAACW,IAAJ,CAAS;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAAT;AALe;AAAA;;AAAA;AAAA,8CAORZ,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUnBC,YAAAA,OAAO,CAACC,GAAR;AAVmB,8CAWZd,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXkB,WAAW;AAAA;AAAA;AAAA,GAAjB","sourcesContent":["import Colores from \"../models/Colores\";\r\n\r\nexport const getColors = async(req, res) => {\r\n    try {\r\n        const query = await Colores.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.send({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Colores' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getColorByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Colores.find({ estado: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen colores Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getColorById = async(req, res) => {\r\n    const { colorId } = req.params;\r\n    try {\r\n        const query = await Colores.findById(colorId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Color' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createColor = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const newColor = new Colores({ name, estado });\r\n        const query = await newColor.save();\r\n        if (query) {\r\n            res.json({ message: 'Color creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateColor = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { colorId } = req.params;\r\n    try {\r\n        const query = await Colores.findByIdAndUpdate(colorId, { name, estado });\r\n        if (query) {\r\n            res.json({ message: 'Color actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Color' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteColor = async(req, res) => {\r\n    const { colorId } = req.params;\r\n    try {\r\n        const query = await Colores.findByIdAndDelete(colorId);\r\n        if (query) {\r\n            res.json({ message: 'Color eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Color' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"colores.controller.js"}