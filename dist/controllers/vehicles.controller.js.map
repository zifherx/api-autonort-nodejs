{"version":3,"sources":["../../src/controllers/vehicles.controller.js"],"names":["vehicleController","getAll","req","res","Vehicle","find","sort","cod_tdp","populate","path","select","query","length","json","total","all","status","message","console","log","getVehicleById","vehicleId","params","findById","vehicle","one","getVehicleByCodigo","body","findOne","getVehiculeByMarca","marca","match","name","obj","filter","b","model","getVehiculeByModelo","modelo","estado","$in","a","createVehicle","chasis","version","empleado","User","username","foundEmployee","_id","Chasis","foundChasis","ModeloTasaciones","foundModel","save","updateVehicleById","findByIdAndUpdate","updatedVehicle","deleteVehicleById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Vehicle from \"../models/Vehicle\";\r\nimport User from \"../models/User\";\r\nimport ModeloTasaciones from \"../models/ModeloTasaciones\";\r\nimport Chasis from \"../models/Chasis\";\r\n\r\nconst vehicleController = {};\r\n\r\nvehicleController.getAll = async (req, res) => {\r\n\ttry {\r\n\t\tconst query = await Vehicle.find()\r\n\t\t\t.sort({ cod_tdp: 1 })\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"chasis\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"model\",\r\n\t\t\t\tselect: \"name avatar marca\",\r\n\t\t\t\tpopulate: { path: \"marca\", select: \"avatar name\" },\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"empleado\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t});\r\n\r\n\t\tif (query.length > 0) {\r\n\t\t\tres.json({ total: query.length, all: query });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen vehículos\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.getVehicleById = async (req, res) => {\r\n\tconst { vehicleId } = req.params;\r\n\ttry {\r\n\t\tconst vehicle = await Vehicle.findById(vehicleId)\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"chasis\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"model\",\r\n\t\t\t\tselect: \"name avatar marca\",\r\n\t\t\t\tpopulate: { path: \"marca\", select: \"avatar name\" },\r\n\t\t\t})\r\n\t\t\t.populate({\r\n\t\t\t\tpath: \"empleado\",\r\n\t\t\t\tselect: \"name\",\r\n\t\t\t});\r\n\r\n\t\tif (vehicle) {\r\n\t\t\tres.json({one: vehicle});\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe el Vehículo\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.getVehicleByCodigo = async (req, res) => {\r\n\tconst { cod_tdp } = req.body;\r\n\ttry {\r\n\t\tconst query = await Vehicle.findOne({ cod_tdp })\r\n        .populate({\r\n            path: \"chasis\",\r\n            select: \"name\",\r\n        })\r\n        .populate({\r\n            path: \"model\",\r\n            select: \"name avatar marca\",\r\n            populate: { path: \"marca\", select: \"avatar name\" },\r\n        })\r\n        .populate({\r\n            path: \"empleado\",\r\n            select: \"name\",\r\n        });\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({one: query});\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe vehículo a mostrar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.getVehiculeByMarca = async (req, res) => {\r\n\tconst { marca } = req.body;\r\n\ttry {\r\n\t\tconst query = await Vehicle.find()\r\n        .populate({\r\n            path: \"chasis\",\r\n            select: \"name\",\r\n        })\r\n        .populate({\r\n            path: \"model\",\r\n            select: \"name avatar marca\",\r\n            populate: { \r\n\t\t\t\tpath: \"marca\",\r\n\t\t\t\tselect: \"avatar name\",\r\n\t\t\t\tmatch: { name: marca}\r\n\t\t\t},\r\n        })\r\n        .populate({\r\n            path: \"empleado\",\r\n            select: \"name\",\r\n        });\r\n\r\n\t\tlet obj = query.filter((b) => b.model.marca);\r\n\t\tif (obj.length > 0) {\r\n\t\t\tres.json({ total: obj.length, all: obj });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Modelos en esa Marca\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.getVehiculeByModelo = async (req, res) => {\r\n\tconst { modelo } = req.body;\r\n\ttry {\r\n\t\tconst query = await Vehicle.find({estado: true})\r\n\t\t.select('cod_tdp model version')\r\n\t\t.sort({cod_tdp: 1})\r\n\t\t.populate({\r\n\t\t\tpath: \"model\",\r\n\t\t\tmatch: { name: { $in: modelo } },\r\n\t\t\tselect: \"avatar name marca\",\r\n\t\t\tpopulate: {\r\n\t\t\t\tpath: 'marca',\r\n\t\t\t\tselect: 'name avatar'\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tlet obj = query.filter((a) => a.model);\r\n\t\tif (obj.length > 0) {\r\n\t\t\tres.json({ total: obj.length, all: obj });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existen Vehículos en ese Modelo\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.createVehicle = async (req, res) => {\r\n\tconst { chasis, model, cod_tdp, version, empleado } = req.body;\r\n\r\n\ttry {\r\n\t\tconst obj = new Vehicle({\r\n\t\t\tcod_tdp,\r\n\t\t\tversion,\r\n\t\t});\r\n\r\n\t\tconst foundEmployee = await User.findOne({ username: empleado });\r\n\t\tif (!foundEmployee) return res.status(404).json({ message: `Empleado ${empleado} no encontrado` });\r\n\t\tobj.empleado = foundEmployee._id;\r\n\r\n\t\tconst foundChasis = await Chasis.findOne({ name: chasis });\r\n\t\tif (!foundChasis) return res.status(404).json({ message: `Chasis ${chasis} no encontrado` });\r\n\t\tobj.chasis = foundChasis._id;\r\n\r\n\t\tconst foundModel = await ModeloTasaciones.findOne({ name: model });\r\n\t\tif (!foundModel) return res.status(404).json({ message: `Modelo ${model} no encontrado` });\r\n\t\tobj.model = foundModel._id;\r\n\r\n\t\tconst query = await obj.save();\r\n\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Vehículo creado con éxito\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.updateVehicleById = async (req, res) => {\r\n\tconst { vehicleId } = req.params;\r\n\tconst { chasis, model, cod_tdp, version, estado } = req.body;\r\n\r\n\ttry {\r\n\t\tconst foundChasis = await Chasis.findOne({ name: chasis });\r\n\t\tif (!foundChasis) return res.status(404).json({ message: `Chasis ${chasis} no encontrado` });\r\n\r\n\t\tconst foundModel = await ModeloTasaciones.findOne({ name: model });\r\n\t\tif (!foundModel) return res.status(404).json({ message: `Modelo ${model} no encontrado` });\r\n\r\n\t\tconst updatedVehicle = await Vehicle.findByIdAndUpdate(vehicleId, {\r\n\t\t\tchasis: foundChasis._id,\r\n\t\t\tcod_tdp,\r\n\t\t\tmodel: foundModel._id,\r\n\t\t\tversion,\r\n\t\t\testado\r\n\t\t});\r\n\r\n\t\tif (updatedVehicle) {\r\n\t\t\tres.json({ message: \"Vehículo actualizado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Vehículo a actualizar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nvehicleController.deleteVehicleById = async (req, res) => {\r\n\tconst { vehicleId } = req.params;\r\n\ttry {\r\n\t\tconst query = await Vehicle.findByIdAndDelete(vehicleId);\r\n\t\tif (query) {\r\n\t\t\tres.json({ message: \"Vehículo eliminado con éxito\" });\r\n\t\t} else {\r\n\t\t\treturn res.status(404).json({ message: \"No existe Vehículo a eliminar\" });\r\n\t\t}\r\n\t} catch (err) {\r\n\t\tconsole.log(err);\r\n\t\treturn res.status(503).json({ message: err.message });\r\n\t}\r\n};\r\n\r\nexport default vehicleController;\r\n"],"file":"vehicles.controller.js"}