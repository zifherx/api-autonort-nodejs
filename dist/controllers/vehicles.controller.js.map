{"version":3,"sources":["../../src/controllers/vehicles.controller.js"],"names":["createVehicle","req","res","body","chasis","model","cod_tdp","version","sucursal","empleado","obj","Vehicle","User","find","username","$in","foundEmployee","map","a","_id","Chasis","name","foundChasis","b","ModeloTasaciones","foundModel","c","save","query","json","message","console","log","status","getAll","sort","populate","path","select","length","total","vehicles","getVehicleById","vehicleId","params","findById","vehicle","getVehicleByCodigo","codigoAuto","findOne","getVehiculeByMarca","marca","match","filter","getVehiculeByModelo","modelo","updateVehicleById","findByIdAndUpdate","updatedVehicle","deleteVehicleById","findByIdAndDelete","deletedVehicle"],"mappings":"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","sourcesContent":["import Vehicle from '../models/Vehicle'\r\nimport User from '../models/User'\r\nimport ModeloTasaciones from '../models/ModeloTasaciones'\r\nimport Chasis from '../models/Chasis'\r\n\r\nexport const createVehicle = async(req, res) => {\r\n    const {\r\n        chasis,\r\n        model,\r\n        cod_tdp,\r\n        version,\r\n        sucursal,\r\n        empleado\r\n    } = req.body;\r\n\r\n    try {\r\n        const obj = new Vehicle({\r\n            cod_tdp,\r\n            version,\r\n            sucursal\r\n        });\r\n\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        obj.empleado = foundEmployee.map(a => a._id);\r\n\r\n        const foundChasis = await Chasis.find({ name: { $in: chasis } });\r\n        obj.chasis = foundChasis.map(b => b._id);\r\n\r\n        const foundModel = await ModeloTasaciones.find({ name: { $in: model } });\r\n        obj.model = foundModel.map(c => c._id);\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Vehículo creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const getAll = async(req, res) => {\r\n    try {\r\n        const query = await Vehicle.find()\r\n            .sort({ cod_tdp: 'asc' })\r\n            .populate({\r\n                path: 'chasis',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'model',\r\n                select: 'name avatar marca',\r\n                populate: { path: 'marca', select: 'avatar name' }\r\n            })\r\n            .populate({\r\n                path: 'empleado',\r\n                select: 'name roles',\r\n                populate: { path: 'roles', select: 'name' }\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, vehicles: query });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen vehículos' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getVehicleById = async(req, res) => {\r\n    const { vehicleId } = req.params;\r\n    try {\r\n        const vehicle = await Vehicle.findById(vehicleId)\r\n            .populate({\r\n                path: 'chasis',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'model',\r\n                select: 'name avatar marca',\r\n                populate: { path: 'marca', select: 'avatar name' }\r\n            })\r\n            .populate({\r\n                path: 'empleado',\r\n                select: 'name roles',\r\n                populate: { path: 'roles', select: 'name' }\r\n            });\r\n        if (vehicle) {\r\n            res.json(vehicle);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Vehículo' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getVehicleByCodigo = async(req, res) => {\r\n    const { codigoAuto } = req.body;\r\n    try {\r\n        const query = await Vehicle.findOne({ cod_tdp: codigoAuto })\r\n            .populate({\r\n                path: 'chasis',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'model',\r\n                select: 'name avatar marca',\r\n                populate: { path: 'marca', select: 'avatar name' }\r\n            })\r\n            .populate({\r\n                path: 'empleado',\r\n                select: 'name roles',\r\n                populate: { path: 'roles', select: 'name' }\r\n            });\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe vehículo a mostrar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getVehiculeByMarca = async(req, res) => {\r\n    const { marca } = req.body;\r\n    try {\r\n        const query = await Vehicle.find()\r\n            .populate({\r\n                path: 'chasis',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'model',\r\n                select: 'name avatar marca',\r\n                populate: {\r\n                    path: 'marca',\r\n                    select: 'name avatar',\r\n                    match: { name: marca }\r\n                }\r\n            })\r\n            .populate({\r\n                path: 'empleado',\r\n                select: 'name roles',\r\n                populate: { path: 'roles', select: 'name' }\r\n            });\r\n        let obj = query.filter(b => b.model.marca);\r\n        if (obj.length > 0) {\r\n            res.json({ total: obj.length, vehicles: obj });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Modelos en esa Marca' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getVehiculeByModelo = async(req, res) => {\r\n    const { modelo } = req.body;\r\n    try {\r\n        const query = await Vehicle.find()\r\n            .populate({\r\n                path: 'model',\r\n                match: { name: { $in: modelo } },\r\n                select: 'avatar name marca'\r\n            });\r\n\r\n        let obj = query.filter(a => a.model)\r\n        if (obj.length > 0) {\r\n            res.json({ total: obj.length, vehicles: obj });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Vehículos en ese Modelo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateVehicleById = async(req, res) => {\r\n    const { vehicleId } = req.params;\r\n    const { chasis, model, cod_tdp, version } = req.body;\r\n\r\n    try {\r\n        const foundChasis = await Chasis.findOne({ name: { $in: chasis } });\r\n        if (!foundChasis) return res.status(404).json({ message: 'No existe el chasis' });\r\n        const foundModel = await ModeloTasaciones.findOne({ name: { $in: model } });\r\n        if (!foundModel) return res.status(404).json({ message: 'No existe el modelo' });\r\n        const updatedVehicle = await Vehicle.findByIdAndUpdate(vehicleId, {\r\n            chasis: foundChasis._id,\r\n            cod_tdp,\r\n            model: foundModel._id,\r\n            version\r\n        });\r\n        if (updatedVehicle) {\r\n            res.json({ message: 'Vehículo actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vehículo a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteVehicleById = async(req, res) => {\r\n    const { vehicleId } = req.params;\r\n    try {\r\n        const deletedVehicle = await Vehicle.findByIdAndDelete(vehicleId);\r\n        if (deletedVehicle) {\r\n            res.json({ message: 'Vehículo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Vehículo a eliminar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"vehicles.controller.js"}