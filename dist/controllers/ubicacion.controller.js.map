{"version":3,"sources":["../../src/controllers/ubicacion.controller.js"],"names":["getUbicaciones","req","res","Ubicacion","find","sort","name","query","length","json","status","message","console","log","getUbicacionById","ubicacionId","params","findById","getUbicacionByActivo","createUbicacion","body","objeto","save","updateUbicacion","findByIdAndUpdate","deleteUbicacion","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Ubicacion from \"../models/Ubicacion\";\r\n\r\nexport const getUbicaciones = async(req, res) => {\r\n    try {\r\n        const query = await Ubicacion.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Ubicaciones' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getUbicacionById = async(req, res) => {\r\n    const { ubicacionId } = req.params;\r\n    try {\r\n        const query = await Ubicacion.findById(ubicacionId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Ubicación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getUbicacionByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Ubicacion.find({ status: \"Activo\" }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No hay Ubicaciones Activas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createUbicacion = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    try {\r\n        const objeto = new Ubicacion({ name, status });\r\n        const query = await objeto.save();\r\n        if (query) {\r\n            res.json({ message: 'Ubicación creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateUbicacion = async(req, res) => {\r\n    const { name, status } = req.body;\r\n    const { ubicacionId } = req.params;\r\n    try {\r\n        const query = await Ubicacion.findByIdAndUpdate(ubicacionId, { name, status });\r\n        if (query) {\r\n            res.json({ message: 'Ubicación actualizada con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Ubicación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteUbicacion = async(req, res) => {\r\n    const { ubicacionId } = req.params;\r\n    try {\r\n        const query = await Ubicacion.findByIdAndDelete(ubicacionId);\r\n        if (query) {\r\n            res.json({ message: 'Ubicación eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Ubicación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"ubicacion.controller.js"}