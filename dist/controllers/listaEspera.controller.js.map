{"version":3,"sources":["../../src/controllers/listaEspera.controller.js"],"names":["listaEsperaController","getAll","req","res","ListaEspera","find","sort","mes_primer_abono","populate","path","select","query","length","json","total","all","status","message","console","log","getOneById","itemId","params","findById","one","createOne","body","cod_interno","sucursal","sucursalE","vehiculo","colorE","cantidad","orden","cliente","anio_primer_abono","grupo_abonos","precio_venta_final","tipo_venta","financiera","plan_maf","fecha_carta_aprobacion","inicial","solicitudMAF","cuenta_epdp","avance_pago_contado","avance_pago_credito","cumple_politica","createdBy","obj","Sucursal","findOne","name","sucursalFound","_id","Vehicle","cod_tdp","vehiculoFound","Colores","$in","colorFound","map","a","Customer","customerFound","Anio","anioFound","Mes","mesFound","Financiamiento","tipoVentaFound","undefined","Banco","financieraFound","PlanMAF","planMAFFound","Maf","solicitudMAFFound","User","username","userFound","save","updateOneById","itemNullF","itemNullPM","findByIdAndUpdate","deleteOneById","findByIdAndDelete","getCountByEstado","estadoE","EstadoListaEspera","estadoFound","countDocuments","getCountClientByVehicle","vehicleFound","clientsFound"],"mappings":"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","sourcesContent":["import ListaEspera from \"../models/ListaEspera\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport Colores from \"../models/Colores\";\r\nimport Customer from \"../models/Customer\";\r\nimport Anio from \"../models/Anio\";\r\nimport Mes from \"../models/Mes\";\r\nimport Financiamiento from \"../models/Financiamiento\";\r\nimport Banco from \"../models/Banco\";\r\nimport PlanMAF from \"../models/PlanMAF\";\r\nimport Maf from \"../models/Maf\";\r\nimport User from \"../models/User\";\r\nimport EstadoListaEspera from \"../models/EstadoListaEspera\";\r\n\r\nconst listaEsperaController = {};\r\n\r\nlistaEsperaController.getAll = async (req, res) => {\r\n    try {\r\n        const query = await ListaEspera.find()\r\n            .sort({ mes_primer_abono: -1 })\r\n            .populate({\r\n                path: \"sucursalE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"vehiculo\",\r\n                select: \"chasis model cod_tdp version\",\r\n                populate: [\r\n                    {\r\n                        path: \"chasis\",\r\n                        select: \"name\",\r\n                    },\r\n                    {\r\n                        path: \"model\",\r\n                        select: \"name avatar marca\",\r\n                        populate: {\r\n                            path: \"marca\",\r\n                            select: \"name avatar\",\r\n                        },\r\n                    },\r\n                ],\r\n            })\r\n            .populate({\r\n                path: \"colorE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document cellphone email\",\r\n            })\r\n            .populate({\r\n                path: \"anio_primer_abono\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"mes_primer_abono\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"tipo_venta\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"financiera\",\r\n                select: \"name avatar\",\r\n            })\r\n            .populate({\r\n                path: \"plan_maf\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"solicitudMAF\",\r\n                select: \"nro_solicitud fecha_ingreso sucursalE customer cuota_inicial seller car estadoSolicitudMAF fecha_aprobacion carta_evidencia\",\r\n                populate: [\r\n                    {\r\n                        path: \"sucursalE\",\r\n                        select: \"name\",\r\n                    },\r\n                    {\r\n                        path: \"customer\",\r\n                        select: \"name document cellphone email\",\r\n                    },\r\n                    {\r\n                        path: \"seller\",\r\n                        select: \"name document sucursalE marcaE\",\r\n                        populate: [\r\n                            {\r\n                                path: \"sucursalE\",\r\n                                select: \"name\",\r\n                            },\r\n                            {\r\n                                path: \"marcaE\",\r\n                                select: \"name avatar\",\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: \"car\",\r\n                        select: \"chasis model cod_tdp version\",\r\n                        populate: [\r\n                            {\r\n                                path: \"chasis\",\r\n                                select: \"name\",\r\n                            },\r\n                            {\r\n                                path: \"model\",\r\n                                select: \"name avatar marca\",\r\n                                populate: {\r\n                                    path: \"marca\",\r\n                                    select: \"name avatar\",\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: \"estadoSolicitudMAF\",\r\n                        select: \"name\",\r\n                    },\r\n                ],\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            })\r\n            .populate({\r\n                path: \"updatedBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, all: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen clientes en espera\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nlistaEsperaController.getOneById = async (req, res) => {\r\n    const { itemId } = req.params;\r\n\r\n    try {\r\n        const query = await ListaEspera.findById(itemId)\r\n            .populate({\r\n                path: \"sucursalE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"vehiculo\",\r\n                select: \"chasis model cod_tdp version\",\r\n                populate: [\r\n                    {\r\n                        path: \"chasis\",\r\n                        select: \"name\",\r\n                    },\r\n                    {\r\n                        path: \"model\",\r\n                        select: \"name avatar marca\",\r\n                        populate: {\r\n                            path: \"marca\",\r\n                            select: \"name avatar\",\r\n                        },\r\n                    },\r\n                ],\r\n            })\r\n            .populate({\r\n                path: \"colorE\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"cliente\",\r\n                select: \"name document cellphone email\",\r\n            })\r\n            .populate({\r\n                path: \"anio_primer_abono\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"mes_primer_abono\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"tipo_venta\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"financiera\",\r\n                select: \"name avatar\",\r\n            })\r\n            .populate({\r\n                path: \"plan_maf\",\r\n                select: \"name\",\r\n            })\r\n            .populate({\r\n                path: \"solicitudMAF\",\r\n                select: \"nro_solicitud fecha_ingreso sucursalE customer cuota_inicial seller car estadoSolicitudMAF fecha_aprobacion carta_evidencia\",\r\n                populate: [\r\n                    {\r\n                        path: \"sucursalE\",\r\n                        select: \"name\",\r\n                    },\r\n                    {\r\n                        path: \"customer\",\r\n                        select: \"name document cellphone email\",\r\n                    },\r\n                    {\r\n                        path: \"seller\",\r\n                        select: \"name document sucursalE marcaE\",\r\n                        populate: [\r\n                            {\r\n                                path: \"sucursalE\",\r\n                                select: \"name\",\r\n                            },\r\n                            {\r\n                                path: \"marcaE\",\r\n                                select: \"name avatar\",\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: \"car\",\r\n                        select: \"chasis model cod_tdp version\",\r\n                        populate: [\r\n                            {\r\n                                path: \"chasis\",\r\n                                select: \"name\",\r\n                            },\r\n                            {\r\n                                path: \"model\",\r\n                                select: \"name avatar marca\",\r\n                                populate: {\r\n                                    path: \"marca\",\r\n                                    select: \"name avatar\",\r\n                                },\r\n                            },\r\n                        ],\r\n                    },\r\n                    {\r\n                        path: \"estadoSolicitudMAF\",\r\n                        select: \"name\",\r\n                    },\r\n                ],\r\n            })\r\n            .populate({\r\n                path: \"createdBy\",\r\n                select: \"name username\",\r\n            })\r\n            .populate({\r\n                path: \"updatedBy\",\r\n                select: \"name username\",\r\n            });\r\n\r\n        if (query) {\r\n            res.json({ one: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No se encontró el cliente en la lista de espera\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nlistaEsperaController.createOne = async (req, res) => {\r\n    const {\r\n        cod_interno,\r\n        sucursal,\r\n        sucursalE,\r\n        vehiculo,\r\n        colorE,\r\n        cantidad,\r\n        orden,\r\n        cliente,\r\n        anio_primer_abono,\r\n        mes_primer_abono,\r\n        grupo_abonos,\r\n        precio_venta_final,\r\n        tipo_venta,\r\n        financiera,\r\n        plan_maf,\r\n        fecha_carta_aprobacion,\r\n        inicial,\r\n        solicitudMAF,\r\n        cuenta_epdp,\r\n        avance_pago_contado,\r\n        avance_pago_credito,\r\n        cumple_politica,\r\n        createdBy,\r\n    } = req.body;\r\n\r\n    try {\r\n        // const codTdpFound = Vehicle.findOne({cod_tdp: vehiculo});\r\n        // const countOrder = ListaEspera.find({vehicle: codTdpFound._id}).countDocuments();\r\n\r\n        const obj = new ListaEspera({\r\n            cod_interno,\r\n            sucursal,\r\n            cantidad,\r\n            orden,\r\n            grupo_abonos,\r\n            precio_venta_final,\r\n            fecha_carta_aprobacion,\r\n            inicial,\r\n            cuenta_epdp,\r\n            avance_pago_contado,\r\n            avance_pago_credito,\r\n            cumple_politica,\r\n        });\r\n\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n        if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n        obj.sucursalE = sucursalFound._id;\r\n\r\n        const vehiculoFound = await Vehicle.findOne({ cod_tdp: vehiculo });\r\n        if (!vehiculoFound) return res.status(404).json({ message: `Vehículo ${vehiculo} no encontrado` });\r\n        obj.vehiculo = vehiculoFound._id;\r\n\r\n        const colorFound = await Colores.find({ name: { $in: colorE } });\r\n        if (!colorFound) return res.status(404).json({ message: `Color ${colorE} no encontrado` });\r\n        obj.colorE = colorFound.map((a) => a._id);\r\n\r\n        const customerFound = await Customer.findOne({ name: cliente });\r\n        if (!customerFound) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n        obj.cliente = customerFound._id;\r\n\r\n        const anioFound = await Anio.findOne({ name: anio_primer_abono });\r\n        if (!anioFound) return res.status(404).json({ message: `Anio ${anio_primer_abono} no encontrado` });\r\n        obj.anio_primer_abono = anioFound._id;\r\n\r\n        const mesFound = await Mes.findOne({ name: mes_primer_abono });\r\n        if (!mesFound) return res.status(404).json({ message: `Mes ${mes_primer_abono} no encontrado` });\r\n        obj.mes_primer_abono = mesFound._id;\r\n\r\n        const tipoVentaFound = await Financiamiento.findOne({ name: tipo_venta });\r\n        if (!tipoVentaFound) return res.status(404).json({ message: `Tipo Venta ${tipo_venta} no encontrado` });\r\n        obj.tipo_venta = tipoVentaFound._id;\r\n\r\n        if (financiera == null || financiera == undefined) {\r\n            obj.financiera = null;\r\n        } else {\r\n            const financieraFound = await Banco.findOne({ name: financiera });\r\n            if (!financieraFound) return res.status(404).json({ message: `Financiera ${financiera} no encontrada` });\r\n            obj.financiera = financieraFound._id;\r\n        }\r\n\r\n        if (plan_maf == null || plan_maf == undefined) {\r\n            obj.plan_maf = null;\r\n        } else {\r\n            const planMAFFound = await PlanMAF.findOne({ name: plan_maf });\r\n            if (!planMAFFound) return res.status(404).json({ message: `Plan MAF ${plan_maf} no encontrado` });\r\n            obj.plan_maf = planMAFFound._id;\r\n        }\r\n\r\n        if (solicitudMAF == null || solicitudMAF == undefined) {\r\n            obj.solicitudMAF = null;\r\n        } else {\r\n            const solicitudMAFFound = await Maf.findOne({ name: solicitudMAF });\r\n            if (!solicitudMAFFound) return res.status(404).json({ message: `Solicitud MAF ${solicitudMAF} no encontrada` });\r\n            obj.solicitudMAF = solicitudMAFFound._id;\r\n        }\r\n\r\n        const userFound = await User.findOne({ username: createdBy });\r\n        if (!userFound) return res.status(404).json({ message: `Usuario ${createdBy} no encontrado` });\r\n        obj.createdBy = userFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: \"Cliente agregado a lista de espera con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nlistaEsperaController.updateOneById = async (req, res) => {\r\n    const {\r\n        sucursal,\r\n        sucursalE,\r\n        orden,\r\n        cliente,\r\n        vehiculo,\r\n        cantidad,\r\n        precio_venta_final,\r\n        tipo_venta,\r\n        financiera,\r\n        plan_maf,\r\n        fecha_carta_aprobacion,\r\n        inicial,\r\n        grupo_abonos,\r\n        cuenta_epdp,\r\n        avance_pago_contado,\r\n        avance_pago_credito,\r\n        cumple_politica,\r\n    } = req.body;\r\n    const { itemId } = req.params;\r\n    let itemNullF = null;\r\n    let itemNullPM = null;\r\n\r\n    try {\r\n        const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n        if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n\r\n        const vehiculoFound = await Vehicle.findOne({ cod_tdp: vehiculo });\r\n        if (!vehiculoFound) return res.status(404).json({ message: `Vehículo ${vehiculo} no encontrado` });\r\n\r\n        const customerFound = await Customer.findOne({ name: cliente });\r\n        if (!customerFound) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n\r\n        const tipoVentaFound = await Financiamiento.findOne({ name: tipo_venta });\r\n        if (!tipoVentaFound) return res.status(404).json({ message: `Tipo Venta ${tipo_venta} no encontrado` });\r\n\r\n        if (financiera == null || financiera == undefined) {\r\n            itemNullF = null;\r\n        } else {\r\n            const financieraFound = await Banco.findOne({ name: financiera });\r\n            if (!financieraFound) return res.status(404).json({ message: `Financiera ${financiera} no encontrada` });\r\n            itemNullF = financieraFound._id;\r\n        }\r\n\r\n        if (plan_maf == null || plan_maf == undefined) {\r\n            itemNullPM = null;\r\n        } else {\r\n            const planMAFFound = await PlanMAF.findOne({ name: plan_maf });\r\n            if (!planMAFFound) return res.status(404).json({ message: `Plan MAF ${plan_maf} no encontrado` });\r\n            itemNullPM = planMAFFound._id;\r\n        }\r\n\r\n        const query = await ListaEspera.findByIdAndUpdate(itemId, {\r\n            sucursal,\r\n            sucursalE: sucursalFound._id,\r\n            orden,\r\n            cliente: customerFound._id,\r\n            vehiculo: vehiculoFound._id,\r\n            cantidad,\r\n            precio_venta_final,\r\n            tipo_venta: tipoVentaFound._id,\r\n            financiera: itemNullF,\r\n            fecha_carta_aprobacion,\r\n            inicial,\r\n            plan_maf: itemNullPM,\r\n            grupo_abonos,\r\n            cuenta_epdp,\r\n            avance_pago_contado,\r\n            avance_pago_credito,\r\n            cumple_politica\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: \"Cliente actualizado!\" });\r\n        } else {\r\n            res.status(404).json({ message: \"No se encontró el cliente a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nlistaEsperaController.deleteOneById = async (req, res) => {\r\n    const { itemId } = req.params;\r\n\r\n    try {\r\n        const query = await ListaEspera.findByIdAndDelete(itemId);\r\n\r\n        if (query) {\r\n            res.json({ message: \"Cliente eliminado de la lista de espera con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: `No se encuentra cliente a eliminar` });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nlistaEsperaController.getCountByEstado = async (req, res) => {\r\n    const { estadoE } = req.body;\r\n\r\n    try {\r\n        const estadoFound = await EstadoListaEspera.findOne({ name: estadoE });\r\n        if (!estadoFound) return res.status(404).json({ message: `Estado ${estadoE} no encontrado` });\r\n\r\n        const query = await ListaEspera.find({ estadoE: estadoFound._id }).countDocuments();\r\n\r\n        if (query >= 0) {\r\n            res.json({ total: query });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nlistaEsperaController.getCountClientByVehicle = async (req, res) => {\r\n    const { cod_tdp } = req.body;\r\n\r\n    try {\r\n        const vehicleFound = await Vehicle.findOne({ cod_tdp });\r\n        if (!vehicleFound) return res.status(404).json({ message: `Código ${cod_tdp} no encontrado` });\r\n\r\n        const clientsFound = await ListaEspera.find({ vehiculo: vehicleFound._id }).countDocuments();\r\n\r\n        if (clientsFound >= 0) {\r\n            res.json({ total: clientsFound });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport default listaEsperaController;\r\n"],"file":"listaEspera.controller.js"}