{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["createUser","req","res","body","username","name","password","sucursal","roles","status","User","encryptPassword","newUser","Role","find","$in","foundRoles","map","role","_id","findOne","save","userSaved","json","message","console","log","error","getUsers","select","sort","populate","path","lista","length","getUserById","userId","params","findById","objeto","updateUserById","findByIdAndUpdate","userFound","messsage","updateProfile","email","phone","direccion","pais","codigo_postal","about","deleteUserById","findByIdAndRemove","deletedUser","countAll","countDocuments","query","count_user","countByOnline","online","where","count_onlines","uploadPhotoProfile","photo","file","avatar","location"],"mappings":"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","sourcesContent":["import User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const createUser = async(req, res) => {\r\n    const { username, name, password, sucursal, roles, status } = req.body;\r\n\r\n    try {\r\n\r\n        const newUser = new User({\r\n            username,\r\n            name,\r\n            password: await User.encryptPassword(password),\r\n            sucursal,\r\n            status\r\n        });\r\n\r\n        if (roles) {\r\n            const foundRoles = await Role.find({ name: { $in: roles } });\r\n            newUser.roles = foundRoles.map(role => role._id);\r\n        } else {\r\n            const role = await Role.findOne({ name: \"Usuario\" });\r\n            newUser.roles = [role._id];\r\n        }\r\n\r\n        const userSaved = await newUser.save();\r\n\r\n        if (userSaved) {\r\n            res.json({ message: 'Usuario creado con Ã©xito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const getUsers = async(req, res) => {\r\n    try {\r\n        const lista = await User.find()\r\n            .select('-password')\r\n            .sort({ name: 'asc' })\r\n            .populate({\r\n                path: 'roles',\r\n                select: 'name'\r\n            })\r\n\r\n        if (lista.length > 0) {\r\n            res.json(lista)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Usuarios' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const getUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n\r\n    try {\r\n\r\n        const objeto = await User.findById(userId).populate('roles', 'name')\r\n\r\n        if (objeto) {\r\n            res.json(objeto)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Usuario' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n\r\n}\r\n\r\nexport const updateUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const { username, name, sucursal, roles, status } = req.body;\r\n\r\n    try {\r\n        const foundRoles = await Role.find({ name: { $in: roles } })\r\n        const userFound = await User.findByIdAndUpdate(userId, {\r\n            username,\r\n            name,\r\n            sucursal,\r\n            roles: foundRoles.map(role => role._id),\r\n            status\r\n        });\r\n\r\n        if (userFound) {\r\n            res.json({ message: 'Usuario actualizado con Ã©xito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe usuario a actualizar' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const updateProfile = async(req, res) => {\r\n    const { email, phone, direccion, pais, codigo_postal, about } = req.body;\r\n    const { userId } = req.params;\r\n\r\n    try {\r\n        const objeto = await User.findByIdAndUpdate(userId, {\r\n            email,\r\n            phone,\r\n            direccion,\r\n            pais,\r\n            codigo_postal,\r\n            about\r\n        });\r\n        if (objeto) {\r\n            res.json({ message: 'ActualizaciÃ³n de Perfil con Ã©xito' })\r\n        } else {\r\n            return res.json.status(404).json({ message: 'No existe Perfil a modificar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n\r\n        const deletedUser = await User.findByIdAndRemove(userId);\r\n\r\n        if (deletedUser) {\r\n            res.json({ message: 'Usuario eliminado con Ã©xito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe usuario a eliminar' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const countAll = async(req, res) => {\r\n    try {\r\n        const query = await User.countDocuments();\r\n\r\n        if (query >= 0) return res.json({ count_user: query });\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const countByOnline = async(req, res) => {\r\n    const { online } = req.body;\r\n    try {\r\n        const query = await User.where({ online }).find().countDocuments();\r\n\r\n        if (query >= 0) return res.json({ count_onlines: query });\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err })\r\n    }\r\n}\r\n\r\nexport const uploadPhotoProfile = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const photo = req.file;\r\n\r\n    try {\r\n        const query = await User.findByIdAndUpdate(userId, {\r\n            avatar: photo.location\r\n        })\r\n\r\n        if (query) {\r\n            res.json({ message: 'Foto subida con Ã©xito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el usuario' });\r\n        }\r\n    } catch (err) {\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}"],"file":"user.controller.js"}