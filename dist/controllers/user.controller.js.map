{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["createUser","req","res","body","username","email","name","password","sucursal","direccion","pais","codigo_postal","about","roles","activo","User","encryptPassword","newUser","Role","find","$in","foundRoles","map","role","_id","findOne","save","userSaved","json","message","console","log","status","getUsers","sort","populate","lista","length","getUserById","userId","params","findById","objeto","updateUserById","findByIdAndUpdate","userFound","messsage","updateProfile","deleteUserById","findByIdAndRemove","deletedUser"],"mappings":"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","sourcesContent":["import User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const createUser = async(req, res) => {\r\n    const { username, email, name, password, sucursal, direccion, pais, codigo_postal, about, roles, activo } = req.body;\r\n\r\n    try {\r\n\r\n        const newUser = new User({ username, email, name, password: await User.encryptPassword(password), sucursal, direccion, pais, codigo_postal, about, activo });\r\n\r\n        if (roles) {\r\n            const foundRoles = await Role.find({ name: { $in: roles } });\r\n            newUser.roles = foundRoles.map(role => role._id);\r\n        } else {\r\n            const role = await Role.findOne({ name: \"Usuario\" });\r\n            newUser.roles = [role._id];\r\n        }\r\n\r\n        const userSaved = await newUser.save();\r\n\r\n        if (userSaved) {\r\n            res.json({ message: 'Usuario creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getUsers = async(req, res) => {\r\n    try {\r\n        const lista = await User.find().sort({ name: 'asc' }).populate('roles')\r\n        if (lista.length > 0) {\r\n            res.json(lista)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Usuarios' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n\r\n    try {\r\n\r\n        const objeto = await User.findById(userId).populate('roles')\r\n\r\n        if (objeto) {\r\n            res.json(objeto)\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Usuario' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nexport const updateUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const { username, email, name, sucursal, direccion, pais, codigo_postal, about, roles, activo } = req.body;\r\n\r\n    try {\r\n        const foundRoles = await Role.find({ name: { $in: roles } })\r\n        const userFound = await User.findByIdAndUpdate(userId, { username, email, name, sucursal, direccion, pais, codigo_postal, about, roles: foundRoles.map(role => role._id), activo });\r\n\r\n        if (userFound) {\r\n            res.json({ message: 'Usuario actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe usuario a actualizar' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateProfile = async(req, res) => {\r\n    const { email, direccion, pais, codigo_postal, about } = req.body;\r\n    const { userId } = req.params;\r\n\r\n    try {\r\n        const objeto = await User.findByIdAndUpdate(userId, { email, direccion, pais, codigo_postal, about });\r\n        if (objeto) {\r\n            res.json({ message: 'Actualización de Perfil con éxito' })\r\n        } else {\r\n            return res.json.status(404).json({ message: 'No existe Perfil a modificar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteUserById = async(req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        const deletedUser = await User.findByIdAndRemove(userId);\r\n\r\n        if (deletedUser) {\r\n            res.json({ message: 'Usuario eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe usuario a eliminar' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n\r\n}"],"file":"user.controller.js"}