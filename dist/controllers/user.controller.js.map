{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["createUser","req","res","body","username","email","password","roles","User","encryptPassword","newUser","Role","find","name","$in","foundRoles","map","role","_id","findOne","save","userSaved","status","json","console","log","getUsers","err","users","populate","path","send","getUserById","findById","params","userId","user","updateUserById","new","findByIdAndUpdate","userFound","deleteUserById","findByIdAndRemove","deletedUser","message"],"mappings":"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","sourcesContent":["import User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const createUser = async(req, res) => {\r\n    try {\r\n        const { username, email, password, roles } = req.body;\r\n        const newUser = new User({\r\n            username,\r\n            email,\r\n            password: await User.encryptPassword(password),\r\n        });\r\n\r\n        if (roles) {\r\n            const foundRoles = await Role.find({ name: { $in: roles } });\r\n            newUser.roles = foundRoles.map(role => role._id);\r\n        } else {\r\n            const role = await Role.findOne({ name: \"user\" });\r\n            newUser.roles = [role._id];\r\n        }\r\n\r\n        const userSaved = await newUser.save();\r\n        res.status(201).json(userSaved);\r\n    } catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n\r\nexport const getUsers = async(req, res) => {\r\n    await User.find({}, function(err, users) {\r\n        Role.populate(users, { path: \"roles\" }, function(err, users) {\r\n            res.status(200).send(users);\r\n        })\r\n    });\r\n    //res.json(accounts);\r\n}\r\n\r\nexport const getUserById = async(req, res) => {\r\n    await User.findById(req.params.userId, function(err, user) {\r\n        Role.populate(user, { path: \"roles\" }, function(err, user) {\r\n            res.status(200).json(user);\r\n        })\r\n    });\r\n\r\n}\r\n\r\nexport const updateUserById = async(req, res) => {\r\n    const { username, email, password, roles } = req.body;\r\n\r\n    const foundRoles = await Role.find({ name: { $in: roles } })\r\n    const userFound = await User.findByIdAndUpdate(req.params.userId, { username, email, password: await User.encryptPassword(password), roles: foundRoles.map(role => role._id) }, { new: true });\r\n\r\n    res.status(200).json(userFound);\r\n}\r\n\r\nexport const deleteUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const deletedUser = await User.findByIdAndRemove(userId);\r\n    res.status(200).json({ message: 'User Removed' });\r\n}"],"file":"user.controller.js"}