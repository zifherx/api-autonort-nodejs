{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["createUser","req","res","body","username","email","name","password","sucursal","direccion","pais","codigo_postal","about","roles","activo","User","encryptPassword","newUser","Role","find","$in","foundRoles","map","role","_id","findOne","save","userSaved","json","message","console","log","status","getUsers","err","users","populate","path","send","getUserById","findById","params","userId","user","updateUserById","findByIdAndUpdate","new","userFound","deleteUserById","findByIdAndRemove","deletedUser"],"mappings":"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","sourcesContent":["import User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const createUser = async(req, res) => {\r\n    try {\r\n        const { username, email, name, password, sucursal, direccion, pais, codigo_postal, about, roles, activo } = req.body;\r\n        const newUser = new User({\r\n            username,\r\n            email,\r\n            name,\r\n            password: await User.encryptPassword(password),\r\n            sucursal,\r\n            direccion,\r\n            pais,\r\n            codigo_postal,\r\n            about,\r\n            activo\r\n        });\r\n\r\n        if (roles) {\r\n            const foundRoles = await Role.find({ name: { $in: roles } });\r\n            newUser.roles = foundRoles.map(role => role._id);\r\n        } else {\r\n            const role = await Role.findOne({ name: \"Usuario\" });\r\n            newUser.roles = [role._id];\r\n        }\r\n\r\n        const userSaved = await newUser.save();\r\n        res.json({ message: 'Usuario creado con éxito' });\r\n    } catch (e) {\r\n        console.log(e);\r\n        return res.status(404).json({ message: 'Error' })\r\n    }\r\n}\r\n\r\nexport const getUsers = async(req, res) => {\r\n    await User.find({}, function(err, users) {\r\n        Role.populate(users, { path: \"roles\" }, function(err, users) {\r\n            res.send(users);\r\n        })\r\n    });\r\n}\r\n\r\nexport const getUserById = async(req, res) => {\r\n    await User.findById(req.params.userId, function(err, user) {\r\n        Role.populate(user, { path: \"roles\" }, function(err, user) {\r\n            res.status(200).json(user);\r\n        })\r\n    });\r\n\r\n}\r\n\r\nexport const updateUserById = async(req, res) => {\r\n    const { username, email, name, sucursal, direccion, pais, codigo_postal, about, roles, activo } = req.body;\r\n\r\n    try {\r\n        const foundRoles = await Role.find({ name: { $in: roles } })\r\n        const userFound = await User.findByIdAndUpdate(req.params.userId, { username, email, name, sucursal, direccion, pais, codigo_postal, about, roles: foundRoles.map(role => role._id), activo }, { new: true });\r\n\r\n        //res.status(200).json(userFound);\r\n        res.json({ message: 'Usuario actualizado con éxito' });\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ message: 'Error en la consulta' });\r\n    }\r\n}\r\n\r\nexport const deleteUserById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const deletedUser = await User.findByIdAndRemove(userId);\r\n    res.json({ message: 'Usuario eliminado con éxito' });\r\n}"],"file":"user.controller.js"}