{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["userController","getAll","req","res","User","find","select","sort","name","populate","path","query","length","json","total","all","status","message","console","log","getAllActivos","estado","total_active","all_active","getOneById","userId","params","findById","one","createOne","body","username","password","sucursal","sucursalE","roles","encryptPassword","newUser","Sucursal","findOne","sucursalFound","_id","Role","$in","foundRoles","map","role","save","updateOneById","email","phone","avatar","file","roleFound","undefined","findByIdAndUpdate","a","location","messsage","updateProfileById","pais","codigo_postal","direccion","about","deleteOneById","findByIdAndRemove","countByOnlineStatus","online","countDocuments"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,cAAc,GAAG,EAAvB;;AAEAA,cAAc,CAACC,MAAf;AAAA,qFAAwB,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEIC,cAAKC,IAAL,GACfC,MADe,CACR,WADQ,EAEfC,IAFe,CAEV;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAFU,EAGfC,QAHe,CAGN;AACNC,cAAAA,IAAI,EAAE,OADA;AAENJ,cAAAA,MAAM,EAAE;AAFF,aAHM,EAOfG,QAPe,CAON;AACNC,cAAAA,IAAI,EAAE,WADA;AAENJ,cAAAA,MAAM,EAAE;AAFF,aAPM,CAFJ;;AAAA;AAEVK,YAAAA,KAFU;;AAAA,kBAcZA,KAAK,CAACC,MAAN,GAAe,CAdH;AAAA;AAAA;AAAA;;AAeZT,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,cAAAA,KAAK,EAAEH,KAAK,CAACC,MAAd;AAAsBG,cAAAA,GAAG,EAAEJ;AAA3B,aAAT;AAfY;AAAA;;AAAA;AAAA,6CAiBLR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBhBC,YAAAA,OAAO,CAACC,GAAR;AApBgB,6CAqBThB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB,CArBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAxB;;AAAA;AAAA;AAAA;AAAA;;AAyBAjB,cAAc,CAACoB,aAAf;AAAA,sFAA+B,kBAAMlB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEHC,cAAKC,IAAL,CAAU;AAACgB,cAAAA,MAAM,EAAE;AAAT,aAAV,EACff,MADe,CACR,WADQ,EAEfC,IAFe,CAEV;AAAEC,cAAAA,IAAI,EAAE;AAAR,aAFU,EAGfC,QAHe,CAGN;AACNC,cAAAA,IAAI,EAAE,OADA;AAENJ,cAAAA,MAAM,EAAE;AAFF,aAHM,EAOfG,QAPe,CAON;AACNC,cAAAA,IAAI,EAAE,WADA;AAENJ,cAAAA,MAAM,EAAE;AAFF,aAPM,CAFG;;AAAA;AAEjBK,YAAAA,KAFiB;;AAAA,kBAcnBA,KAAK,CAACC,MAAN,GAAe,CAdI;AAAA;AAAA;AAAA;;AAenBT,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAACS,cAAAA,YAAY,EAAEX,KAAK,CAACC,MAArB;AAA6BW,cAAAA,UAAU,EAAEZ;AAAzC,aAAT;AAfmB;AAAA;;AAAA;AAAA,8CAiBZR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAoBvBC,YAAAA,OAAO,CAACC,GAAR;AApBuB,8CAqBhBhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CArBgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAyBAjB,cAAc,CAACwB,UAAf;AAAA,sFAA4B,kBAAMtB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBsB,YAAAA,MADgB,GACLvB,GAAG,CAACwB,MADC,CAChBD,MADgB;AAAA;AAAA;AAAA,mBAIArB,cAAKuB,QAAL,CAAcF,MAAd,EACnBnB,MADmB,CACZ,WADY,EAEnBG,QAFmB,CAEV;AACNC,cAAAA,IAAI,EAAE,OADA;AAENJ,cAAAA,MAAM,EAAE;AAFF,aAFU,EAMnBG,QANmB,CAMV;AACNC,cAAAA,IAAI,EAAE,WADA;AAENJ,cAAAA,MAAM,EAAE;AAFF,aANU,CAJA;;AAAA;AAIdK,YAAAA,KAJc;;AAAA,iBAehBA,KAfgB;AAAA;AAAA;AAAA;;AAgBhBR,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAACe,cAAAA,GAAG,EAAEjB;AAAN,aAAT;AAhBgB;AAAA;;AAAA;AAAA,8CAkBTR,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAlBS;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBpBC,YAAAA,OAAO,CAACC,GAAR;AArBoB,8CAsBbhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAtBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA5B;;AAAA;AAAA;AAAA;AAAA;;AA2BAjB,cAAc,CAAC6B,SAAf;AAAA,sFAA2B,kBAAM3B,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACiDD,GAAG,CAAC4B,IADrD,EACftB,IADe,aACfA,IADe,EACTuB,QADS,aACTA,QADS,EACCC,QADD,aACCA,QADD,EACUC,QADV,aACUA,QADV,EACoBC,SADpB,aACoBA,SADpB,EAC+BC,KAD/B,aAC+BA,KAD/B,EACsCd,MADtC,aACsCA,MADtC;AAEvBH,YAAAA,OAAO,CAACC,GAAR,CAAYjB,GAAG,CAAC4B,IAAhB;AAFuB;AAAA,2BAKC1B,aALD;AAAA,2BAMfI,IANe;AAAA,2BAOfuB,QAPe;AAAA,2BAQfE,QARe;AAAA;AAAA,mBASC7B,cAAKgC,eAAL,CAAqBJ,QAArB,CATD;;AAAA;AAAA;AAAA,2BAUfX,MAVe;AAAA;AAMfb,cAAAA,IANe;AAOfuB,cAAAA,QAPe;AAQfE,cAAAA,QARe;AASfD,cAAAA,QATe;AAUfX,cAAAA,MAVe;AAAA;AAKbgB,YAAAA,OALa;AAAA;AAAA,mBAaSC,kBAASC,OAAT,CAAiB;AAAC/B,cAAAA,IAAI,EAAE0B;AAAP,aAAjB,CAbT;;AAAA;AAabM,YAAAA,aAba;AAcnBtB,YAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BqB,aAA/B;;AAdmB,gBAefA,aAfe;AAAA;AAAA;AAAA;;AAAA,8CAeOrC,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAACI,cAAAA,OAAO,qBAAciB,SAAd;AAAR,aAArB,CAfP;;AAAA;AAiBnBG,YAAAA,OAAO,CAACH,SAAR,GAAoBM,aAAa,CAACC,GAAlC;;AAjBmB,iBAmBfN,KAnBe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAoBUO,cAAKrC,IAAL,CAAU;AAAEG,cAAAA,IAAI,EAAE;AAAEmC,gBAAAA,GAAG,EAAER;AAAP;AAAR,aAAV,CApBV;;AAAA;AAoBTS,YAAAA,UApBS;AAqBfP,YAAAA,OAAO,CAACF,KAAR,GAAgBS,UAAU,CAACC,GAAX,CAAe,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACL,GAAT;AAAA,aAAnB,CAAhB;AArBe;AAAA;;AAAA;AAAA;AAAA,mBAuBIC,cAAKH,OAAL,CAAa;AAAE/B,cAAAA,IAAI,EAAE;AAAR,aAAb,CAvBJ;;AAAA;AAuBTsC,YAAAA,IAvBS;AAwBfT,YAAAA,OAAO,CAACF,KAAR,GAAgB,CAACW,IAAI,CAACL,GAAN,CAAhB;;AAxBe;AAAA;AAAA,mBA2BCJ,OAAO,CAACU,IAAR,EA3BD;;AAAA;AA2BbpC,YAAAA,KA3Ba;;AA6BnB,gBAAIA,KAAJ,EAAW;AACPR,cAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEI,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AA/BkB;AAAA;;AAAA;AAAA;AAAA;AAiCnBC,YAAAA,OAAO,CAACC,GAAR;AAjCmB,8CAkCZhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAlCY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAAA;AAAA;AAAA;AAAA;;AAsCAjB,cAAc,CAACgD,aAAf;AAAA,sFAA+B,kBAAM9C,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnBsB,YAAAA,MADmB,GACRvB,GAAG,CAACwB,MADI,CACnBD,MADmB;AAAA,yBAEwCvB,GAAG,CAAC4B,IAF5C,EAEnBtB,IAFmB,cAEnBA,IAFmB,EAEbuB,QAFa,cAEbA,QAFa,EAEHG,SAFG,cAEHA,SAFG,EAEQe,KAFR,cAEQA,KAFR,EAEeC,KAFf,cAEeA,KAFf,EAEsBf,KAFtB,cAEsBA,KAFtB,EAE6Bd,MAF7B,cAE6BA,MAF7B;AAGrB8B,YAAAA,MAHqB,GAGZjD,GAAG,CAACkD,IAHQ,EAK3B;;AAL2B;AASnBzC,YAAAA,KATmB,GASX,IATW;AAAA;AAAA,mBAWK2B,kBAASC,OAAT,CAAiB;AAAC/B,cAAAA,IAAI,EAAE0B;AAAP,aAAjB,CAXL;;AAAA;AAWjBM,YAAAA,aAXiB;;AAAA,gBAYnBA,aAZmB;AAAA;AAAA;AAAA;;AAAA,8CAYGrC,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAACI,cAAAA,OAAO,qBAAciB,SAAd;AAAR,aAArB,CAZH;;AAAA;AAAA;AAAA,mBAcCQ,cAAKrC,IAAL,CAAU;AAAEG,cAAAA,IAAI,EAAE;AAAEmC,gBAAAA,GAAG,EAAER;AAAP;AAAR,aAAV,CAdD;;AAAA;AAcjBkB,YAAAA,SAdiB;;AAAA,gBAenBA,SAfmB;AAAA;AAAA;AAAA;;AAAA,8CAeDlD,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAACI,cAAAA,OAAO,gBAASkB,KAAT;AAAR,aAArB,CAfC;;AAAA;AAAA,kBAiBpBgB,MAAM,IAAI,IAAV,IAAkBA,MAAM,IAAIG,SAjBR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkBLlD,cAAKmD,iBAAL,CAAuB9B,MAAvB,EAA+B;AACzCM,cAAAA,QAAQ,EAARA,QADyC;AAEzCvB,cAAAA,IAAI,EAAJA,IAFyC;AAGzC0B,cAAAA,SAAS,EAAEM,aAAa,CAACC,GAHgB;AAIzCN,cAAAA,KAAK,EAAEkB,SAAS,CAACR,GAAV,CAAc,UAAAW,CAAC;AAAA,uBAAIA,CAAC,CAACf,GAAN;AAAA,eAAf,CAJkC;AAKzCQ,cAAAA,KAAK,EAALA,KALyC;AAMzCC,cAAAA,KAAK,EAALA,KANyC;AAOzC7B,cAAAA,MAAM,EAANA;AAPyC,aAA/B,CAlBK;;AAAA;AAkBnBV,YAAAA,KAlBmB;AAAA;AAAA;;AAAA;AAAA;AAAA,mBA4BLP,cAAKmD,iBAAL,CAAuB9B,MAAvB,EAA+B;AACzCM,cAAAA,QAAQ,EAARA,QADyC;AAEzCvB,cAAAA,IAAI,EAAJA,IAFyC;AAGzC0B,cAAAA,SAAS,EAAEM,aAAa,CAACC,GAHgB;AAIzCN,cAAAA,KAAK,EAAEkB,SAAS,CAACR,GAAV,CAAc,UAAAW,CAAC;AAAA,uBAAIA,CAAC,CAACf,GAAN;AAAA,eAAf,CAJkC;AAKzCU,cAAAA,MAAM,EAAEA,MAAM,CAACM,QAL0B;AAMzCR,cAAAA,KAAK,EAALA,KANyC;AAOzCC,cAAAA,KAAK,EAALA,KAPyC;AAQzC7B,cAAAA,MAAM,EAANA;AARyC,aAA/B,CA5BK;;AAAA;AA4BnBV,YAAAA,KA5BmB;;AAAA;AAAA,iBAwCnBA,KAxCmB;AAAA;AAAA;AAAA;;AAyCnBR,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAzCmB;AAAA;;AAAA;AAAA,8CA2CZd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAE6C,cAAAA,QAAQ,EAAE;AAAZ,aAArB,CA3CY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA+CvBxC,YAAAA,OAAO,CAACC,GAAR;AA/CuB,8CAgDhBhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAhDgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAoDAjB,cAAc,CAAC2D,iBAAf;AAAA,sFAAmC,kBAAOzD,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBsB,YAAAA,MADuB,GACZvB,GAAG,CAACwB,MADQ,CACvBD,MADuB;AAAA,yBAEgCvB,GAAG,CAAC4B,IAFpC,EAExBtB,IAFwB,cAExBA,IAFwB,EAElByC,KAFkB,cAElBA,KAFkB,EAEZC,KAFY,cAEZA,KAFY,EAENU,IAFM,cAENA,IAFM,EAEDC,aAFC,cAEDA,aAFC,EAEaC,SAFb,cAEaA,SAFb,EAEuBC,KAFvB,cAEuBA,KAFvB;AAAA;AAAA;AAAA,mBAKP3D,cAAKmD,iBAAL,CAAuB9B,MAAvB,EAA+B;AAC/CjB,cAAAA,IAAI,EAAJA,IAD+C;AAE/CyC,cAAAA,KAAK,EAALA,KAF+C;AAG/CC,cAAAA,KAAK,EAALA,KAH+C;AAI/CU,cAAAA,IAAI,EAAJA,IAJ+C;AAK/CC,cAAAA,aAAa,EAAbA,aAL+C;AAM/CC,cAAAA,SAAS,EAATA,SAN+C;AAO/CC,cAAAA,KAAK,EAALA;AAP+C,aAA/B,CALO;;AAAA;AAKrBpD,YAAAA,KALqB;;AAAA,iBAevBA,KAfuB;AAAA;AAAA;AAAA;;AAgBvBR,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAhBuB;AAAA;;AAAA;AAAA,8CAkBhBd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAE6C,cAAAA,QAAQ,EAAE;AAAZ,aAArB,CAlBgB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqB3BxC,YAAAA,OAAO,CAACC,GAAR;AArB2B,8CAsBpBhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAtBoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnC;;AAAA;AAAA;AAAA;AAAA;;AA0BAjB,cAAc,CAACgE,aAAf;AAAA,sFAA+B,kBAAM9D,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBsB,YAAAA,MADmB,GACRvB,GAAG,CAACwB,MADI,CACnBD,MADmB;AAAA;AAAA;AAAA,mBAIHrB,cAAK6D,iBAAL,CAAuBxC,MAAvB,CAJG;;AAAA;AAIjBd,YAAAA,KAJiB;;AAAA,iBAMnBA,KANmB;AAAA;AAAA;AAAA;;AAOnBR,YAAAA,GAAG,CAACU,IAAJ,CAAS;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAAT;AAPmB;AAAA;;AAAA;AAAA,8CASZd,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CATY;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAavBC,YAAAA,OAAO,CAACC,GAAR;AAbuB,8CAchBhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAdgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA/B;;AAAA;AAAA;AAAA;AAAA;;AAmBAjB,cAAc,CAACkE,mBAAf;AAAA,sFAAqC,kBAAOhE,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACzBgE,YAAAA,MADyB,GACdjE,GAAG,CAAC4B,IADU,CACzBqC,MADyB;AAAA;AAAA;AAAA,mBAIT/D,cAAKC,IAAL,CAAU;AAAC8D,cAAAA,MAAM,EAANA;AAAD,aAAV,EAAoBC,cAApB,EAJS;;AAAA;AAIvBzD,YAAAA,KAJuB;;AAM7B,gBAAGA,KAAK,IAAI,CAAZ,EAAc;AACVR,cAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,gBAAAA,KAAK,EAAEH;AAAR,eAAT;AACH;;AAR4B;AAAA;;AAAA;AAAA;AAAA;AAU7BO,YAAAA,OAAO,CAACC,GAAR;AAV6B,8CAWtBhB,GAAG,CAACa,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB,CAXsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArC;;AAAA;AAAA;AAAA;AAAA;;eAeejB,c","sourcesContent":["import User from '../models/User'\r\nimport Role from '../models/Role'\r\nimport Sucursal from '../models/Sucursal';\r\n\r\nconst userController = {};\r\n\r\nuserController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await User.find()\r\n            .select('-password')\r\n            .sort({ name: 1 })\r\n            .populate({\r\n                path: 'roles',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'sucursalE',\r\n                select: 'name'\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen usuarios' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await User.find({estado: true})\r\n            .select('-password')\r\n            .sort({ name: 1 })\r\n            .populate({\r\n                path: 'roles',\r\n                select: 'name'\r\n            })\r\n            .populate({\r\n                path: 'sucursalE',\r\n                select: 'name'\r\n            });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen usuarios activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserController.getOneById = async(req, res) => {\r\n    const { userId } = req.params;\r\n\r\n    try {\r\n        const query = await User.findById(userId)\r\n        .select('-password')\r\n        .populate({\r\n            path: 'roles',\r\n            select: 'name'\r\n        })\r\n        .populate({\r\n            path: 'sucursalE',\r\n            select: 'name'\r\n        });\r\n\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe usuario' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nuserController.createOne = async(req, res) => {\r\n    const { name, username, password,sucursal, sucursalE, roles, estado } = req.body;\r\n    console.log(req.body);\r\n\r\n    try {\r\n        const newUser = new User({\r\n            name,\r\n            username,\r\n            sucursal,\r\n            password: await User.encryptPassword(password),\r\n            estado\r\n        });\r\n\r\n        const sucursalFound = await Sucursal.findOne({name: sucursalE});\r\n        console.log('Sucursal Found:', sucursalFound);\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursalE} no encontrada`});\r\n\r\n        newUser.sucursalE = sucursalFound._id;\r\n\r\n        if (roles) {\r\n            const foundRoles = await Role.find({ name: { $in: roles } });\r\n            newUser.roles = foundRoles.map(role => role._id);\r\n        } else {\r\n            const role = await Role.findOne({ name: \"Usuario\" });\r\n            newUser.roles = [role._id];\r\n        }\r\n\r\n        const query = await newUser.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nuserController.updateOneById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    const { name, username, sucursalE, email, phone, roles, estado } = req.body;\r\n    const avatar = req.file;\r\n\r\n    // console.log(req.body);\r\n\r\n    try {\r\n\r\n        let query = null;\r\n\r\n        const sucursalFound = await Sucursal.findOne({name: sucursalE});\r\n        if(!sucursalFound) return res.status(404).json({message: `Sucursal ${sucursalE} no encontrada`});\r\n        \r\n        const roleFound = await Role.find({ name: { $in: roles } });\r\n        if(!roleFound) return res.status(404).json({message: `Rol ${roles} no encontrado`});\r\n\r\n        if(avatar == null || avatar == undefined){\r\n            query = await User.findByIdAndUpdate(userId, {\r\n                username,\r\n                name,\r\n                sucursalE: sucursalFound._id,\r\n                roles: roleFound.map(a => a._id),\r\n                email, \r\n                phone,\r\n                estado\r\n            });\r\n        }else{\r\n            query = await User.findByIdAndUpdate(userId, {\r\n                username,\r\n                name,\r\n                sucursalE: sucursalFound._id,\r\n                roles: roleFound.map(a => a._id),\r\n                avatar: avatar.location,\r\n                email, \r\n                phone,\r\n                estado\r\n            });\r\n        }\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe usuario a actualizar' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserController.updateProfileById = async (req, res) => {\r\n    const { userId } = req.params;\r\n    const {name, email,phone,pais,codigo_postal,direccion,about} = req.body;\r\n\r\n    try {\r\n        const query = await User.findByIdAndUpdate(userId, {\r\n            name,\r\n            email,\r\n            phone,\r\n            pais,\r\n            codigo_postal,\r\n            direccion,\r\n            about\r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Perfil actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ messsage: 'No existe perfil a actualizar' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nuserController.deleteOneById = async(req, res) => {\r\n    const { userId } = req.params;\r\n    try {\r\n\r\n        const query = await User.findByIdAndRemove(userId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Usuario eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe usuario a eliminar' })\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n\r\n}\r\n\r\nuserController.countByOnlineStatus = async (req, res) => {\r\n    const { online } = req.body;\r\n\r\n    try {\r\n        const query = await User.find({online}).countDocuments();\r\n        \r\n        if(query >= 0){\r\n            res.json({total: query});\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default userController;"],"file":"user.controller.js"}