{"version":3,"sources":["../../src/controllers/sale.controller.js"],"names":["saleController","createOne","req","res","body","vendedor","cliente","auto","serie_tdp","colorE","precio","anioFabricacionE","anioModeloE","ubicacionVehiculoE","estadoVehiculoE","fecha_ciguena","fecha_entrega","financiamientoE","bancoE","solicitudMAF","adelantosE","campaniasTDPE","ofertaTDPE","campaniasMafE","ofertaMafE","isToyotaValue","arrayToyotaValues","descuento_autonort","acuerdoTDP","observacion_adv","accesoriosE","condicionAccesorioE","condicion_accesorios","tipoOperacionE","tipoComprobanteE","nro_comprobante","fecha_comprobante","sucursal_venta","sucursalE","estadoVentaE","fecha_cancelacion","fecha_facturacion_tdp","estadoFacturacionE","monto_facturado","createdBy","fechaCreacionS","newSale","Sale","Seller","findOne","name","sellerFound","status","json","message","_id","Vehicle","cod_tdp","carFound","Customer","document","customerFound","undefined","Colores","colorFound","Anio","anioFFound","anioMFound","Ubicacion","ubicacionFound","Condicion","estadoVehicularFound","Financiamiento","financiamientoFound","Banco","bancoFound","Maf","nro_solicitud","mafFound","Campania","find","cod_interno","$in","campaniaTDPFound","map","a","campaniaMAFFound","Operacion","operacionFound","User","username","userFound","TipoComprobante","comprobanteFound","CondicionAccesorio","condicionFound","Sucursal","sucursalFound","Situacion","situacionFound","StatusFacturacion","facturacionFound","AccesorioE","accesorioFound","save","query","console","log","getAll","sort","populate","path","select","strictPopulate","length","total","all","getOneById","filesId","params","findById","one","updateOneById","salesId","ubicacion_vehiculo","estatus_vehiculo","estatus_venta","colorNull","anioFNull","anioMNull","ubicacionNull","financiamientoNull","bancoNull","solicitudNull","condicionAccNull","comprobanteNull","facturacionNull","autoFound","anioFound","accesoriosFound","findByIdAndUpdate","id","deleteOneById","findByIdAndDelete","UnidadesBySucursalyFecha","sucursal","start","end","$regex","$gte","Date","$lte","conteoUnidadesByStatus","estado","where","countDocuments","count","conteoUnidadesBySucursalFecha","conteoUnidadesBySucursalStatusFecha","conteoVentasByVendedor","estatus","filter","aggregate","$match","$group","num_ventas","$sum","$sort","consulta","totalAccesoriosBySucursalMes","qty","arrNoVacios","element","arr","forEach","abc","Props","push","reduce","acc","curVal","deploy","conteoVentasByModelo","ranking","rankingVentasByModelo","conteoUnidadesEntregadasBySucursal","conteoVehiculosEntregadosByFecha","ubicacion","filtro","obtenerToyotaValues","statusVenta","objetos","adicional","perra","serie","vehiculo","nro_adicionales","toyota_values","getVehiclesySeller","staus","getSalesBySeller","getRankingByStatusyFecha","probandoRanking","seller","month","$month","conteoVentasBySucursalyEstadoyMarca","marca","match","obj","b","model","rankingVentasByFinanciamiento","rankingVentasByEntidad","financiamiento","tipo_financiamiento"],"mappings":"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","sourcesContent":["import Sale from \"../models/Sale\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport Seller from \"../models/Seller\";\r\nimport Customer from \"../models/Customer\";\r\nimport Colores from \"../models/Colores\";\r\nimport Ubicacion from \"../models/Ubicacion\";\r\nimport Financiamiento from \"../models/Financiamiento\";\r\nimport Banco from \"../models/Banco\";\r\nimport Campania from \"../models/Campania\";\r\nimport Maf from \"../models/Maf\";\r\nimport Operacion from \"../models/Operacion\";\r\nimport TipoComprobante from \"../models/TipoComprobante\";\r\nimport Situacion from \"../models/Situacion\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport StatusFacturacion from \"../models/StatusFacturacion\";\r\nimport User from \"../models/User\";\r\nimport AccesorioE from \"../models/AccesorioE\";\r\nimport CondicionAccesorio from \"../models/CondicionAccesorio\";\r\nimport Anio from \"../models/Anio\";\r\nimport Condicion from \"../models/Condicion\";\r\n\r\nconst saleController = {};\r\n\r\nsaleController.createOne = async (req, res) => {\r\n     const {\r\n          vendedor,\r\n          cliente,\r\n          auto,\r\n          serie_tdp,\r\n          colorE,\r\n          precio,\r\n          anioFabricacionE,\r\n          anioModeloE,\r\n          ubicacionVehiculoE,\r\n          estadoVehiculoE,\r\n          fecha_ciguena,\r\n          fecha_entrega,\r\n          financiamientoE,\r\n          bancoE,\r\n          solicitudMAF,\r\n          adelantosE,\r\n          campaniasTDPE,\r\n          ofertaTDPE,\r\n          campaniasMafE,\r\n          ofertaMafE,\r\n          isToyotaValue,\r\n          arrayToyotaValues,\r\n          descuento_autonort,\r\n          acuerdoTDP,\r\n          observacion_adv,\r\n          accesoriosE,\r\n          condicionAccesorioE,\r\n          condicion_accesorios,\r\n          tipoOperacionE,\r\n          tipoComprobanteE,\r\n          nro_comprobante,\r\n          fecha_comprobante,\r\n          sucursal_venta,\r\n          sucursalE,\r\n          estadoVentaE,\r\n          fecha_cancelacion,\r\n          fecha_facturacion_tdp,\r\n          estadoFacturacionE,\r\n          monto_facturado,\r\n          createdBy,\r\n          fechaCreacionS,\r\n     } = req.body;\r\n\r\n     try {\r\n          const newSale = new Sale({\r\n               serie_tdp,\r\n               precio,\r\n               fecha_ciguena,\r\n               fecha_entrega,\r\n               adelantosE,\r\n               ofertaTDPE,\r\n               ofertaMafE,\r\n               isToyotaValue,\r\n               arrayToyotaValues,\r\n               descuento_autonort,\r\n               acuerdoTDP,\r\n               observacion_adv,\r\n               condicion_accesorios,\r\n               fecha_facturacion_tdp,\r\n               monto_facturado,\r\n               nro_comprobante,\r\n               fecha_comprobante,\r\n               fecha_cancelacion,\r\n               sucursal_venta,\r\n               fechaCreacionS,\r\n          });\r\n\r\n          //Seller Obligado\r\n          const sellerFound = await Seller.findOne({ name: vendedor });\r\n          if (!sellerFound) return res.status(404).json({ message: `Vendedor ${vendedor} no encontrado` });\r\n          newSale.vendedor = sellerFound._id;\r\n\r\n          //Vehicle Obligado\r\n          const carFound = await Vehicle.findOne({ cod_tdp: auto });\r\n          if (!carFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n          newSale.auto = carFound._id;\r\n\r\n          //Customer Obligado\r\n          const customerFound = await Customer.findOne({ document: cliente });\r\n          if (!customerFound) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n          newSale.cliente = customerFound._id;\r\n\r\n          //Item Null\r\n          if (colorE == null || colorE == undefined || colorE == \"\") {\r\n               newSale.colorE = null;\r\n          } else {\r\n               const colorFound = await Colores.findOne({ name: colorE });\r\n               if (!colorFound) return res.status(404).json({ message: `Cliente ${colorE} no encontrado` });\r\n               newSale.colorE = colorFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (anioFabricacionE == null || anioFabricacionE == undefined || anioFabricacionE == \"\") {\r\n               newSale.anioFabricacionE = null;\r\n          } else {\r\n               const anioFFound = await Anio.findOne({ name: anioFabricacionE });\r\n               if (!anioFFound) return res.status(404).json({ message: `Año Fabricación ${anioFabricacionE} no encontrado` });\r\n               newSale.anioFabricacionE = anioFFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (anioModeloE == null || anioModeloE == undefined || anioModeloE == \"\") {\r\n               newSale.anioModeloE = null;\r\n          } else {\r\n               const anioMFound = await Anio.findOne({ name: anioModeloE });\r\n               if (!anioMFound) return res.status(404).json({ message: `Año Modelo ${anioModeloE} no encontrado` });\r\n               newSale.anioModeloE = anioMFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (ubicacionVehiculoE == null || ubicacionVehiculoE == undefined || ubicacionVehiculoE == \"\") {\r\n               newSale.ubicacionVehiculoE = null;\r\n          } else {\r\n               const ubicacionFound = await Ubicacion.findOne({ name: ubicacionVehiculoE });\r\n               if (!ubicacionFound) return res.status(404).json({ message: `Ubicación ${ubicacionVehiculoE} no encontrado` });\r\n               newSale.ubicacionVehiculoE = ubicacionFound._id;\r\n          }\r\n\r\n          //Condición obligada\r\n          const estadoVehicularFound = await Condicion.findOne({ name: estadoVehiculoE });\r\n          if (!estadoVehicularFound) return res.status(404).json({ message: `Estado vehicular ${estadoVehiculoE} no encontrado` });\r\n          newSale.estadoVehiculoE = estadoVehicularFound._id;\r\n\r\n          //Item Null\r\n          if (financiamientoE == null || financiamientoE == undefined || financiamientoE == \"\") {\r\n               newSale.financiamientoE = null;\r\n          } else {\r\n               const financiamientoFound = await Financiamiento.findOne({ name: financiamientoE });\r\n               if (!financiamientoFound) return res.status(404).json({ message: `Financiamiento ${financiamientoE} no encontrado` });\r\n               newSale.financiamientoE = financiamientoFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (bancoE == null || bancoE == undefined || bancoE == \"\") {\r\n               newSale.bancoE = null;\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: bancoE });\r\n               if (!bancoFound) return res.status(404).json({ message: `Banco ${bancoE} no encontrado` });\r\n               newSale.bancoE = bancoFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (solicitudMAF == null || solicitudMAF == undefined || solicitudMAF == \"\") {\r\n               newSale.solicitudMAF = null;\r\n          } else {\r\n               const mafFound = await Maf.findOne({ nro_solicitud: solicitudMAF });\r\n               if (!mafFound) return res.status(404).json({ message: `Solicitud ${solicitudMAF} no encontrada` });\r\n               newSale.solicitudMAF = mafFound._id;\r\n          }\r\n\r\n          const campaniaTDPFound = await Campania.find({ cod_interno: { $in: campaniasTDPE } });\r\n          if (!campaniaTDPFound) return res.status(404).json({ message: `Campaña TDP ${campaniasTDPE} no encontrada` });\r\n          newSale.campaniasTDPE = campaniaTDPFound.map((a) => a._id);\r\n\r\n          const campaniaMAFFound = await Campania.find({ cod_interno: { $in: campaniasMafE } });\r\n          if (!campaniaMAFFound) return res.status(404).json({ message: `Campaña MAF ${campaniasMafE} no encontrada` });\r\n          newSale.campaniasMafE = campaniaMAFFound.map((a) => a._id);\r\n\r\n          //Operacion obligada\r\n          const operacionFound = await Operacion.findOne({ name: tipoOperacionE });\r\n          if (!operacionFound) return res.status(404).json({ message: `Tipo operación ${tipoOperacionE} no encontrada` });\r\n          newSale.tipoOperacionE = operacionFound._id;\r\n\r\n          //User Obligado\r\n          const userFound = await User.findOne({ username: createdBy });\r\n          if (!userFound) return res.status(404).json({ message: `Colaborador ${createdBy} no encontrado` });\r\n          newSale.createdBy = userFound._id;\r\n\r\n          //Item Null\r\n          if (tipoComprobanteE == null || tipoComprobanteE == undefined || tipoComprobanteE == \"\") {\r\n               newSale.tipoComprobanteE = null;\r\n          } else {\r\n               const comprobanteFound = await TipoComprobante.findOne({ name: tipoComprobanteE });\r\n               if (!comprobanteFound) return res.status(404).json({ message: `Tipo comprobante ${tipoComprobanteE} no encontrado` });\r\n               newSale.tipoComprobanteE = comprobanteFound._id;\r\n          }\r\n\r\n          // Item Null\r\n          if (condicionAccesorioE == null || condicionAccesorioE == undefined || condicionAccesorioE == \"\") {\r\n               newSale.condicionAccesorioE = null;\r\n          } else {\r\n               const condicionFound = await CondicionAccesorio.findOne({ name: condicionAccesorioE });\r\n               if (!condicionFound) return res.status(404).json({ message: `Condición accesorio ${condicionAccesorioE} no encontrada` });\r\n               newSale.condicionAccesorioE = condicionFound._id;\r\n          }\r\n\r\n          //Sucursal Obligado\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n          newSale.sucursalE = sucursalFound._id;\r\n\r\n          //Situacion Obligado\r\n          const situacionFound = await Situacion.findOne({ name: estadoVentaE });\r\n          if (!situacionFound) return res.status(404).json({ message: `Estado de Venta ${estadoVentaE} no encontrado` });\r\n          newSale.estadoVentaE = situacionFound._id;\r\n\r\n          //Item Null\r\n          if (estadoFacturacionE == null || estadoFacturacionE == undefined || estadoFacturacionE == \"\") {\r\n               newSale.estadoFacturacionE = null;\r\n          } else {\r\n               const facturacionFound = await StatusFacturacion.findOne({ name: estadoFacturacionE });\r\n               if (!facturacionFound) return res.status(404).json({ message: `Estado de Venta ${estadoFacturacionE} no encontrado` });\r\n               newSale.estadoFacturacionE = facturacionFound._id;\r\n          }\r\n\r\n          const accesorioFound = await AccesorioE.find({ cod_interno: { $in: accesoriosE } });\r\n          if (!accesorioFound) return res.status(404).json({ message: `Accesorio ${accesoriosE} no encontrado` });\r\n          newSale.accesoriosE = accesorioFound.map((a) => a._id);\r\n\r\n          const query = await newSale.save();\r\n\r\n          if (query) {\r\n               res.json({ message: \"Expediente creado con éxito\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.getAll = async (req, res) => {\r\n     try {\r\n          const query = await Sale.find()\r\n               .sort({\r\n                    fecha_cancelacion: -1,\r\n               })\r\n               .populate({\r\n                    path: \"vendedor\",\r\n                    select: \"name sucursal\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"model version cod_tdp\",\r\n                    populate: {\r\n                         path: \"model\",\r\n                         select: \"marca name avatar\",\r\n                         populate: {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"colorE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioFabricacionE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioModeloE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"ubicacionVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"financiamientoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"bancoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"cliente\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoOperacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoComprobanteE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVentaE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoFacturacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n                    strictPopulate: true,\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    all: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No Existen Expedientes\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getOneById = async (req, res) => {\r\n     const { filesId } = req.params;\r\n\r\n     try {\r\n          const query = await Sale.findById(filesId)\r\n               .populate({\r\n                    path: \"vendedor\",\r\n                    select: \"name sucursal\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"model version cod_tdp\",\r\n                    populate: {\r\n                         path: \"model\",\r\n                         select: \"marca name avatar\",\r\n                         populate: {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"colorE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioFabricacionE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioModeloE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"ubicacionVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"financiamientoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"bancoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"solicitudMAF\",\r\n                    select: \"nro_solicitud fecha_ingreso customer\",\r\n                    populate: {\r\n                         path: \"customer\",\r\n                         select: \"name document\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"cliente\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"campaniasTDPE\",\r\n                    select: \"cod_interno descripcion tipo oferta\",\r\n                    populate: {\r\n                         path: \"tipo\",\r\n                         select: \"name\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"campaniasMafE\",\r\n                    select: \"cod_interno descripcion tipo oferta\",\r\n                    populate: {\r\n                         path: \"tipo\",\r\n                         select: \"name\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"tipoOperacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoComprobanteE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({ path: \"estadoVentaE\", select: \"name document\" })\r\n               .populate({\r\n                    path: \"estadoFacturacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n                    strictPopulate: false,\r\n               });\r\n\r\n          if (query) {\r\n               res.json({ one: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe el Expediente\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.updateOneById = async (req, res) => {\r\n     const { salesId } = req.params;\r\n     const {\r\n          vendedor,\r\n          cliente,\r\n          auto,\r\n          serie_tdp,\r\n          colorE,\r\n          precio,\r\n          anioFabricacionE,\r\n          anioModeloE,\r\n          ubicacionVehiculoE,\r\n          ubicacion_vehiculo,\r\n          estadoVehiculoE,\r\n          estatus_vehiculo,\r\n          fecha_ciguena,\r\n          fecha_entrega,\r\n          financiamientoE,\r\n          bancoE,\r\n          solicitudMAF,\r\n          adelantosE,\r\n          campaniasTDPE,\r\n          ofertaTDPE,\r\n          campaniasMafE,\r\n          ofertaMafE,\r\n          isToyotaValue,\r\n          arrayToyotaValues,\r\n          descuento_autonort,\r\n          acuerdoTDP,\r\n          observacion_adv,\r\n          accesoriosE,\r\n          condicion_accesorios,\r\n          condicionAccesorioE,\r\n          tipoOperacionE,\r\n          tipoComprobanteE,\r\n          nro_comprobante,\r\n          fecha_comprobante,\r\n          sucursal_venta,\r\n          sucursalE,\r\n          estadoVentaE,\r\n          fecha_cancelacion,\r\n          estatus_venta,\r\n          fecha_facturacion_tdp,\r\n          estadoFacturacionE,\r\n          monto_facturado,\r\n     } = req.body;\r\n\r\n     // Opcionales\r\n     let colorNull = null;\r\n     let anioFNull = null;\r\n     let anioMNull = null;\r\n     let ubicacionNull = null;\r\n     let financiamientoNull = null;\r\n     let bancoNull = null;\r\n     let solicitudNull = null;\r\n     let condicionAccNull = null;\r\n     let comprobanteNull = null;\r\n     let facturacionNull = null;\r\n\r\n     try {\r\n          //Vendedor - Obligatorio\r\n          const sellerFound = await Seller.findOne({ name: vendedor });\r\n          if (!sellerFound) return res.status(404).json({ message: `Vendedor ${vendedor} no encontrado` });\r\n\r\n          //Cliente - Obligatorio\r\n          const customerFound = await Customer.findOne({ document: cliente });\r\n          if (!customerFound) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n\r\n          // Vehículo - Obligatorio\r\n          const autoFound = await Vehicle.findOne({ cod_tdp: auto });\r\n          if (!autoFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n\r\n          // Estado Vehicular - Obligatorio\r\n          const estadoVehicularFound = await Condicion.findOne({ name: estadoVehiculoE });\r\n          if (!estadoVehicularFound) return res.status(404).json({ message: `Condición ${estadoVehiculoE} no encontrado` });\r\n\r\n          // Operación - Obligatorio\r\n          const operacionFound = await Operacion.findOne({ name: tipoOperacionE });\r\n          if (!operacionFound) return res.status(404).json({ message: `Operación ${tipoOperacionE} no encontrado` });\r\n\r\n          // Sucursal - Obligatorio\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrado` });\r\n\r\n          // Situacion - Obligatorio\r\n          const situacionFound = await Situacion.findOne({ name: estadoVentaE });\r\n          if (!situacionFound) return res.status(404).json({ message: `Estado de venta ${estadoVentaE} no encontrado` });\r\n\r\n          // Color - Opcional\r\n          if (colorE == null || colorE == undefined || colorE == \"\") {\r\n               colorNull = null;\r\n          } else {\r\n               const colorFound = await Colores.findOne({ name: colorE });\r\n               if (!colorFound) return res.status(404).json({ message: `Color ${colorE} no encontrado` });\r\n               colorNull = colorFound._id;\r\n          }\r\n\r\n          // Año Fab - Opcional\r\n          if (anioFabricacionE == null || anioFabricacionE == undefined || anioFabricacionE == \"\") {\r\n               anioFNull = null;\r\n          } else {\r\n               const anioFound = await Anio.findOne({ name: anioFabricacionE });\r\n               if (!anioFound) return res.status(404).json({ message: `Año ${anioFabricacionE} no encontrado` });\r\n               anioFNull = anioFound._id;\r\n          }\r\n\r\n          // Año Mod - Opcional\r\n          if (anioModeloE == null || anioModeloE == undefined || anioModeloE == \"\") {\r\n               anioMNull = null;\r\n          } else {\r\n               const anioFound = await Anio.findOne({ name: anioModeloE });\r\n               if (!anioFound) return res.status(404).json({ message: `Año ${anioModeloE} no encontrado` });\r\n               anioMNull = anioFound._id;\r\n          }\r\n\r\n          // Ubicación Vehicular - Opcional\r\n          if (ubicacionVehiculoE == null || ubicacionVehiculoE == undefined || ubicacionVehiculoE == \"\") {\r\n               ubicacionNull = null;\r\n          } else {\r\n               const ubicacionFound = await Ubicacion.findOne({ name: ubicacionVehiculoE });\r\n               if (!ubicacionFound) return res.status(404).json({ message: `Ubicación ${ubicacionVehiculoE} no encontrada` });\r\n               ubicacionNull = ubicacionFound._id;\r\n          }\r\n\r\n          // Financiamiento - Opcional\r\n          if (financiamientoE == null || financiamientoE == undefined || financiamientoE == \"\") {\r\n               financiamientoNull = null;\r\n          } else {\r\n               const financiamientoFound = await Financiamiento.findOne({ name: financiamientoE });\r\n               if (!financiamientoFound) return res.status(404).json({ message: `Financiamiento ${financiamientoE} no encontrado` });\r\n               financiamientoNull = financiamientoFound._id;\r\n          }\r\n\r\n          // Banco - Opcional\r\n          if (bancoE == null || bancoE == undefined || bancoE == \"\") {\r\n               bancoNull = null;\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: bancoE });\r\n               if (!bancoFound) return res.status(404).json({ message: `Banco ${bancoE} no encontrado` });\r\n               bancoNull = bancoFound._id;\r\n          }\r\n\r\n          // Solicitud MAF - Opcional\r\n          if (solicitudMAF == null || solicitudMAF == undefined || solicitudMAF == \"\") {\r\n               solicitudNull = null;\r\n          } else {\r\n               const mafFound = await Maf.findOne({ nro_solicitud: solicitudMAF });\r\n               if (!mafFound) return res.status(404).json({ message: `Solicitud ${solicitudMAF} no encontrada` });\r\n               solicitudNull = mafFound._id;\r\n          }\r\n\r\n          // Campania TDP - Opcional\r\n          const campaniaTDPFound = await Campania.find({ cod_interno: { $in: campaniasTDPE } });\r\n          if (!campaniaTDPFound) return res.status(404).json({ message: `Campaña TDP ${campaniasTDPE} no encontrada` });\r\n\r\n          // Campania MAF - Opcional\r\n          const campaniaMAFFound = await Campania.find({ cod_interno: { $in: campaniasMafE } });\r\n          if (!campaniaMAFFound) return res.status(404).json({ message: `Campaña TDP ${campaniasMafE} no encontrada` });\r\n\r\n          // Accesorios - Opcional\r\n          const accesoriosFound = await AccesorioE.find({ cod_interno: { $in: accesoriosE } });\r\n          if (!accesoriosFound) return res.status(404).json({ message: `Accesorio ${accesoriosE} no encontrado` });\r\n\r\n          // Condicion Accesorio - Opcional\r\n          if (condicionAccesorioE == null || condicionAccesorioE == undefined || condicionAccesorioE == \"\") {\r\n               condicionAccNull = null;\r\n          } else {\r\n               const condicionFound = await CondicionAccesorio.findOne({ name: condicionAccesorioE });\r\n               if (!condicionFound) return res.status(404).json({ message: `Condición accesorio ${condicionAccesorioE} no encontrada` });\r\n               condicionAccNull = condicionFound._id;\r\n          }\r\n\r\n          // Tipo Comprobante - Opcional\r\n          if (tipoComprobanteE == null || tipoComprobanteE == undefined || tipoComprobanteE == \"\") {\r\n               comprobanteNull = null;\r\n          } else {\r\n               const comprobanteFound = await TipoComprobante.findOne({ name: tipoComprobanteE });\r\n               if (!comprobanteFound) return res.status(404).json({ message: `Tipo comprobante ${tipoComprobanteE} no encontrado` });\r\n               comprobanteNull = comprobanteFound._id;\r\n          }\r\n\r\n          // Estado Facturacion - Opcional\r\n          if (estadoFacturacionE == null || estadoFacturacionE == undefined || estadoFacturacionE == \"\") {\r\n               facturacionNull = null;\r\n          } else {\r\n               const facturacionFound = await StatusFacturacion.findOne({ name: estadoFacturacionE });\r\n               if (!facturacionFound) return res.status(404).json({ message: `Facturación ${estadoFacturacionE} no encontrado` });\r\n               facturacionNull = facturacionFound._id;\r\n          }\r\n\r\n          const query = await Sale.findByIdAndUpdate(salesId, {\r\n               serie_tdp,\r\n               precio,\r\n               ubicacion_vehiculo,\r\n               estatus_vehiculo,\r\n               fecha_ciguena,\r\n               fecha_entrega,\r\n               adelantosE,\r\n               isToyotaValue,\r\n               arrayToyotaValues,\r\n               descuento_autonort,\r\n               acuerdoTDP,\r\n               observacion_adv,\r\n               condicion_accesorios,\r\n               nro_comprobante,\r\n               fecha_comprobante,\r\n               sucursal_venta,\r\n               fecha_cancelacion,\r\n               estatus_venta,\r\n               fecha_facturacion_tdp,\r\n               monto_facturado,\r\n               vendedor: sellerFound._id,\r\n               cliente: customerFound._id,\r\n               auto: autoFound._id,\r\n               estadoVehiculoE: estadoVehicularFound._id,\r\n               tipoOperacionE: operacionFound._id,\r\n               sucursalE: sucursalFound._id,\r\n               estadoVentaE: situacionFound._id,\r\n               colorE: colorNull,\r\n               anioFabricacionE: anioFNull,\r\n               anioModeloE: anioMNull,\r\n               ubicacionVehiculoE: ubicacionNull,\r\n               financiamientoE: financiamientoNull,\r\n               bancoE: bancoNull,\r\n               solicitudMAF: solicitudNull,\r\n               campaniasTDPE: campaniaTDPFound.map((a) => a.id),\r\n               campaniasMafE: campaniaMAFFound.map((a) => a._id),\r\n               accesoriosE: accesoriosFound.map((a) => a._id),\r\n               condicionAccesorioE: condicionAccNull,\r\n               tipoComprobanteE: comprobanteNull,\r\n               ofertaTDPE,\r\n               ofertaMafE,\r\n               estadoFacturacionE: facturacionNull,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Expediente actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe expediente a actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\n/* saleController.updateSaleById = async (req, res) => {\r\n     const { salesId } = req.params;\r\n\r\n     const {\r\n          vendedor,\r\n          cliente,\r\n          auto,\r\n          serie_tdp,\r\n          color,\r\n          precio,\r\n          anio_fabricacion,\r\n          anio_modelo,\r\n          ubicacion_vehiculo,\r\n          fecha_ciguena,\r\n          fecha_entrega,\r\n          estatus_vehiculo,\r\n          tipo_financiamiento,\r\n          entidad_bancaria,\r\n          sustento,\r\n          fecha_sustento,\r\n          monto_aprobado,\r\n          oficina,\r\n          ejecutivo,\r\n          montoAdelanto1,\r\n          fechaAdelanto1,\r\n          montoAdelanto2,\r\n          fechaAdelanto2,\r\n          montoAdelanto3,\r\n          fechaAdelanto3,\r\n          montoAdelanto4,\r\n          fechaAdelanto4,\r\n          montoAdelanto5,\r\n          fechaAdelanto5,\r\n          montoAdelanto6,\r\n          fechaAdelanto6,\r\n          montoAdelanto7,\r\n          fechaAdelanto7,\r\n          montoAdelanto8,\r\n          fechaAdelanto8,\r\n          campanias,\r\n          adicional,\r\n          descuento_autonort,\r\n          observacion_adv,\r\n          accesorios,\r\n          condicion_accesorios,\r\n          fecha_facturacion_tdp,\r\n          estatus_facturacion,\r\n          monto_facturado,\r\n          tipo_operacion,\r\n          fecha_inicio_reserva,\r\n          fecha_fin_reserva,\r\n          tipo_comprobante,\r\n          nro_comprobante,\r\n          fecha_comprobante,\r\n          estatus_venta,\r\n          sucursal_venta,\r\n          fecha_cancelacion,\r\n     } = req.body;\r\n\r\n     try {\r\n          //Seller\r\n          const foundSeller = await Seller.find({\r\n               name: {\r\n                    $in: vendedor,\r\n               },\r\n          });\r\n\r\n          //Vehicle\r\n          const foundVehicle = await Vehicle.find({\r\n               cod_tdp: {\r\n                    $in: auto,\r\n               },\r\n          });\r\n\r\n          //Customer\r\n          const foundCustomer = await Customer.find({\r\n               document: {\r\n                    $in: cliente,\r\n               },\r\n          });\r\n\r\n          //Campaign\r\n          const foundCampaign = await Campaign.find({\r\n               name: {\r\n                    $in: campanias,\r\n               },\r\n          });\r\n\r\n          //Adicional\r\n          const foundAdicional = await Adicional.find({\r\n               name: {\r\n                    $in: adicional,\r\n               },\r\n          });\r\n\r\n          //Props\r\n          const foundProps = await Props.find({\r\n               name: {\r\n                    $in: accesorios,\r\n               },\r\n          });\r\n\r\n          const ventaActualizada = await Sale.findByIdAndUpdate(salesId, {\r\n               vendedor: foundSeller.map((seller) => seller._id),\r\n               cliente: foundCustomer.map((customer) => customer._id),\r\n               auto: foundVehicle.map((vehicle) => vehicle._id),\r\n               serie_tdp,\r\n               color,\r\n               precio,\r\n               anio_fabricacion,\r\n               anio_modelo,\r\n               ubicacion_vehiculo,\r\n               fecha_ciguena,\r\n               fecha_entrega,\r\n               estatus_vehiculo,\r\n               tipo_financiamiento,\r\n               entidad_bancaria,\r\n               sustento,\r\n               fecha_sustento,\r\n               monto_aprobado,\r\n               oficina,\r\n               ejecutivo,\r\n               montoAdelanto1,\r\n               fechaAdelanto1,\r\n               montoAdelanto2,\r\n               fechaAdelanto2,\r\n               montoAdelanto3,\r\n               fechaAdelanto3,\r\n               montoAdelanto4,\r\n               fechaAdelanto4,\r\n               montoAdelanto5,\r\n               fechaAdelanto5,\r\n               montoAdelanto6,\r\n               fechaAdelanto6,\r\n               montoAdelanto7,\r\n               fechaAdelanto7,\r\n               montoAdelanto8,\r\n               fechaAdelanto8,\r\n               campanias: foundCampaign.map((campaign) => campaign._id),\r\n               adicional: foundAdicional.map((adicional) => adicional._id),\r\n               descuento_autonort,\r\n               observacion_adv,\r\n               accesorios: foundProps.map((props) => props._id),\r\n               condicion_accesorios,\r\n               fecha_facturacion_tdp,\r\n               estatus_facturacion,\r\n               monto_facturado,\r\n               tipo_operacion,\r\n               fecha_inicio_reserva,\r\n               fecha_fin_reserva,\r\n               tipo_comprobante,\r\n               nro_comprobante,\r\n               fecha_comprobante,\r\n               estatus_venta,\r\n               sucursal_venta,\r\n               fecha_cancelacion,\r\n          });\r\n\r\n          if (ventaActualizada) {\r\n               res.json({\r\n                    message: \"Expediente actualizado con éxito\",\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existe Expediente a actualizar\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n}; */\r\n\r\nsaleController.deleteOneById = async (req, res) => {\r\n     const { salesId } = req.params;\r\n\r\n     try {\r\n          const query = await Sale.findByIdAndDelete(salesId);\r\n\r\n          if (query) {\r\n               res.json({ message: \"Expediente eliminado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe Expediente a eliminar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\n// Verificar hacía abajo\r\n\r\n/* saleController.getUnidadesBySucursalFecha = async (req, res) => {\r\n     const { sucursalE, start, end } = req.body;\r\n\r\n     const filtro = {\r\n          sucursal_venta: sucursalE,\r\n          fecha_cancelacion: {\r\n               $gte: new Date(start),\r\n               $lte: new Date(end),\r\n          },\r\n     };\r\n\r\n     try {\r\n          const query = await Sale.aggregate([\r\n               { $match: filtro },\r\n               {\r\n                    $group: {\r\n                         _id: { estado: \"$estatus_venta\" },\r\n                         num_ventas: { $sum: 1 },\r\n                    },\r\n               },\r\n               { $sort: { num_ventas: -1 } },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, ranking: query });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n}; */\r\n\r\n/* saleController.getConteoUnidadesByEstado = async (req, res) => {\r\n     const { estado, ubicacion, isEntregado, start, end } = req.body;\r\n     let query = null;\r\n\r\n     try {\r\n          if (isEntregado) {\r\n               query = await Sale.find({\r\n                    ubicacion_vehiculo: { $regex: \".*\" + ubicacion + \".*\" },\r\n                    fecha_entrega: {\r\n                         $gte: new Date(start),\r\n                         $lte: new Date(end),\r\n                    },\r\n               }).countDocuments();\r\n          } else {\r\n               query = await Sale.find({\r\n                    estatus_venta: { $regex: \".*\" + estado + \".*\" },\r\n                    fecha_cancelacion: {\r\n                         $gte: new Date(start),\r\n                         $lte: new Date(end),\r\n                    },\r\n               }).countDocuments();\r\n          }\r\n          if (query >= 0) {\r\n               res.json({ count: query });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n}; */\r\n\r\n/* saleController.getRankingUnidadesByUbicacion = async (req, res) => {\r\n     const { ubicacion, start, end } = req.body;\r\n\r\n     try {\r\n          const filtro = {\r\n               ubicacion_vehiculo: ubicacion,\r\n               fecha_entrega: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$sucursal_venta\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, ranking: query });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n}; */\r\n\r\n/* saleController.UnidadesLibres = async (req, res) => {\r\n     const { estado, tramite } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               estatus_venta: estado,\r\n               pasoaTramite: tramite,\r\n          })\r\n               .populate(\"vendedor\")\r\n               .populate(\"auto\")\r\n               .populate(\"cliente\")\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate(\"empleado\");\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    files: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${estado}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n}; */\r\n\r\n/* saleController.UnidadesByStatus = async (req, res) => {\r\n     const { estado, tramite, sucursal } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               estatus_venta: estado,\r\n               pasoaTramite: tramite,\r\n               sucursal_venta: sucursal,\r\n          })\r\n               .sort({\r\n                    fecha_cancelacion: \"desc\",\r\n               })\r\n               .populate(\"vendedor\")\r\n               .populate(\"auto\")\r\n               .populate(\"cliente\")\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate(\"empleado\");\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    files: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${estado}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n}; */\r\n\r\nsaleController.UnidadesBySucursalyFecha = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: { $regex: \".*\" + sucursal + \".*\" },\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .sort({\r\n                    fecha_cancelacion: -1,\r\n               })\r\n               .populate({\r\n                    path: \"vendedor\",\r\n                    select: \"name sucursal\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"model version cod_tdp\",\r\n                    populate: {\r\n                         path: \"model\",\r\n                         select: \"marca name avatar\",\r\n                         populate: {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"colorE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioFabricacionE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioModeloE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"ubicacionVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"financiamientoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"bancoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"cliente\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoOperacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoComprobanteE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVentaE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoFacturacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No Existen Unidades\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesByStatus = async (req, res) => {\r\n     const { estado, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.where({\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).countDocuments();\r\n          //console.log(consulta)\r\n          if (query >= 0) {\r\n               res.json({\r\n                    count: query,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesBySucursalFecha = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: sucursal,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).countDocuments();\r\n          if (query >= 0) {\r\n               res.json({\r\n                    count: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen unidades\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesBySucursalStatusFecha = async (req, res) => {\r\n     const { sucursal, status, start, end } = req.body;\r\n     //console.log(start, end);\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: status,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).countDocuments();\r\n          //console.log('Query: ', query);\r\n          if (query >= 0) {\r\n               res.json({\r\n                    count: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${status} en ${sucursal}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoVentasByVendedor = async (req, res) => {\r\n     const { sucursal, estatus, start, end } = req.body;\r\n     // console.log(req.body)\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estatus,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const consulta = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$vendedor\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         num_ventas: -1,\r\n                    },\r\n               },\r\n          ]);\r\n          if (consulta.length > 0) {\r\n               res.json(consulta);\r\n          } else {\r\n               return res.status(201).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.totalAccesoriosBySucursalMes = async (req, res) => {\r\n     const { sucursal, estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               // {$unwind: {path: '$accesorios'}},\r\n               {\r\n                    $group: {\r\n                         _id: \"$accesorios\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                         // totalProps: {$sum: '$accesorios.precio'}\r\n                    },\r\n               },\r\n               // {$addFields: {totalProps: {$sum: '$accesorios.precio'}}}\r\n          ]);\r\n\r\n          const arrNoVacios = query.filter((element) => element._id.length > 0);\r\n          // console.log(arrNoVacios);\r\n\r\n          let arr = [];\r\n          await arrNoVacios.forEach(async (element) => {\r\n               let abc = {};\r\n\r\n               let query = await Props.findById(element._id);\r\n\r\n               abc.precio = query.precio;\r\n               abc.qty = element.qty;\r\n\r\n               arr.push(abc);\r\n          });\r\n\r\n          // await console.log(arr);\r\n\r\n          let total = arrNoVacios.reduce((acc, curVal) => {\r\n               return acc + curVal.qty;\r\n               // let prop = await Props.findById(curVal._id);\r\n               // let valor = prop.precio * curVal.qty;\r\n               // let sumatoria = acc + valor;\r\n               // console.log(sumatoria);\r\n               // return sumatoria;\r\n          }, 0);\r\n\r\n          // let total = query.map( async (elemento) => {\r\n          //     try {\r\n          //         if(elemento._id.length > 0){\r\n          //             // console.log('Elemento:',elemento);\r\n          //             let id = elemento._id;\r\n\r\n          //             let prop = await Props.findById(id);\r\n          //             // console.log(prop);\r\n          //             let sumatoria = 0;\r\n\r\n          //             let valor = elemento.qty * prop.precio;\r\n\r\n          //             sumatoria += valor;\r\n\r\n          //             // console.log('suma:',sumatoria);\r\n          //             return {...sumatoria};\r\n          //         }\r\n\r\n          //     } catch (err) {\r\n          //         console.log(err);\r\n          //     }\r\n          // });\r\n\r\n          if (query.length >= 0) {\r\n               res.json({\r\n                    total: total,\r\n                    deploy: arrNoVacios,\r\n               });\r\n          } else {\r\n               return res.status(201).json({\r\n                    message: \"No existe Importe\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n     }\r\n};\r\n\r\nsaleController.conteoVentasByModelo = async (req, res) => {\r\n     const { sucursal, estatus, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estatus,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$auto\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.rankingVentasByModelo = async (req, res) => {\r\n     const { estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$auto\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         num_ventas: -1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesEntregadasBySucursal = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.where({\r\n               sucursal_venta: { $regex: \".*\" + sucursal + \".*\" },\r\n               fecha_entrega: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .find()\r\n               .countDocuments();\r\n          if (query >= 0) {\r\n               res.json({\r\n                    total: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades entregadas en ${sucursal}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoVehiculosEntregadosByFecha = async (req, res) => {\r\n     const { ubicacion, start, end } = req.body;\r\n     try {\r\n          const filtro = {\r\n               ubicacion_vehiculo: ubicacion,\r\n               fecha_entrega: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$sucursal_venta\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.obtenerToyotaValues = async (req, res) => {\r\n     const { sucursal, statusVenta, start, end } = req.body;\r\n     const objetos = [];\r\n     try {\r\n          // const query = await Sale.where({ sucursal_venta: sucursal, estatus_venta: statusVenta, fecha_cancelacion: { $gte: new Date(start), $lte: new Date(end) }, adicional: { $gte: 1 } }).find();\r\n          const query = await Sale.where({\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: statusVenta,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .find()\r\n               .populate(\"adicional vendedor auto\");\r\n          // const values = await query.adicional\r\n          // console.log(query)\r\n          query.forEach((element) => {\r\n               console.log(element);\r\n               if (element.adicional.length > 0) {\r\n                    let perra = {};\r\n                    perra.sucursal = element.sucursal_venta;\r\n                    perra.serie = element.serie_tdp;\r\n                    perra.adicional = element.adicional;\r\n                    perra.vendedor = element.vendedor;\r\n                    perra.vehiculo = element.auto;\r\n                    objetos.push(perra);\r\n               }\r\n          });\r\n          if (query >= 0) {\r\n               res.json({\r\n                    nro_adicionales: objetos.length,\r\n                    toyota_values: objetos,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${statusVenta} en ${sucursal} con Toyota Value en ese rango de fechas`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err.message);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getVehiclesySeller = async (req, res) => {\r\n     const { vendedor, start, end } = req.body;\r\n\r\n     try {\r\n          const sellerFound = await Seller.findOne({\r\n               name: vendedor,\r\n          });\r\n\r\n          const filtro = {\r\n               vendedor: sellerFound._id,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$auto\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          } else {\r\n               return res.staus(201).json({\r\n                    message: \"No existen Ventas en este Vendedor\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err.message);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getSalesBySeller = async (req, res) => {\r\n     const { vendedor, start, end } = req.body;\r\n\r\n     try {\r\n          const sellerFound = await Seller.findOne({\r\n               name: vendedor,\r\n          });\r\n\r\n          const filtro = {\r\n               vendedor: sellerFound._id,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$estatus_venta\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          } else {\r\n               return res.staus(201).json({\r\n                    message: \"No existen Ventas en este Vendedor\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getRankingByStatusyFecha = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const consulta = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$estatus_venta\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         num_ventas: -1,\r\n                    },\r\n               },\r\n          ]);\r\n          if (consulta.length > 0) {\r\n               res.json({\r\n                    total: consulta.length,\r\n                    ranking: consulta,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.probandoRanking = async (req, res) => {\r\n     const { sucursal, estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: {\r\n                              seller: \"$vendedor\",\r\n                              month: {\r\n                                   $month: \"$fecha_cancelacion\",\r\n                              },\r\n                         },\r\n                         count: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         _id: 1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          } else {\r\n               return res.status(201).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n     }\r\n};\r\n\r\nsaleController.conteoVentasBySucursalyEstadoyMarca = async (req, res) => {\r\n     const { sucursal, estado, marca, start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).populate({\r\n               path: \"auto\",\r\n               select: \"cod_tdp model version\",\r\n               populate: {\r\n                    path: \"model\",\r\n                    select: \"avatar name marca\",\r\n                    populate: {\r\n                         path: \"marca\",\r\n                         select: \"avatar name\",\r\n                         match: {\r\n                              name: marca,\r\n                         },\r\n                    },\r\n               },\r\n          });\r\n\r\n          // console.log(query.length);\r\n          let obj = query.filter((b) => b.auto.model.marca);\r\n\r\n          if (obj.length > 0) {\r\n               // console.log(obj);\r\n               res.json({\r\n                    total: obj.length,\r\n                    deploy: obj,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.rankingVentasByFinanciamiento = async (req, res) => {\r\n     const { sucursal, estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: {\r\n                    $regex: \".*\" + sucursal + \".*\",\r\n               },\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$tipo_financiamiento\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         qty: -1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.rankingVentasByEntidad = async (req, res) => {\r\n     const { sucursal, estado, financiamiento, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: {\r\n                    $regex: \".*\" + sucursal + \".*\",\r\n               },\r\n               estatus_venta: estado,\r\n               tipo_financiamiento: financiamiento,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$entidad_bancaria\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         qty: -1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nexport default saleController;\r\n"],"file":"sale.controller.js"}