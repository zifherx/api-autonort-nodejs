{"version":3,"file":"sale.controller.js","names":["saleController","createOne","req","res","body","vendedor","cliente","auto","serie_tdp","colorE","precio","anioFabricacionE","anioModeloE","ubicacionVehiculoE","estadoVehiculoE","fecha_ciguena","fecha_entrega","financiamientoE","bancoE","solicitudMAF","adelantosE","campaniasTDPE","ofertaTDPE","campaniasMafE","ofertaMafE","isToyotaValue","arrayToyotaValues","descuento_autonort","acuerdoTDP","observacion_adv","accesoriosE","condicionAccesorioE","condicion_accesorios","tipoOperacionE","tipoComprobanteE","nro_comprobante","fecha_comprobante","sucursal_venta","sucursalE","estadoVentaE","fecha_cancelacion","fecha_facturacion_tdp","estadoFacturacionE","monto_facturado","createdBy","fechaCreacionS","newSale","Sale","Seller","findOne","name","sellerFound","status","json","message","_id","Vehicle","cod_tdp","carFound","Customer","document","customerFound","undefined","Colores","colorFound","Anio","anioFFound","anioMFound","Ubicacion","ubicacionFound","Condicion","estadoVehicularFound","Financiamiento","financiamientoFound","Banco","bancoFound","Maf","nro_solicitud","mafFound","Campania","find","cod_interno","$in","campaniaTDPFound","map","a","campaniaMAFFound","Operacion","operacionFound","User","username","userFound","TipoComprobante","comprobanteFound","CondicionAccesorio","condicionFound","Sucursal","sucursalFound","Situacion","situacionFound","StatusFacturacion","facturacionFound","AccesorioE","accesorioFound","save","query","console","log","getAll","sort","populate","path","select","strictPopulate","length","total","all","getOneById","filesId","params","findById","one","updateOneById","salesId","ubicacion_vehiculo","estatus_vehiculo","estatus_venta","colorNull","anioFNull","anioMNull","ubicacionNull","financiamientoNull","bancoNull","solicitudNull","condicionAccNull","comprobanteNull","facturacionNull","autoFound","anioFound","accesoriosFound","findByIdAndUpdate","id","deleteOneById","findByIdAndDelete","getUnidadesBySucursalFecha","start","end","filtro","$gte","Date","$lte","aggregate","$match","$group","estado","num_ventas","$sum","$sort","ranking","getConteoUnidadesByEstado","ubicacion","isEntregado","$regex","countDocuments","count","getRankingUnidadesByUbicacion","qty","UnidadesLibres","tramite","pasoaTramite","files","UnidadesByStatus","sucursal","UnidadesBySucursalyFecha","conteoUnidadesByStatus","where","conteoUnidadesBySucursalFecha","conteoUnidadesBySucursalStatusFecha","conteoVentasByVendedor","estatus","filter","consulta","totalAccesoriosBySucursalMes","arrNoVacios","element","arr","forEach","abc","Props","push","reduce","acc","curVal","deploy","conteoVentasByModelo","rankingVentasByModelo","conteoUnidadesEntregadasBySucursal","conteoVehiculosEntregadosByFecha","obtenerToyotaValues","statusVenta","objetos","adicional","perra","serie","vehiculo","nro_adicionales","toyota_values","getVehiclesySeller","staus","getSalesBySeller","getRankingByStatusyFecha","probandoRanking","seller","month","$month","conteoVentasBySucursalyEstadoyMarca","marca","match","obj","b","model","rankingVentasByFinanciamiento","rankingVentasByEntidad","financiamiento","tipo_financiamiento"],"sources":["../../src/controllers/sale.controller.js"],"sourcesContent":["import Sale from \"../models/Sale\";\r\nimport Vehicle from \"../models/Vehicle\";\r\nimport Seller from \"../models/Seller\";\r\nimport Customer from \"../models/Customer\";\r\nimport Colores from \"../models/Colores\";\r\nimport Ubicacion from \"../models/Ubicacion\";\r\nimport Financiamiento from \"../models/Financiamiento\";\r\nimport Banco from \"../models/Banco\";\r\nimport Campania from \"../models/Campania\";\r\nimport Maf from \"../models/Maf\";\r\nimport Operacion from \"../models/Operacion\";\r\nimport TipoComprobante from \"../models/TipoComprobante\";\r\nimport Situacion from \"../models/Situacion\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport StatusFacturacion from \"../models/StatusFacturacion\";\r\nimport User from \"../models/User\";\r\nimport AccesorioE from \"../models/AccesorioE\";\r\nimport CondicionAccesorio from \"../models/CondicionAccesorio\";\r\nimport Anio from \"../models/Anio\";\r\nimport Condicion from \"../models/Condicion\";\r\n\r\nconst saleController = {};\r\n\r\nsaleController.createOne = async (req, res) => {\r\n     const {\r\n          vendedor,\r\n          cliente,\r\n          auto,\r\n          serie_tdp,\r\n          colorE,\r\n          precio,\r\n          anioFabricacionE,\r\n          anioModeloE,\r\n          ubicacionVehiculoE,\r\n          estadoVehiculoE,\r\n          fecha_ciguena,\r\n          fecha_entrega,\r\n          financiamientoE,\r\n          bancoE,\r\n          solicitudMAF,\r\n          adelantosE,\r\n          campaniasTDPE,\r\n          ofertaTDPE,\r\n          campaniasMafE,\r\n          ofertaMafE,\r\n          isToyotaValue,\r\n          arrayToyotaValues,\r\n          descuento_autonort,\r\n          acuerdoTDP,\r\n          observacion_adv,\r\n          accesoriosE,\r\n          condicionAccesorioE,\r\n          condicion_accesorios,\r\n          tipoOperacionE,\r\n          tipoComprobanteE,\r\n          nro_comprobante,\r\n          fecha_comprobante,\r\n          sucursal_venta,\r\n          sucursalE,\r\n          estadoVentaE,\r\n          fecha_cancelacion,\r\n          fecha_facturacion_tdp,\r\n          estadoFacturacionE,\r\n          monto_facturado,\r\n          createdBy,\r\n          fechaCreacionS,\r\n     } = req.body;\r\n\r\n     try {\r\n          const newSale = new Sale({\r\n               serie_tdp,\r\n               precio,\r\n               fecha_ciguena,\r\n               fecha_entrega,\r\n               adelantosE,\r\n               ofertaTDPE,\r\n               ofertaMafE,\r\n               isToyotaValue,\r\n               arrayToyotaValues,\r\n               descuento_autonort,\r\n               acuerdoTDP,\r\n               observacion_adv,\r\n               condicion_accesorios,\r\n               fecha_facturacion_tdp,\r\n               monto_facturado,\r\n               nro_comprobante,\r\n               fecha_comprobante,\r\n               fecha_cancelacion,\r\n               sucursal_venta,\r\n               fechaCreacionS,\r\n          });\r\n\r\n          //Seller Obligado\r\n          const sellerFound = await Seller.findOne({ name: vendedor });\r\n          if (!sellerFound) return res.status(404).json({ message: `Vendedor ${vendedor} no encontrado` });\r\n          newSale.vendedor = sellerFound._id;\r\n\r\n          //Vehicle Obligado\r\n          const carFound = await Vehicle.findOne({ cod_tdp: auto });\r\n          if (!carFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n          newSale.auto = carFound._id;\r\n\r\n          //Customer Obligado\r\n          const customerFound = await Customer.findOne({ document: cliente });\r\n          if (!customerFound) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n          newSale.cliente = customerFound._id;\r\n\r\n          //Item Null\r\n          if (colorE == null || colorE == undefined || colorE == \"\") {\r\n               newSale.colorE = null;\r\n          } else {\r\n               const colorFound = await Colores.findOne({ name: colorE });\r\n               if (!colorFound) return res.status(404).json({ message: `Cliente ${colorE} no encontrado` });\r\n               newSale.colorE = colorFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (anioFabricacionE == null || anioFabricacionE == undefined || anioFabricacionE == \"\") {\r\n               newSale.anioFabricacionE = null;\r\n          } else {\r\n               const anioFFound = await Anio.findOne({ name: anioFabricacionE });\r\n               if (!anioFFound) return res.status(404).json({ message: `Año Fabricación ${anioFabricacionE} no encontrado` });\r\n               newSale.anioFabricacionE = anioFFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (anioModeloE == null || anioModeloE == undefined || anioModeloE == \"\") {\r\n               newSale.anioModeloE = null;\r\n          } else {\r\n               const anioMFound = await Anio.findOne({ name: anioModeloE });\r\n               if (!anioMFound) return res.status(404).json({ message: `Año Modelo ${anioModeloE} no encontrado` });\r\n               newSale.anioModeloE = anioMFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (ubicacionVehiculoE == null || ubicacionVehiculoE == undefined || ubicacionVehiculoE == \"\") {\r\n               newSale.ubicacionVehiculoE = null;\r\n          } else {\r\n               const ubicacionFound = await Ubicacion.findOne({ name: ubicacionVehiculoE });\r\n               if (!ubicacionFound) return res.status(404).json({ message: `Ubicación ${ubicacionVehiculoE} no encontrado` });\r\n               newSale.ubicacionVehiculoE = ubicacionFound._id;\r\n          }\r\n\r\n          //Condición obligada\r\n          const estadoVehicularFound = await Condicion.findOne({ name: estadoVehiculoE });\r\n          if (!estadoVehicularFound) return res.status(404).json({ message: `Estado vehicular ${estadoVehiculoE} no encontrado` });\r\n          newSale.estadoVehiculoE = estadoVehicularFound._id;\r\n\r\n          //Item Null\r\n          if (financiamientoE == null || financiamientoE == undefined || financiamientoE == \"\") {\r\n               newSale.financiamientoE = null;\r\n          } else {\r\n               const financiamientoFound = await Financiamiento.findOne({ name: financiamientoE });\r\n               if (!financiamientoFound) return res.status(404).json({ message: `Financiamiento ${financiamientoE} no encontrado` });\r\n               newSale.financiamientoE = financiamientoFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (bancoE == null || bancoE == undefined || bancoE == \"\") {\r\n               newSale.bancoE = null;\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: bancoE });\r\n               if (!bancoFound) return res.status(404).json({ message: `Banco ${bancoE} no encontrado` });\r\n               newSale.bancoE = bancoFound._id;\r\n          }\r\n\r\n          //Item Null\r\n          if (solicitudMAF == null || solicitudMAF == undefined || solicitudMAF == \"\") {\r\n               newSale.solicitudMAF = null;\r\n          } else {\r\n               const mafFound = await Maf.findOne({ nro_solicitud: solicitudMAF });\r\n               if (!mafFound) return res.status(404).json({ message: `Solicitud ${solicitudMAF} no encontrada` });\r\n               newSale.solicitudMAF = mafFound._id;\r\n          }\r\n\r\n          const campaniaTDPFound = await Campania.find({ cod_interno: { $in: campaniasTDPE } });\r\n          if (!campaniaTDPFound) return res.status(404).json({ message: `Campaña TDP ${campaniasTDPE} no encontrada` });\r\n          newSale.campaniasTDPE = campaniaTDPFound.map((a) => a._id);\r\n\r\n          const campaniaMAFFound = await Campania.find({ cod_interno: { $in: campaniasMafE } });\r\n          if (!campaniaMAFFound) return res.status(404).json({ message: `Campaña MAF ${campaniasMafE} no encontrada` });\r\n          newSale.campaniasMafE = campaniaMAFFound.map((a) => a._id);\r\n\r\n          //Operacion obligada\r\n          const operacionFound = await Operacion.findOne({ name: tipoOperacionE });\r\n          if (!operacionFound) return res.status(404).json({ message: `Tipo operación ${tipoOperacionE} no encontrada` });\r\n          newSale.tipoOperacionE = operacionFound._id;\r\n\r\n          //User Obligado\r\n          const userFound = await User.findOne({ username: createdBy });\r\n          if (!userFound) return res.status(404).json({ message: `Colaborador ${createdBy} no encontrado` });\r\n          newSale.createdBy = userFound._id;\r\n\r\n          //Item Null\r\n          if (tipoComprobanteE == null || tipoComprobanteE == undefined || tipoComprobanteE == \"\") {\r\n               newSale.tipoComprobanteE = null;\r\n          } else {\r\n               const comprobanteFound = await TipoComprobante.findOne({ name: tipoComprobanteE });\r\n               if (!comprobanteFound) return res.status(404).json({ message: `Tipo comprobante ${tipoComprobanteE} no encontrado` });\r\n               newSale.tipoComprobanteE = comprobanteFound._id;\r\n          }\r\n\r\n          // Item Null\r\n          if (condicionAccesorioE == null || condicionAccesorioE == undefined || condicionAccesorioE == \"\") {\r\n               newSale.condicionAccesorioE = null;\r\n          } else {\r\n               const condicionFound = await CondicionAccesorio.findOne({ name: condicionAccesorioE });\r\n               if (!condicionFound) return res.status(404).json({ message: `Condición accesorio ${condicionAccesorioE} no encontrada` });\r\n               newSale.condicionAccesorioE = condicionFound._id;\r\n          }\r\n\r\n          //Sucursal Obligado\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n          newSale.sucursalE = sucursalFound._id;\r\n\r\n          //Situacion Obligado\r\n          const situacionFound = await Situacion.findOne({ name: estadoVentaE });\r\n          if (!situacionFound) return res.status(404).json({ message: `Estado de Venta ${estadoVentaE} no encontrado` });\r\n          newSale.estadoVentaE = situacionFound._id;\r\n\r\n          //Item Null\r\n          if (estadoFacturacionE == null || estadoFacturacionE == undefined || estadoFacturacionE == \"\") {\r\n               newSale.estadoFacturacionE = null;\r\n          } else {\r\n               const facturacionFound = await StatusFacturacion.findOne({ name: estadoFacturacionE });\r\n               if (!facturacionFound) return res.status(404).json({ message: `Estado de Venta ${estadoFacturacionE} no encontrado` });\r\n               newSale.estadoFacturacionE = facturacionFound._id;\r\n          }\r\n\r\n          const accesorioFound = await AccesorioE.find({ cod_interno: { $in: accesoriosE } });\r\n          if (!accesorioFound) return res.status(404).json({ message: `Accesorio ${accesoriosE} no encontrado` });\r\n          newSale.accesoriosE = accesorioFound.map((a) => a._id);\r\n\r\n          const query = await newSale.save();\r\n\r\n          if (query) {\r\n               res.json({ message: \"Expediente creado con éxito\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.getAll = async (req, res) => {\r\n     try {\r\n          const query = await Sale.find()\r\n               .sort({\r\n                    fecha_cancelacion: -1,\r\n               })\r\n               .populate({\r\n                    path: \"vendedor\",\r\n                    select: \"name sucursal\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"model version cod_tdp\",\r\n                    populate: {\r\n                         path: \"model\",\r\n                         select: \"marca name avatar\",\r\n                         populate: {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"colorE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioFabricacionE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioModeloE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"ubicacionVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"financiamientoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"bancoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"cliente\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoOperacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoComprobanteE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVentaE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoFacturacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n                    strictPopulate: true,\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    all: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No Existen Expedientes\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getOneById = async (req, res) => {\r\n     const { filesId } = req.params;\r\n\r\n     try {\r\n          const query = await Sale.findById(filesId)\r\n               .populate({\r\n                    path: \"vendedor\",\r\n                    select: \"name sucursal\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"model version cod_tdp\",\r\n                    populate: {\r\n                         path: \"model\",\r\n                         select: \"marca name avatar\",\r\n                         populate: {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"colorE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioFabricacionE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioModeloE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"ubicacionVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"financiamientoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"bancoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"solicitudMAF\",\r\n                    select: \"nro_solicitud fecha_ingreso customer\",\r\n                    populate: {\r\n                         path: \"customer\",\r\n                         select: \"name document\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"cliente\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"campaniasTDPE\",\r\n                    select: \"cod_interno descripcion tipo oferta\",\r\n                    populate: {\r\n                         path: \"tipo\",\r\n                         select: \"name\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"campaniasMafE\",\r\n                    select: \"cod_interno descripcion tipo oferta\",\r\n                    populate: {\r\n                         path: \"tipo\",\r\n                         select: \"name\",\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"tipoOperacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoComprobanteE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({ path: \"estadoVentaE\", select: \"name document\" })\r\n               .populate({\r\n                    path: \"estadoFacturacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               })\r\n               .populate({\r\n                    path: \"createdBy\",\r\n                    select: \"name username\",\r\n                    strictPopulate: false,\r\n               });\r\n\r\n          if (query) {\r\n               res.json({ one: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe el Expediente\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.updateOneById = async (req, res) => {\r\n     const { salesId } = req.params;\r\n     const {\r\n          vendedor,\r\n          cliente,\r\n          auto,\r\n          serie_tdp,\r\n          colorE,\r\n          precio,\r\n          anioFabricacionE,\r\n          anioModeloE,\r\n          ubicacionVehiculoE,\r\n          ubicacion_vehiculo,\r\n          estadoVehiculoE,\r\n          estatus_vehiculo,\r\n          fecha_ciguena,\r\n          fecha_entrega,\r\n          financiamientoE,\r\n          bancoE,\r\n          solicitudMAF,\r\n          adelantosE,\r\n          campaniasTDPE,\r\n          ofertaTDPE,\r\n          campaniasMafE,\r\n          ofertaMafE,\r\n          isToyotaValue,\r\n          arrayToyotaValues,\r\n          descuento_autonort,\r\n          acuerdoTDP,\r\n          observacion_adv,\r\n          accesoriosE,\r\n          condicion_accesorios,\r\n          condicionAccesorioE,\r\n          tipoOperacionE,\r\n          tipoComprobanteE,\r\n          nro_comprobante,\r\n          fecha_comprobante,\r\n          sucursal_venta,\r\n          sucursalE,\r\n          estadoVentaE,\r\n          fecha_cancelacion,\r\n          estatus_venta,\r\n          fecha_facturacion_tdp,\r\n          estadoFacturacionE,\r\n          monto_facturado,\r\n     } = req.body;\r\n\r\n     // Opcionales\r\n     let colorNull = null;\r\n     let anioFNull = null;\r\n     let anioMNull = null;\r\n     let ubicacionNull = null;\r\n     let financiamientoNull = null;\r\n     let bancoNull = null;\r\n     let solicitudNull = null;\r\n     let condicionAccNull = null;\r\n     let comprobanteNull = null;\r\n     let facturacionNull = null;\r\n\r\n     try {\r\n          //Vendedor - Obligatorio\r\n          const sellerFound = await Seller.findOne({ name: vendedor });\r\n          if (!sellerFound) return res.status(404).json({ message: `Vendedor ${vendedor} no encontrado` });\r\n\r\n          //Cliente - Obligatorio\r\n          const customerFound = await Customer.findOne({ document: cliente });\r\n          if (!customerFound) return res.status(404).json({ message: `Cliente ${cliente} no encontrado` });\r\n\r\n          // Vehículo - Obligatorio\r\n          const autoFound = await Vehicle.findOne({ cod_tdp: auto });\r\n          if (!autoFound) return res.status(404).json({ message: `Vehículo ${auto} no encontrado` });\r\n\r\n          // Estado Vehicular - Obligatorio\r\n          const estadoVehicularFound = await Condicion.findOne({ name: estadoVehiculoE });\r\n          if (!estadoVehicularFound) return res.status(404).json({ message: `Condición ${estadoVehiculoE} no encontrado` });\r\n\r\n          // Operación - Obligatorio\r\n          const operacionFound = await Operacion.findOne({ name: tipoOperacionE });\r\n          if (!operacionFound) return res.status(404).json({ message: `Operación ${tipoOperacionE} no encontrado` });\r\n\r\n          // Sucursal - Obligatorio\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrado` });\r\n\r\n          // Situacion - Obligatorio\r\n          const situacionFound = await Situacion.findOne({ name: estadoVentaE });\r\n          if (!situacionFound) return res.status(404).json({ message: `Estado de venta ${estadoVentaE} no encontrado` });\r\n\r\n          // Color - Opcional\r\n          if (colorE == null || colorE == undefined || colorE == \"\") {\r\n               colorNull = null;\r\n          } else {\r\n               const colorFound = await Colores.findOne({ name: colorE });\r\n               if (!colorFound) return res.status(404).json({ message: `Color ${colorE} no encontrado` });\r\n               colorNull = colorFound._id;\r\n          }\r\n\r\n          // Año Fab - Opcional\r\n          if (anioFabricacionE == null || anioFabricacionE == undefined || anioFabricacionE == \"\") {\r\n               anioFNull = null;\r\n          } else {\r\n               const anioFound = await Anio.findOne({ name: anioFabricacionE });\r\n               if (!anioFound) return res.status(404).json({ message: `Año ${anioFabricacionE} no encontrado` });\r\n               anioFNull = anioFound._id;\r\n          }\r\n\r\n          // Año Mod - Opcional\r\n          if (anioModeloE == null || anioModeloE == undefined || anioModeloE == \"\") {\r\n               anioMNull = null;\r\n          } else {\r\n               const anioFound = await Anio.findOne({ name: anioModeloE });\r\n               if (!anioFound) return res.status(404).json({ message: `Año ${anioModeloE} no encontrado` });\r\n               anioMNull = anioFound._id;\r\n          }\r\n\r\n          // Ubicación Vehicular - Opcional\r\n          if (ubicacionVehiculoE == null || ubicacionVehiculoE == undefined || ubicacionVehiculoE == \"\") {\r\n               ubicacionNull = null;\r\n          } else {\r\n               const ubicacionFound = await Ubicacion.findOne({ name: ubicacionVehiculoE });\r\n               if (!ubicacionFound) return res.status(404).json({ message: `Ubicación ${ubicacionVehiculoE} no encontrada` });\r\n               ubicacionNull = ubicacionFound._id;\r\n          }\r\n\r\n          // Financiamiento - Opcional\r\n          if (financiamientoE == null || financiamientoE == undefined || financiamientoE == \"\") {\r\n               financiamientoNull = null;\r\n          } else {\r\n               const financiamientoFound = await Financiamiento.findOne({ name: financiamientoE });\r\n               if (!financiamientoFound) return res.status(404).json({ message: `Financiamiento ${financiamientoE} no encontrado` });\r\n               financiamientoNull = financiamientoFound._id;\r\n          }\r\n\r\n          // Banco - Opcional\r\n          if (bancoE == null || bancoE == undefined || bancoE == \"\") {\r\n               bancoNull = null;\r\n          } else {\r\n               const bancoFound = await Banco.findOne({ name: bancoE });\r\n               if (!bancoFound) return res.status(404).json({ message: `Banco ${bancoE} no encontrado` });\r\n               bancoNull = bancoFound._id;\r\n          }\r\n\r\n          // Solicitud MAF - Opcional\r\n          if (solicitudMAF == null || solicitudMAF == undefined || solicitudMAF == \"\") {\r\n               solicitudNull = null;\r\n          } else {\r\n               const mafFound = await Maf.findOne({ nro_solicitud: solicitudMAF });\r\n               if (!mafFound) return res.status(404).json({ message: `Solicitud ${solicitudMAF} no encontrada` });\r\n               solicitudNull = mafFound._id;\r\n          }\r\n\r\n          // Campania TDP - Opcional\r\n          const campaniaTDPFound = await Campania.find({ cod_interno: { $in: campaniasTDPE } });\r\n          if (!campaniaTDPFound) return res.status(404).json({ message: `Campaña TDP ${campaniasTDPE} no encontrada` });\r\n\r\n          // Campania MAF - Opcional\r\n          const campaniaMAFFound = await Campania.find({ cod_interno: { $in: campaniasMafE } });\r\n          if (!campaniaMAFFound) return res.status(404).json({ message: `Campaña TDP ${campaniasMafE} no encontrada` });\r\n\r\n          // Accesorios - Opcional\r\n          const accesoriosFound = await AccesorioE.find({ cod_interno: { $in: accesoriosE } });\r\n          if (!accesoriosFound) return res.status(404).json({ message: `Accesorio ${accesoriosE} no encontrado` });\r\n\r\n          // Condicion Accesorio - Opcional\r\n          if (condicionAccesorioE == null || condicionAccesorioE == undefined || condicionAccesorioE == \"\") {\r\n               condicionAccNull = null;\r\n          } else {\r\n               const condicionFound = await CondicionAccesorio.findOne({ name: condicionAccesorioE });\r\n               if (!condicionFound) return res.status(404).json({ message: `Condición accesorio ${condicionAccesorioE} no encontrada` });\r\n               condicionAccNull = condicionFound._id;\r\n          }\r\n\r\n          // Tipo Comprobante - Opcional\r\n          if (tipoComprobanteE == null || tipoComprobanteE == undefined || tipoComprobanteE == \"\") {\r\n               comprobanteNull = null;\r\n          } else {\r\n               const comprobanteFound = await TipoComprobante.findOne({ name: tipoComprobanteE });\r\n               if (!comprobanteFound) return res.status(404).json({ message: `Tipo comprobante ${tipoComprobanteE} no encontrado` });\r\n               comprobanteNull = comprobanteFound._id;\r\n          }\r\n\r\n          // Estado Facturacion - Opcional\r\n          if (estadoFacturacionE == null || estadoFacturacionE == undefined || estadoFacturacionE == \"\") {\r\n               facturacionNull = null;\r\n          } else {\r\n               const facturacionFound = await StatusFacturacion.findOne({ name: estadoFacturacionE });\r\n               if (!facturacionFound) return res.status(404).json({ message: `Facturación ${estadoFacturacionE} no encontrado` });\r\n               facturacionNull = facturacionFound._id;\r\n          }\r\n\r\n          const query = await Sale.findByIdAndUpdate(salesId, {\r\n               serie_tdp,\r\n               precio,\r\n               ubicacion_vehiculo,\r\n               estatus_vehiculo,\r\n               fecha_ciguena,\r\n               fecha_entrega,\r\n               adelantosE,\r\n               isToyotaValue,\r\n               arrayToyotaValues,\r\n               descuento_autonort,\r\n               acuerdoTDP,\r\n               observacion_adv,\r\n               condicion_accesorios,\r\n               nro_comprobante,\r\n               fecha_comprobante,\r\n               sucursal_venta,\r\n               fecha_cancelacion,\r\n               estatus_venta,\r\n               fecha_facturacion_tdp,\r\n               monto_facturado,\r\n               vendedor: sellerFound._id,\r\n               cliente: customerFound._id,\r\n               auto: autoFound._id,\r\n               estadoVehiculoE: estadoVehicularFound._id,\r\n               tipoOperacionE: operacionFound._id,\r\n               sucursalE: sucursalFound._id,\r\n               estadoVentaE: situacionFound._id,\r\n               colorE: colorNull,\r\n               anioFabricacionE: anioFNull,\r\n               anioModeloE: anioMNull,\r\n               ubicacionVehiculoE: ubicacionNull,\r\n               financiamientoE: financiamientoNull,\r\n               bancoE: bancoNull,\r\n               solicitudMAF: solicitudNull,\r\n               campaniasTDPE: campaniaTDPFound.map((a) => a.id),\r\n               campaniasMafE: campaniaMAFFound.map((a) => a._id),\r\n               accesoriosE: accesoriosFound.map((a) => a._id),\r\n               condicionAccesorioE: condicionAccNull,\r\n               tipoComprobanteE: comprobanteNull,\r\n               ofertaTDPE,\r\n               ofertaMafE,\r\n               estadoFacturacionE: facturacionNull,\r\n          });\r\n\r\n          if (query) {\r\n               res.json({ message: \"Expediente actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe expediente a actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\n/* saleController.updateSaleById = async (req, res) => {\r\n     const { salesId } = req.params;\r\n\r\n     const {\r\n          vendedor,\r\n          cliente,\r\n          auto,\r\n          serie_tdp,\r\n          color,\r\n          precio,\r\n          anio_fabricacion,\r\n          anio_modelo,\r\n          ubicacion_vehiculo,\r\n          fecha_ciguena,\r\n          fecha_entrega,\r\n          estatus_vehiculo,\r\n          tipo_financiamiento,\r\n          entidad_bancaria,\r\n          sustento,\r\n          fecha_sustento,\r\n          monto_aprobado,\r\n          oficina,\r\n          ejecutivo,\r\n          montoAdelanto1,\r\n          fechaAdelanto1,\r\n          montoAdelanto2,\r\n          fechaAdelanto2,\r\n          montoAdelanto3,\r\n          fechaAdelanto3,\r\n          montoAdelanto4,\r\n          fechaAdelanto4,\r\n          montoAdelanto5,\r\n          fechaAdelanto5,\r\n          montoAdelanto6,\r\n          fechaAdelanto6,\r\n          montoAdelanto7,\r\n          fechaAdelanto7,\r\n          montoAdelanto8,\r\n          fechaAdelanto8,\r\n          campanias,\r\n          adicional,\r\n          descuento_autonort,\r\n          observacion_adv,\r\n          accesorios,\r\n          condicion_accesorios,\r\n          fecha_facturacion_tdp,\r\n          estatus_facturacion,\r\n          monto_facturado,\r\n          tipo_operacion,\r\n          fecha_inicio_reserva,\r\n          fecha_fin_reserva,\r\n          tipo_comprobante,\r\n          nro_comprobante,\r\n          fecha_comprobante,\r\n          estatus_venta,\r\n          sucursal_venta,\r\n          fecha_cancelacion,\r\n     } = req.body;\r\n\r\n     try {\r\n          //Seller\r\n          const foundSeller = await Seller.find({\r\n               name: {\r\n                    $in: vendedor,\r\n               },\r\n          });\r\n\r\n          //Vehicle\r\n          const foundVehicle = await Vehicle.find({\r\n               cod_tdp: {\r\n                    $in: auto,\r\n               },\r\n          });\r\n\r\n          //Customer\r\n          const foundCustomer = await Customer.find({\r\n               document: {\r\n                    $in: cliente,\r\n               },\r\n          });\r\n\r\n          //Campaign\r\n          const foundCampaign = await Campaign.find({\r\n               name: {\r\n                    $in: campanias,\r\n               },\r\n          });\r\n\r\n          //Adicional\r\n          const foundAdicional = await Adicional.find({\r\n               name: {\r\n                    $in: adicional,\r\n               },\r\n          });\r\n\r\n          //Props\r\n          const foundProps = await Props.find({\r\n               name: {\r\n                    $in: accesorios,\r\n               },\r\n          });\r\n\r\n          const ventaActualizada = await Sale.findByIdAndUpdate(salesId, {\r\n               vendedor: foundSeller.map((seller) => seller._id),\r\n               cliente: foundCustomer.map((customer) => customer._id),\r\n               auto: foundVehicle.map((vehicle) => vehicle._id),\r\n               serie_tdp,\r\n               color,\r\n               precio,\r\n               anio_fabricacion,\r\n               anio_modelo,\r\n               ubicacion_vehiculo,\r\n               fecha_ciguena,\r\n               fecha_entrega,\r\n               estatus_vehiculo,\r\n               tipo_financiamiento,\r\n               entidad_bancaria,\r\n               sustento,\r\n               fecha_sustento,\r\n               monto_aprobado,\r\n               oficina,\r\n               ejecutivo,\r\n               montoAdelanto1,\r\n               fechaAdelanto1,\r\n               montoAdelanto2,\r\n               fechaAdelanto2,\r\n               montoAdelanto3,\r\n               fechaAdelanto3,\r\n               montoAdelanto4,\r\n               fechaAdelanto4,\r\n               montoAdelanto5,\r\n               fechaAdelanto5,\r\n               montoAdelanto6,\r\n               fechaAdelanto6,\r\n               montoAdelanto7,\r\n               fechaAdelanto7,\r\n               montoAdelanto8,\r\n               fechaAdelanto8,\r\n               campanias: foundCampaign.map((campaign) => campaign._id),\r\n               adicional: foundAdicional.map((adicional) => adicional._id),\r\n               descuento_autonort,\r\n               observacion_adv,\r\n               accesorios: foundProps.map((props) => props._id),\r\n               condicion_accesorios,\r\n               fecha_facturacion_tdp,\r\n               estatus_facturacion,\r\n               monto_facturado,\r\n               tipo_operacion,\r\n               fecha_inicio_reserva,\r\n               fecha_fin_reserva,\r\n               tipo_comprobante,\r\n               nro_comprobante,\r\n               fecha_comprobante,\r\n               estatus_venta,\r\n               sucursal_venta,\r\n               fecha_cancelacion,\r\n          });\r\n\r\n          if (ventaActualizada) {\r\n               res.json({\r\n                    message: \"Expediente actualizado con éxito\",\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existe Expediente a actualizar\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n}; */\r\n\r\nsaleController.deleteOneById = async (req, res) => {\r\n     const { salesId } = req.params;\r\n\r\n     try {\r\n          const query = await Sale.findByIdAndDelete(salesId);\r\n\r\n          if (query) {\r\n               res.json({ message: \"Expediente eliminado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe Expediente a eliminar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\n// Verificar hacía abajo\r\n\r\nsaleController.getUnidadesBySucursalFecha = async (req, res) => {\r\n     const { sucursalE, start, end } = req.body;\r\n\r\n     const filtro = {\r\n          sucursal_venta: sucursalE,\r\n          fecha_cancelacion: {\r\n               $gte: new Date(start),\r\n               $lte: new Date(end),\r\n          },\r\n     };\r\n\r\n     try {\r\n          const query = await Sale.aggregate([\r\n               { $match: filtro },\r\n               {\r\n                    $group: {\r\n                         _id: { estado: \"$estatus_venta\" },\r\n                         num_ventas: { $sum: 1 },\r\n                    },\r\n               },\r\n               { $sort: { num_ventas: -1 } },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, ranking: query });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.getConteoUnidadesByEstado = async (req, res) => {\r\n     const { estado, ubicacion, isEntregado, start, end } = req.body;\r\n     let query = null;\r\n\r\n     try {\r\n          if (isEntregado) {\r\n               query = await Sale.find({\r\n                    ubicacion_vehiculo: { $regex: \".*\" + ubicacion + \".*\" },\r\n                    fecha_entrega: {\r\n                         $gte: new Date(start),\r\n                         $lte: new Date(end),\r\n                    },\r\n               }).countDocuments();\r\n          } else {\r\n               query = await Sale.find({\r\n                    estatus_venta: { $regex: \".*\" + estado + \".*\" },\r\n                    fecha_cancelacion: {\r\n                         $gte: new Date(start),\r\n                         $lte: new Date(end),\r\n                    },\r\n               }).countDocuments();\r\n          }\r\n          if (query >= 0) {\r\n               res.json({ count: query });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.getRankingUnidadesByUbicacion = async (req, res) => {\r\n     const { ubicacion, start, end } = req.body;\r\n\r\n     try {\r\n          const filtro = {\r\n               ubicacion_vehiculo: ubicacion,\r\n               fecha_entrega: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$sucursal_venta\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, ranking: query });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.UnidadesLibres = async (req, res) => {\r\n     const { estado, tramite } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               estatus_venta: estado,\r\n               pasoaTramite: tramite,\r\n          })\r\n               .populate(\"vendedor\")\r\n               .populate(\"auto\")\r\n               .populate(\"cliente\")\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate(\"empleado\");\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    files: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${estado}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.UnidadesByStatus = async (req, res) => {\r\n     const { estado, tramite, sucursal } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               estatus_venta: estado,\r\n               pasoaTramite: tramite,\r\n               sucursal_venta: sucursal,\r\n          })\r\n               .sort({\r\n                    fecha_cancelacion: \"desc\",\r\n               })\r\n               .populate(\"vendedor\")\r\n               .populate(\"auto\")\r\n               .populate(\"cliente\")\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate(\"empleado\");\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    files: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${estado}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.UnidadesBySucursalyFecha = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: { $regex: \".*\" + sucursal + \".*\" },\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .sort({\r\n                    fecha_cancelacion: -1,\r\n               })\r\n               .populate({\r\n                    path: \"vendedor\",\r\n                    select: \"name sucursal\",\r\n               })\r\n               .populate({\r\n                    path: \"auto\",\r\n                    select: \"model version cod_tdp\",\r\n                    populate: {\r\n                         path: \"model\",\r\n                         select: \"marca name avatar\",\r\n                         populate: {\r\n                              path: \"marca\",\r\n                              select: \"name avatar\",\r\n                         },\r\n                    },\r\n               })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"colorE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioFabricacionE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"anioModeloE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"ubicacionVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVehiculoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"financiamientoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"bancoE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"cliente\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoOperacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"tipoComprobanteE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoVentaE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoFacturacionE\",\r\n                    select: \"name document\",\r\n               })\r\n               .populate(\"campanias\")\r\n               .populate(\"adicional\")\r\n               .populate(\"accesorios\")\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No Existen Unidades\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesByStatus = async (req, res) => {\r\n     const { estado, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.where({\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).countDocuments();\r\n          //console.log(consulta)\r\n          if (query >= 0) {\r\n               res.json({\r\n                    count: query,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesBySucursalFecha = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: sucursal,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).countDocuments();\r\n          if (query >= 0) {\r\n               res.json({\r\n                    count: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen unidades\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesBySucursalStatusFecha = async (req, res) => {\r\n     const { sucursal, status, start, end } = req.body;\r\n     //console.log(start, end);\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: status,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).countDocuments();\r\n          //console.log('Query: ', query);\r\n          if (query >= 0) {\r\n               res.json({\r\n                    count: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${status} en ${sucursal}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoVentasByVendedor = async (req, res) => {\r\n     const { sucursal, estatus, start, end } = req.body;\r\n     // console.log(req.body)\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estatus,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const consulta = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$vendedor\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         num_ventas: -1,\r\n                    },\r\n               },\r\n          ]);\r\n          if (consulta.length > 0) {\r\n               res.json(consulta);\r\n          } else {\r\n               return res.status(201).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.totalAccesoriosBySucursalMes = async (req, res) => {\r\n     const { sucursal, estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               // {$unwind: {path: '$accesorios'}},\r\n               {\r\n                    $group: {\r\n                         _id: \"$accesorios\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                         // totalProps: {$sum: '$accesorios.precio'}\r\n                    },\r\n               },\r\n               // {$addFields: {totalProps: {$sum: '$accesorios.precio'}}}\r\n          ]);\r\n\r\n          const arrNoVacios = query.filter((element) => element._id.length > 0);\r\n          // console.log(arrNoVacios);\r\n\r\n          let arr = [];\r\n          await arrNoVacios.forEach(async (element) => {\r\n               let abc = {};\r\n\r\n               let query = await Props.findById(element._id);\r\n\r\n               abc.precio = query.precio;\r\n               abc.qty = element.qty;\r\n\r\n               arr.push(abc);\r\n          });\r\n\r\n          // await console.log(arr);\r\n\r\n          let total = arrNoVacios.reduce((acc, curVal) => {\r\n               return acc + curVal.qty;\r\n               // let prop = await Props.findById(curVal._id);\r\n               // let valor = prop.precio * curVal.qty;\r\n               // let sumatoria = acc + valor;\r\n               // console.log(sumatoria);\r\n               // return sumatoria;\r\n          }, 0);\r\n\r\n          // let total = query.map( async (elemento) => {\r\n          //     try {\r\n          //         if(elemento._id.length > 0){\r\n          //             // console.log('Elemento:',elemento);\r\n          //             let id = elemento._id;\r\n\r\n          //             let prop = await Props.findById(id);\r\n          //             // console.log(prop);\r\n          //             let sumatoria = 0;\r\n\r\n          //             let valor = elemento.qty * prop.precio;\r\n\r\n          //             sumatoria += valor;\r\n\r\n          //             // console.log('suma:',sumatoria);\r\n          //             return {...sumatoria};\r\n          //         }\r\n\r\n          //     } catch (err) {\r\n          //         console.log(err);\r\n          //     }\r\n          // });\r\n\r\n          if (query.length >= 0) {\r\n               res.json({\r\n                    total: total,\r\n                    deploy: arrNoVacios,\r\n               });\r\n          } else {\r\n               return res.status(201).json({\r\n                    message: \"No existe Importe\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n     }\r\n};\r\n\r\nsaleController.conteoVentasByModelo = async (req, res) => {\r\n     const { sucursal, estatus, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estatus,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$auto\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.rankingVentasByModelo = async (req, res) => {\r\n     const { estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$auto\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         num_ventas: -1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoUnidadesEntregadasBySucursal = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const query = await Sale.where({\r\n               sucursal_venta: { $regex: \".*\" + sucursal + \".*\" },\r\n               fecha_entrega: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .find()\r\n               .countDocuments();\r\n          if (query >= 0) {\r\n               res.json({\r\n                    total: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades entregadas en ${sucursal}`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.conteoVehiculosEntregadosByFecha = async (req, res) => {\r\n     const { ubicacion, start, end } = req.body;\r\n     try {\r\n          const filtro = {\r\n               ubicacion_vehiculo: ubicacion,\r\n               fecha_entrega: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$sucursal_venta\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.obtenerToyotaValues = async (req, res) => {\r\n     const { sucursal, statusVenta, start, end } = req.body;\r\n     const objetos = [];\r\n     try {\r\n          // const query = await Sale.where({ sucursal_venta: sucursal, estatus_venta: statusVenta, fecha_cancelacion: { $gte: new Date(start), $lte: new Date(end) }, adicional: { $gte: 1 } }).find();\r\n          const query = await Sale.where({\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: statusVenta,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          })\r\n               .find()\r\n               .populate(\"adicional vendedor auto\");\r\n          // const values = await query.adicional\r\n          // console.log(query)\r\n          query.forEach((element) => {\r\n               console.log(element);\r\n               if (element.adicional.length > 0) {\r\n                    let perra = {};\r\n                    perra.sucursal = element.sucursal_venta;\r\n                    perra.serie = element.serie_tdp;\r\n                    perra.adicional = element.adicional;\r\n                    perra.vendedor = element.vendedor;\r\n                    perra.vehiculo = element.auto;\r\n                    objetos.push(perra);\r\n               }\r\n          });\r\n          if (query >= 0) {\r\n               res.json({\r\n                    nro_adicionales: objetos.length,\r\n                    toyota_values: objetos,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: `No existen Unidades ${statusVenta} en ${sucursal} con Toyota Value en ese rango de fechas`,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err.message);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getVehiclesySeller = async (req, res) => {\r\n     const { vendedor, start, end } = req.body;\r\n\r\n     try {\r\n          const sellerFound = await Seller.findOne({\r\n               name: vendedor,\r\n          });\r\n\r\n          const filtro = {\r\n               vendedor: sellerFound._id,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$auto\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          } else {\r\n               return res.staus(201).json({\r\n                    message: \"No existen Ventas en este Vendedor\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err.message);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getSalesBySeller = async (req, res) => {\r\n     const { vendedor, start, end } = req.body;\r\n\r\n     try {\r\n          const sellerFound = await Seller.findOne({\r\n               name: vendedor,\r\n          });\r\n\r\n          const filtro = {\r\n               vendedor: sellerFound._id,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filtro,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$estatus_venta\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          } else {\r\n               return res.staus(201).json({\r\n                    message: \"No existen Ventas en este Vendedor\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.getRankingByStatusyFecha = async (req, res) => {\r\n     const { sucursal, start, end } = req.body;\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const consulta = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$estatus_venta\",\r\n                         num_ventas: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         num_ventas: -1,\r\n                    },\r\n               },\r\n          ]);\r\n          if (consulta.length > 0) {\r\n               res.json({\r\n                    total: consulta.length,\r\n                    ranking: consulta,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.probandoRanking = async (req, res) => {\r\n     const { sucursal, estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: {\r\n                              seller: \"$vendedor\",\r\n                              month: {\r\n                                   $month: \"$fecha_cancelacion\",\r\n                              },\r\n                         },\r\n                         count: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         _id: 1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    deploy: query,\r\n               });\r\n          } else {\r\n               return res.status(201).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n     }\r\n};\r\n\r\nsaleController.conteoVentasBySucursalyEstadoyMarca = async (req, res) => {\r\n     const { sucursal, estado, marca, start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Sale.find({\r\n               sucursal_venta: sucursal,\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          }).populate({\r\n               path: \"auto\",\r\n               select: \"cod_tdp model version\",\r\n               populate: {\r\n                    path: \"model\",\r\n                    select: \"avatar name marca\",\r\n                    populate: {\r\n                         path: \"marca\",\r\n                         select: \"avatar name\",\r\n                         match: {\r\n                              name: marca,\r\n                         },\r\n                    },\r\n               },\r\n          });\r\n\r\n          // console.log(query.length);\r\n          let obj = query.filter((b) => b.auto.model.marca);\r\n\r\n          if (obj.length > 0) {\r\n               // console.log(obj);\r\n               res.json({\r\n                    total: obj.length,\r\n                    deploy: obj,\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.rankingVentasByFinanciamiento = async (req, res) => {\r\n     const { sucursal, estado, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: {\r\n                    $regex: \".*\" + sucursal + \".*\",\r\n               },\r\n               estatus_venta: estado,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$tipo_financiamiento\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         qty: -1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nsaleController.rankingVentasByEntidad = async (req, res) => {\r\n     const { sucursal, estado, financiamiento, start, end } = req.body;\r\n\r\n     try {\r\n          const filter = {\r\n               sucursal_venta: {\r\n                    $regex: \".*\" + sucursal + \".*\",\r\n               },\r\n               estatus_venta: estado,\r\n               tipo_financiamiento: financiamiento,\r\n               fecha_cancelacion: {\r\n                    $gte: new Date(start),\r\n                    $lte: new Date(end),\r\n               },\r\n          };\r\n          const query = await Sale.aggregate([\r\n               {\r\n                    $match: filter,\r\n               },\r\n               {\r\n                    $group: {\r\n                         _id: \"$entidad_bancaria\",\r\n                         qty: {\r\n                              $sum: 1,\r\n                         },\r\n                    },\r\n               },\r\n               {\r\n                    $sort: {\r\n                         qty: -1,\r\n                    },\r\n               },\r\n          ]);\r\n\r\n          if (query.length > 0) {\r\n               res.json({\r\n                    total: query.length,\r\n                    ranking: query,\r\n               });\r\n          } else {\r\n               return res.status(404).json({\r\n                    message: \"No existen Ventas aún\",\r\n               });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({\r\n               message: err.message,\r\n          });\r\n     }\r\n};\r\n\r\nexport default saleController;\r\n"],"mappings":"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"}