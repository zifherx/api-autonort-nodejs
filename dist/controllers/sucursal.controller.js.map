{"version":3,"sources":["../../src/controllers/sucursal.controller.js"],"names":["getSucursales","req","res","Sucursal","find","sort","name","query","length","json","status","message","console","log","getSucursalById","sucursalId","params","findById","getSucursalByActivo","estado","createSucursal","body","objeto","save","updateSucursal","findByIdAndUpdate","deleteSucursal","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Sucursal from \"../models/Sucursal\";\r\n\r\nexport const getSucursales = async(req, res) => {\r\n    try {\r\n        const query = await Sucursal.find().sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            res.status(404).json({ message: 'No existen Sucursales' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSucursalById = async(req, res) => {\r\n    const { sucursalId } = req.params;\r\n    try {\r\n        const query = await Sucursal.findById(sucursalId);\r\n        if (query) {\r\n            res.json(query);\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sucursales' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSucursalByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Sucursal.find({ estado: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            res.status(404).json({ message: 'No hay Sucursales activas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createSucursal = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const objeto = new Sucursal({ name, estado });\r\n\r\n        const query = await objeto.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Sucursal creada con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSucursal = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { sucursalId } = req.params;\r\n    try {\r\n\r\n        const query = await Sucursal.findByIdAndUpdate(sucursalId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Sucursal actualizada con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sucursal a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSucursal = async(req, res) => {\r\n    const { sucursalId } = req.params;\r\n    try {\r\n        const query = await Sucursal.findByIdAndDelete(sucursalId);\r\n\r\n        if (query) {\r\n            res.json({ message: 'Sucursal eliminada con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sucursal a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"sucursal.controller.js"}