{"version":3,"sources":["../../src/controllers/moduloG.controller.js"],"names":["moduloController","getAll","req","res","ModuloG","find","sort","name","populate","path","select","query","length","json","total","all","status","message","console","log","getOneById","moduloId","params","findById","one","getAllByActivos","estado","total_active","all_active","getAllActiveByMenu","menuG","body","MenuG","findOne","menuFound","_id","createOne","icon","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import MenuG from \"../models/MenuG\";\r\nimport ModuloG from \"../models/ModuloG\";\r\n\r\nconst moduloController = {};\r\n\r\nmoduloController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await ModuloG.find()\r\n        .sort({ name: 1 })\r\n        .populate({\r\n            path: 'menuG',\r\n            select: 'name icon'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen módulos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmoduloController.getOneById = async(req, res) => {\r\n    const { moduloId } = req.params;\r\n    try {\r\n        const query = await ModuloG.findById(moduloId)\r\n        .populate({\r\n            path: 'menuG',\r\n            select: 'name icon'\r\n        });\r\n\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe módulo' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmoduloController.getAllByActivos = async(req, res) => {\r\n    try {\r\n        const query = await ModuloG.find({ estado: true })\r\n        .sort({ name: 1 })\r\n        .populate({\r\n            path: 'menuG',\r\n            select: 'name icon'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen módulos activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmoduloController.getAllActiveByMenu = async(req, res) => {\r\n    const {menuG} = req.body;\r\n\r\n    try {\r\n        \r\n        const menuFound = await MenuG.findOne({name: menuG});\r\n        if(!menuFound) return res.status(404).json({message: `Menú ${menuG} no encontrado`});\r\n\r\n        const query = await ModuloG.find({\r\n            menuG: menuFound._id,\r\n            estado: true\r\n        })\r\n        .sort({ name: 1 })\r\n        .populate({\r\n            path: 'menuG',\r\n            select: 'name icon'\r\n        });\r\n\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen módulos activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmoduloController.createOne = async(req, res) => {\r\n    const { menuG, name, icon, estado } = req.body;\r\n    try {\r\n        const obj = new ModuloG({ name, icon, estado });\r\n\r\n        const menuFound = await MenuG.findOne({name: menuG});\r\n        if(!menuFound) return res.status(404).json({message: `Menu ${menuG} no encontrado`});\r\n        obj.menuG = menuFound._id;\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Módulo creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmoduloController.updateOneById = async(req, res) => {\r\n    const { menuG, name, estado } = req.body;\r\n    const { moduloId } = req.params;\r\n\r\n    try {\r\n\r\n        const menuFound = await MenuG.findOne({name: menuG});\r\n        if(!menuFound) return res.status(404).json({message: `Menu ${menuG} no encontrado`});\r\n\r\n        const query = await ModuloG.findByIdAndUpdate(moduloId, { \r\n            menuG: menuFound._id,\r\n            name, \r\n            estado \r\n        });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Módulo actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe módulo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmoduloController.deleteOneById = async(req, res) => {\r\n    const { moduloId } = req.params;\r\n    try {\r\n        const query = await ModuloG.findByIdAndDelete(moduloId);\r\n        if (query) {\r\n            res.json({ message: 'Módulo eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe módulo a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default moduloController;"],"file":"moduloG.controller.js"}