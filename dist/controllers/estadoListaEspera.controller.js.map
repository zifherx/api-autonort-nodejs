{"version":3,"file":"estadoListaEspera.controller.js","names":["estadoController","getAll","req","res","EstadoListaEspera","find","sort","valor","query","length","json","total","all","status","message","console","log","getOneById","itemId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","name","objeto","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"sources":["../../src/controllers/estadoListaEspera.controller.js"],"sourcesContent":["import EstadoListaEspera from \"../models/EstadoListaEspera\";\r\n\r\nconst estadoController = {};\r\n\r\nestadoController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await EstadoListaEspera.find().sort({ valor: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen estados' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nestadoController.getOneById = async(req, res) => {\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await EstadoListaEspera.findById(itemId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nestadoController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await EstadoListaEspera.find({ estado: true }).sort({ valor: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No hay estados activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nestadoController.createOne = async(req, res) => {\r\n    const { name,valor, estado } = req.body;\r\n    try {\r\n        const objeto = new EstadoListaEspera({ name, valor, estado });\r\n        const query = await objeto.save();\r\n        if (query) {\r\n            res.json({ message: 'Estado creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nestadoController.updateOneById = async(req, res) => {\r\n    const { name, valor, estado } = req.body;\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await EstadoListaEspera.findByIdAndUpdate(itemId, { name, valor, estado });\r\n        if (query) {\r\n            res.json({ message: 'Estado actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nestadoController.deleteOneById = async(req, res) => {\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await EstadoListaEspera.findByIdAndDelete(itemId);\r\n        if (query) {\r\n            res.json({ message: 'Estado eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe estado a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default estadoController;"],"mappings":"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"}