{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["signIn","req","res","body","username","password","User","findOne","userFound","status","json","message","online","comparePassword","matchPassword","token","jwt","sign","id","_id","config","SECRET","expiresIn","findByIdAndUpdate","console","log","codigo","changePassword","locals","jwtPayload","oldPassword","newPassword","findById","user","encryptPassword","save","guardado","error","cerrarSesion","offline","forzarCierre","codUser","refreshToken","refreshTok","headers","refresh"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport config from '../config/config'\r\nimport User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const signIn = async(req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    const userFound = await User.findOne({ username });\r\n\r\n    if (!userFound) return res.status(404).json({ message: 'Usuario no existe' });\r\n\r\n    if (!userFound.status) return res.status(403).json({ message: 'Usuario inactivo' });\r\n\r\n    if (userFound.online) return res.status(401).json({ message: 'Usuario ya se encuentra logueado' });\r\n\r\n    const matchPassword = await User.comparePassword(password, userFound.password);\r\n\r\n    if (!matchPassword) return res.status(403).json({ token: null, message: 'Contraseña Errónea' });\r\n\r\n    const token = jwt.sign({ id: userFound._id }, config.SECRET, { expiresIn: '48h' });\r\n\r\n    //Cambio de estado a online\r\n    await User.findByIdAndUpdate(userFound._id, { online: true });\r\n\r\n    console.log('Token:', token);\r\n\r\n    res.json({ token, codigo: userFound._id });\r\n}\r\n\r\nexport const changePassword = async(req, res) => {\r\n    const { id } = res.locals.jwtPayload;\r\n    const { oldPassword, newPassword } = req.body;\r\n    let user;\r\n\r\n    if (!(oldPassword && newPassword)) {\r\n        res.status(400).json({ message: 'Contraseña Anterior y Nueva Contraseña son necesarios' });\r\n    }\r\n\r\n    try {\r\n        user = await User.findById(id);\r\n    } catch (err) {\r\n        res.status(404).json({ message: 'Usuario no existe' })\r\n    }\r\n\r\n    const matchPassword = await User.comparePassword(oldPassword, user.password);\r\n\r\n    if (!matchPassword) return res.status(401).json({ message: 'Contraseña Anterior Errónea' });\r\n\r\n    try {\r\n        user.password = await User.encryptPassword(newPassword);\r\n\r\n        const guardado = await user.save();\r\n\r\n        if (guardado) {\r\n            res.json({ message: 'Contraseña actualizada con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const cerrarSesion = async(req, res) => {\r\n    const { id } = res.locals.jwtPayload;\r\n    try {\r\n        const userFound = await User.findById(id);\r\n\r\n        if (!userFound.online) return res.status(401).json({ message: 'No existe sesión abierta' });\r\n\r\n        const offline = await User.findByIdAndUpdate(id, { online: false });\r\n\r\n        if (offline) return res.json({ message: 'Sesión cerrada con éxito' });\r\n    } catch (err) {\r\n        return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const forzarCierre = async(req, res) => {\r\n    const { username } = req.body;\r\n\r\n    try {\r\n        const userFound = await User.findOne({ username });\r\n\r\n        let codUser = userFound._id;\r\n\r\n        if (!userFound) return res.status(404).json({ message: 'Usuario no existe' });\r\n\r\n        if (!userFound.online) return res.status(401).json({ message: 'No existe sesión iniciada' });\r\n\r\n        const offline = await User.findByIdAndUpdate(codUser, { online: false });\r\n\r\n        if (offline) return res.json({ message: 'Se cerró la sesión de forma forzada' })\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n        // return res.status(503).json({ error: err });\r\n    }\r\n}\r\n\r\nexport const refreshToken = async(req, res) => {\r\n    const refreshTok = req.headers.refresh;\r\n\r\n    if (!refreshTok) res.status(400).json({ message: 'Algo salió mal' })\r\n\r\n\r\n}"],"file":"auth.controller.js"}