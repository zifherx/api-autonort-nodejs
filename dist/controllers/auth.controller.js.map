{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["signUp","req","res","body","username","email","password","roles","newUser","User","Role","find","name","$in","foundRoles","map","role","_id","findOne","save","saveUser","token","jwt","sign","id","config","SECRET","expiresIn","status","json","signIn","populate","userFound","message","comparePassword","matchPassword","codigo","activo","changePassword","locals","jwtPayload","oldPassword","newPassword","findById","user","encryptPassword","guardado","console","log"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEO,IAAMA,MAAM;AAAA,qFAAG,iBAAMC,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBAC2BD,GAAG,CAACE,IAD/B,EACVC,QADU,aACVA,QADU,EACAC,KADA,aACAA,KADA,EACOC,QADP,aACOA,QADP,EACiBC,KADjB,aACiBA,KADjB;AAGZC,YAAAA,OAHY,GAGF,IAAIC,aAAJ,CAAS;AACrBL,cAAAA,QAAQ,EAARA,QADqB;AAErBC,cAAAA,KAAK,EAALA;AAFqB,aAAT,CAHE;;AAAA,iBAQdE,KARc;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASWG,cAAKC,IAAL,CAAU;AAAEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,GAAG,EAAEN;AAAP;AAAR,aAAV,CATX;;AAAA;AASRO,YAAAA,UATQ;AAUdN,YAAAA,OAAO,CAACD,KAAR,GAAgBO,UAAU,CAACC,GAAX,CAAe,UAAAC,IAAI;AAAA,qBAAIA,IAAI,CAACC,GAAT;AAAA,aAAnB,CAAhB;AAVc;AAAA;;AAAA;AAAA;AAAA,mBAYKP,cAAKQ,OAAL,CAAa;AAAEN,cAAAA,IAAI,EAAE;AAAR,aAAb,CAZL;;AAAA;AAYRI,YAAAA,IAZQ;AAadR,YAAAA,OAAO,CAACD,KAAR,GAAgB,CAACS,IAAI,CAACC,GAAN,CAAhB;;AAbc;AAAA;AAAA,mBAgBKT,OAAO,CAACW,IAAR,EAhBL;;AAAA;AAgBZC,YAAAA,QAhBY;AAiBlB;AAEMC,YAAAA,KAnBY,GAmBJC,sBAAIC,IAAJ,CAAS;AAAEC,cAAAA,EAAE,EAAEJ,QAAQ,CAACH;AAAf,aAAT,EAA+BQ,gBAAOC,MAAtC,EAA8C;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAA9C,CAnBI;AAqBlBzB,YAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAER,cAAAA,KAAK,EAALA;AAAF,aAArB;;AArBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANrB,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAwBA,IAAM8B,MAAM;AAAA,sFAAG,kBAAM7B,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACaD,GAAG,CAACE,IADjB,EACVC,QADU,cACVA,QADU,EACAE,QADA,cACAA,QADA;AAAA;AAAA,mBAGMG,cAAKS,OAAL,CAAa;AAAEd,cAAAA,QAAQ,EAARA;AAAF,aAAb,EAA2B2B,QAA3B,CAAoC,OAApC,CAHN;;AAAA;AAGZC,YAAAA,SAHY;;AAAA,gBAKbA,SALa;AAAA;AAAA;AAAA;;AAAA,8CAKK9B,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CALL;;AAAA;AAAA;AAAA,mBAOUxB,cAAKyB,eAAL,CAAqB5B,QAArB,EAA+B0B,SAAS,CAAC1B,QAAzC,CAPV;;AAAA;AAOZ6B,YAAAA,aAPY;;AAAA,gBASbA,aATa;AAAA;AAAA;AAAA;;AAAA,8CASSjC,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAER,cAAAA,KAAK,EAAE,IAAT;AAAeY,cAAAA,OAAO,EAAE;AAAxB,aAArB,CATT;;AAAA;AAWZZ,YAAAA,KAXY,GAWJC,sBAAIC,IAAJ,CAAS;AAAEC,cAAAA,EAAE,EAAEQ,SAAS,CAACf;AAAhB,aAAT,EAAgCQ,gBAAOC,MAAvC,EAA+C;AAAEC,cAAAA,SAAS,EAAE;AAAb,aAA/C,CAXI;AAalBzB,YAAAA,GAAG,CAAC2B,IAAJ,CAAS;AAAER,cAAAA,KAAK,EAALA,KAAF;AAASe,cAAAA,MAAM,EAAEJ,SAAS,CAACf,GAA3B;AAAgCW,cAAAA,MAAM,EAAEI,SAAS,CAACK;AAAlD,aAAT;;AAbkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAANP,MAAM;AAAA;AAAA;AAAA,GAAZ;;;;AAgBA,IAAMQ,cAAc;AAAA,sFAAG,kBAAMrC,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAClBsB,YAAAA,EADkB,GACXtB,GAAG,CAACqC,MAAJ,CAAWC,UADA,CAClBhB,EADkB;AAAA,yBAEWvB,GAAG,CAACE,IAFf,EAElBsC,WAFkB,cAElBA,WAFkB,EAELC,WAFK,cAELA,WAFK;;AAK1B,gBAAI,EAAED,WAAW,IAAIC,WAAjB,CAAJ,EAAmC;AAC/BxC,cAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,gBAAAA,OAAO,EAAE;AAAX,eAArB;AACH;;AAPyB;AAAA;AAAA,mBAUTxB,cAAKkC,QAAL,CAAcnB,EAAd,CAVS;;AAAA;AAUtBoB,YAAAA,IAVsB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYtB1C,YAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB;;AAZsB;AAAA;AAAA,mBAeExB,cAAKyB,eAAL,CAAqBO,WAArB,EAAkCG,IAAI,CAACtC,QAAvC,CAfF;;AAAA;AAepB6B,YAAAA,aAfoB;;AAAA,gBAiBrBA,aAjBqB;AAAA;AAAA;AAAA;;AAAA,8CAiBCjC,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE;AAAX,aAArB,CAjBD;;AAAA;AAAA;AAAA;AAAA,mBAoBAxB,cAAKoC,eAAL,CAAqBH,WAArB,CApBA;;AAAA;AAoBtBE,YAAAA,IAAI,CAACtC,QApBiB;AAAA;AAAA,mBAsBCsC,IAAI,CAACzB,IAAL,EAtBD;;AAAA;AAsBhB2B,YAAAA,QAtBgB;;AAwBtB,gBAAIA,QAAJ,EAAc;AACV5C,cAAAA,GAAG,CAAC2B,IAAJ,CAAS;AAAEI,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AA1BqB;AAAA;;AAAA;AAAA;AAAA;AA4BtBc,YAAAA,OAAO,CAACC,GAAR;AACA9C,YAAAA,GAAG,CAAC0B,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AA7BsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdK,cAAc;AAAA;AAAA;AAAA,GAApB","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport config from '../config/config'\r\nimport User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const signUp = async(req, res) => {\r\n    const { username, email, password, roles } = req.body\r\n\r\n    const newUser = new User({\r\n        username,\r\n        email,\r\n    });\r\n\r\n    if (roles) {\r\n        const foundRoles = await Role.find({ name: { $in: roles } });\r\n        newUser.roles = foundRoles.map(role => role._id);\r\n    } else {\r\n        const role = await Role.findOne({ name: \"user\" });\r\n        newUser.roles = [role._id];\r\n    }\r\n\r\n    const saveUser = await newUser.save();\r\n    //console.log(saveUser);\r\n\r\n    const token = jwt.sign({ id: saveUser._id }, config.SECRET, { expiresIn: 86400 });\r\n\r\n    res.status(200).json({ token })\r\n}\r\n\r\nexport const signIn = async(req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    const userFound = await User.findOne({ username }).populate(\"roles\");\r\n\r\n    if (!userFound) return res.status(404).json({ message: 'Usuario no existe' });\r\n\r\n    const matchPassword = await User.comparePassword(password, userFound.password);\r\n\r\n    if (!matchPassword) return res.status(401).json({ token: null, message: 'Contraseña Errónea' });\r\n\r\n    const token = jwt.sign({ id: userFound._id }, config.SECRET, { expiresIn: '24h' });\r\n\r\n    res.json({ token, codigo: userFound._id, status: userFound.activo });\r\n}\r\n\r\nexport const changePassword = async(req, res) => {\r\n    const { id } = res.locals.jwtPayload;\r\n    const { oldPassword, newPassword } = req.body;\r\n    let user;\r\n\r\n    if (!(oldPassword && newPassword)) {\r\n        res.status(400).json({ message: 'Contraseña Anterior y Nueva Contraseña son necesarios' });\r\n    }\r\n\r\n    try {\r\n        user = await User.findById(id);\r\n    } catch (err) {\r\n        res.status(404).json({ message: 'Usuario no existe' })\r\n    }\r\n\r\n    const matchPassword = await User.comparePassword(oldPassword, user.password);\r\n\r\n    if (!matchPassword) return res.status(401).json({ message: 'Contraseña Anterior Errónea' });\r\n\r\n    try {\r\n        user.password = await User.encryptPassword(newPassword);\r\n\r\n        const guardado = await user.save();\r\n\r\n        if (guardado) {\r\n            res.json({ message: 'Contraseña actualizada con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n\r\n}"],"file":"auth.controller.js"}