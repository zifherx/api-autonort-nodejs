{"version":3,"sources":["../../src/controllers/auth.controller.js"],"names":["signUp","req","res","body","username","email","password","roles","newUser","User","Role","find","name","$in","foundRoles","map","role","_id","findOne","save","saveUser","token","jwt","sign","id","config","SECRET","expiresIn","status","json","signIn","populate","userFound","message","comparePassword","matchPassword"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken'\r\nimport config from '../config/config'\r\nimport User from '../models/User'\r\nimport Role from '../models/Role'\r\n\r\nexport const signUp = async(req, res) => {\r\n    const { username, email, password, roles } = req.body\r\n\r\n    const newUser = new User({\r\n        username,\r\n        email,\r\n    });\r\n\r\n    if (roles) {\r\n        const foundRoles = await Role.find({ name: { $in: roles } });\r\n        newUser.roles = foundRoles.map(role => role._id);\r\n    } else {\r\n        const role = await Role.findOne({ name: \"user\" });\r\n        newUser.roles = [role._id];\r\n    }\r\n\r\n    const saveUser = await newUser.save();\r\n    //console.log(saveUser);\r\n\r\n    const token = jwt.sign({ id: saveUser._id }, config.SECRET, { expiresIn: 86400 });\r\n\r\n    res.status(200).json({ token })\r\n}\r\n\r\nexport const signIn = async(req, res) => {\r\n    const userFound = await User.findOne({ username: req.body.username }).populate(\"roles\");\r\n\r\n    if (!userFound) return res.status(400).json({ message: 'User not found' });\r\n\r\n    const matchPassword = await User.comparePassword(req.body.password, userFound.password);\r\n\r\n    if (!matchPassword) return res.status(401).json({ token: null, message: 'Invalid Password' });\r\n\r\n    const token = jwt.sign({ id: userFound._id }, config.SECRET, { expiresIn: 86400 });\r\n\r\n    res.json({ token });\r\n}"],"file":"auth.controller.js"}