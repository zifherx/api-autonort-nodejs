{"version":3,"sources":["../../src/controllers/goals.controller.js"],"names":["getMetas","req","res","Goal","find","populate","sort","mes","query","length","json","status","message","console","log","getMetaByActivo","name","getMetaById","metaId","params","findById","createMeta","body","anio","vendedor","criterio","meta","avance","empleado","obj","Seller","$in","foundSeller","map","a","_id","User","username","foundEmployee","em","save","updateMeta","findByIdAndUpdate","b","deleteMeta","findByIdAndDelete"],"mappings":";;;;;;;;;;;;;AAAI;;AACA;;AACA;;AAEO,IAAMA,QAAQ;AAAA,qFAAG,iBAAMC,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEIC,cAAKC,IAAL,GAAYC,QAAZ,CAAqB,mBAArB,EAA0CC,IAA1C,CAA+C;AAAEC,cAAAA,GAAG,EAAE;AAAP,aAA/C,CAFJ;;AAAA;AAEVC,YAAAA,KAFU;;AAAA,kBAGZA,KAAK,CAACC,MAAN,GAAe,CAHH;AAAA;AAAA;AAAA;;AAIZP,YAAAA,GAAG,CAACQ,IAAJ,CAASF,KAAT;AAJY;AAAA;;AAAA;AAAA,6CAMLN,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CANK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAShBC,YAAAA,OAAO,CAACC,GAAR;AACAZ,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,YAAIA;AAAf,aAArB;;AAVgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARZ,QAAQ;AAAA;AAAA;AAAA,GAAd;;;;AAcA,IAAMe,eAAe;AAAA,sFAAG,kBAAMd,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEHC,cAAKC,IAAL,CAAU;AAAEO,cAAAA,MAAM,EAAE;AAAV,aAAV,EAAgCN,QAAhC,CAAyC,mBAAzC,EAA8DC,IAA9D,CAAmE;AAAEU,cAAAA,IAAI,EAAE;AAAR,aAAnE,CAFG;;AAAA;AAEjBR,YAAAA,KAFiB;;AAGvB,gBAAIA,KAAK,CAACC,MAAN,GAAe,CAAnB,EAAsB;AAClBP,cAAAA,GAAG,CAACQ,IAAJ,CAASF,KAAT;AACH,aAFD,MAEO;AACHN,cAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB;AACH;;AAPsB;AAAA;;AAAA;AAAA;AAAA;AASvBC,YAAAA,OAAO,CAACC,GAAR;AACAZ,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAVuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfG,eAAe;AAAA;AAAA;AAAA,GAArB;;;;AAcA,IAAME,WAAW;AAAA,sFAAG,kBAAMhB,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACfgB,YAAAA,MADe,GACJjB,GAAG,CAACkB,MADA,CACfD,MADe;AAAA;AAAA;AAAA,mBAGCf,cAAKiB,QAAL,CAAcF,MAAd,EAAsBb,QAAtB,CAA+B,mBAA/B,CAHD;;AAAA;AAGbG,YAAAA,KAHa;;AAAA,iBAIfA,KAJe;AAAA;AAAA;AAAA;;AAKfN,YAAAA,GAAG,CAACQ,IAAJ,CAASF,KAAT;AALe;AAAA;;AAAA;AAAA,8CAORN,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE;AAAX,aAArB,CAPQ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUnBC,YAAAA,OAAO,CAACC,GAAR;AACAZ,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAXmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXK,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAeA,IAAMI,UAAU;AAAA,sFAAG,kBAAMpB,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,wBACoDD,GAAG,CAACqB,IADxD,EACdC,IADc,aACdA,IADc,EACRhB,GADQ,aACRA,GADQ,EACHiB,QADG,aACHA,QADG,EACOC,QADP,aACOA,QADP,EACiBC,IADjB,aACiBA,IADjB,EACuBC,MADvB,aACuBA,MADvB,EAC+BhB,MAD/B,aAC+BA,MAD/B,EACuCiB,QADvC,aACuCA,QADvC;AAAA;AAIZC,YAAAA,GAJY,GAIN,IAAI1B,aAAJ,CAAS;AAAEoB,cAAAA,IAAI,EAAJA,IAAF;AAAQhB,cAAAA,GAAG,EAAHA,GAAR;AAAakB,cAAAA,QAAQ,EAARA,QAAb;AAAuBC,cAAAA,IAAI,EAAJA,IAAvB;AAA6BC,cAAAA,MAAM,EAANA,MAA7B;AAAqChB,cAAAA,MAAM,EAANA;AAArC,aAAT,CAJM;AAAA;AAAA,mBAMQmB,gBAAO1B,IAAP,CAAY;AAAEY,cAAAA,IAAI,EAAE;AAAEe,gBAAAA,GAAG,EAAEP;AAAP;AAAR,aAAZ,CANR;;AAAA;AAMZQ,YAAAA,WANY;AAOlBH,YAAAA,GAAG,CAACL,QAAJ,GAAeQ,WAAW,CAACC,GAAZ,CAAgB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,GAAN;AAAA,aAAjB,CAAf;AAPkB;AAAA,mBASUC,cAAKhC,IAAL,CAAU;AAAEiC,cAAAA,QAAQ,EAAE;AAAEN,gBAAAA,GAAG,EAAEH;AAAP;AAAZ,aAAV,CATV;;AAAA;AASZU,YAAAA,aATY;AAUlBT,YAAAA,GAAG,CAACD,QAAJ,GAAeU,aAAa,CAACL,GAAd,CAAkB,UAAAM,EAAE;AAAA,qBAAIA,EAAE,CAACJ,GAAP;AAAA,aAApB,CAAf;AAVkB;AAAA,mBAYEN,GAAG,CAACW,IAAJ,EAZF;;AAAA;AAYZhC,YAAAA,KAZY;;AAclB,gBAAIA,KAAJ,EAAW;AACPN,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH;;AAhBiB;AAAA;;AAAA;AAAA;AAAA;AAkBlBC,YAAAA,OAAO,CAACC,GAAR;AACAZ,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAnBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVS,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;AAuBA,IAAMoB,UAAU;AAAA,sFAAG,kBAAMxC,GAAN,EAAWC,GAAX;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,yBACoDD,GAAG,CAACqB,IADxD,EACdC,IADc,cACdA,IADc,EACRhB,GADQ,cACRA,GADQ,EACHiB,QADG,cACHA,QADG,EACOC,QADP,cACOA,QADP,EACiBC,IADjB,cACiBA,IADjB,EACuBC,MADvB,cACuBA,MADvB,EAC+BhB,MAD/B,cAC+BA,MAD/B,EACuCiB,QADvC,cACuCA,QADvC;AAEdV,YAAAA,MAFc,GAEHjB,GAAG,CAACkB,MAFD,CAEdD,MAFc;AAAA;AAAA;AAAA,mBAMQY,gBAAO1B,IAAP,CAAY;AAAEY,cAAAA,IAAI,EAAE;AAAEe,gBAAAA,GAAG,EAAEP;AAAP;AAAR,aAAZ,CANR;;AAAA;AAMZQ,YAAAA,WANY;AAAA;AAAA,mBAOUI,cAAKhC,IAAL,CAAU;AAAEiC,cAAAA,QAAQ,EAAE;AAAEN,gBAAAA,GAAG,EAAEH;AAAP;AAAZ,aAAV,CAPV;;AAAA;AAOZU,YAAAA,aAPY;AAAA;AAAA,mBAQEnC,cAAKuC,iBAAL,CAAuBxB,MAAvB,EAA+B;AAAEK,cAAAA,IAAI,EAAJA,IAAF;AAAQhB,cAAAA,GAAG,EAAHA,GAAR;AAAaiB,cAAAA,QAAQ,EAAEQ,WAAW,CAACC,GAAZ,CAAgB,UAAAC,CAAC;AAAA,uBAAIA,CAAC,CAACC,GAAN;AAAA,eAAjB,CAAvB;AAAoDV,cAAAA,QAAQ,EAARA,QAApD;AAA8DC,cAAAA,IAAI,EAAJA,IAA9D;AAAoEC,cAAAA,MAAM,EAANA,MAApE;AAA4EhB,cAAAA,MAAM,EAANA,MAA5E;AAAoFiB,cAAAA,QAAQ,EAAEU,aAAa,CAACL,GAAd,CAAkB,UAAAU,CAAC;AAAA,uBAAIA,CAAC,CAACR,GAAN;AAAA,eAAnB;AAA9F,aAA/B,CARF;;AAAA;AAQZ3B,YAAAA,KARY;;AAUlB,gBAAIA,KAAJ,EAAW;AACPN,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH,aAFD,MAEO;AACHV,cAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB;AACH;;AAdiB;AAAA;;AAAA;AAAA;AAAA;AAgBlBC,YAAAA,OAAO,CAACC,GAAR;AACAZ,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAjBkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV6B,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;AAqBA,IAAMG,UAAU;AAAA,sFAAG,kBAAM3C,GAAN,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACdgB,YAAAA,MADc,GACHjB,GAAG,CAACkB,MADD,CACdD,MADc;AAAA;AAAA;AAAA,mBAIEf,cAAK0C,iBAAL,CAAuB3B,MAAvB,CAJF;;AAAA;AAIZV,YAAAA,KAJY;;AAMlB,gBAAIA,KAAJ,EAAW;AACPN,cAAAA,GAAG,CAACQ,IAAJ,CAAS;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAAT;AACH,aAFD,MAEO;AACHV,cAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,gBAAAA,OAAO,EAAE;AAAX,eAArB;AACH;;AAViB;AAAA;;AAAA;AAAA;AAAA;AAYlBC,YAAAA,OAAO,CAACC,GAAR;AACAZ,YAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBD,IAAhB,CAAqB;AAAEE,cAAAA,OAAO,EAAE,aAAIA;AAAf,aAArB;;AAbkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVgC,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["    import Goal from '../models/Goal'\r\n    import User from '../models/User'\r\n    import Seller from '../models/Seller'\r\n\r\n    export const getMetas = async(req, res) => {\r\n        try {\r\n            const query = await Goal.find().populate('vendedor empleado').sort({ mes: 'asc' });\r\n            if (query.length > 0) {\r\n                res.json(query);\r\n            } else {\r\n                return res.status(404).json({ message: 'No existen Metas' });\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            res.status(409).json({ message: err.message })\r\n        }\r\n    }\r\n\r\n    export const getMetaByActivo = async(req, res) => {\r\n        try {\r\n            const query = await Goal.find({ status: 'Activo' }).populate('vendedor empleado').sort({ name: 'asc' });\r\n            if (query.length > 0) {\r\n                res.json(query);\r\n            } else {\r\n                res.status(404).json({ message: 'No existen Metas Activas' })\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            res.status(409).json({ message: err.message })\r\n        }\r\n    }\r\n\r\n    export const getMetaById = async(req, res) => {\r\n        const { metaId } = req.params;\r\n        try {\r\n            const query = await Goal.findById(metaId).populate('vendedor empleado');\r\n            if (query) {\r\n                res.json(query);\r\n            } else {\r\n                return res.status(404).json({ message: 'No existe Meta' })\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            res.status(409).json({ message: err.message })\r\n        }\r\n    }\r\n\r\n    export const createMeta = async(req, res) => {\r\n        const { anio, mes, vendedor, criterio, meta, avance, status, empleado } = req.body;\r\n\r\n        try {\r\n            const obj = new Goal({ anio, mes, criterio, meta, avance, status });\r\n\r\n            const foundSeller = await Seller.find({ name: { $in: vendedor } });\r\n            obj.vendedor = foundSeller.map(a => a._id);\r\n\r\n            const foundEmployee = await User.find({ username: { $in: empleado } });\r\n            obj.empleado = foundEmployee.map(em => em._id);\r\n\r\n            const query = await obj.save();\r\n\r\n            if (query) {\r\n                res.json({ message: 'Meta creada con éxito' })\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            res.status(409).json({ message: err.message })\r\n        }\r\n    }\r\n\r\n    export const updateMeta = async(req, res) => {\r\n        const { anio, mes, vendedor, criterio, meta, avance, status, empleado } = req.body;\r\n        const { metaId } = req.params;\r\n\r\n        try {\r\n\r\n            const foundSeller = await Seller.find({ name: { $in: vendedor } });\r\n            const foundEmployee = await User.find({ username: { $in: empleado } });\r\n            const query = await Goal.findByIdAndUpdate(metaId, { anio, mes, vendedor: foundSeller.map(a => a._id), criterio, meta, avance, status, empleado: foundEmployee.map(b => b._id) });\r\n\r\n            if (query) {\r\n                res.json({ message: 'Meta actualizada con éxito' })\r\n            } else {\r\n                res.status(404).json({ message: 'No existe Meta a actualizar' });\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            res.status(409).json({ message: err.message })\r\n        }\r\n    }\r\n\r\n    export const deleteMeta = async(req, res) => {\r\n        const { metaId } = req.params;\r\n\r\n        try {\r\n            const query = await Goal.findByIdAndDelete(metaId);\r\n\r\n            if (query) {\r\n                res.json({ message: 'Meta eliminada con éxito' })\r\n            } else {\r\n                res.status(404).json({ message: 'No existe Meta a eliminar' });\r\n            }\r\n        } catch (err) {\r\n            console.log(err);\r\n            res.status(409).json({ message: err.message })\r\n        }\r\n    }"],"file":"goals.controller.js"}