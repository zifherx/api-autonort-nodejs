{"version":3,"file":"sectorista.controller.js","names":["getSectoristas","req","res","Sectorista","find","sort","name","sectorista","length","json","status","message","console","log","getSectoristaById","sectoristaId","params","findById","getSectoristaByActivo","estado","query","createSectorista","body","newSectorista","save","sectoristaCreado","updateSectorista","findByIdAndUpdate","deleteSectorista","findByIdAndDelete"],"sources":["../../src/controllers/sectorista.controller.js"],"sourcesContent":["import Sectorista from \"../models/Sectorista\";\r\n\r\nexport const getSectoristas = async(req, res) => {\r\n    try {\r\n        const sectorista = await Sectorista.find().sort({ name: 'asc' });\r\n        if (sectorista.length > 0) {\r\n            res.json(sectorista);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Sectoritas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSectoristaById = async(req, res) => {\r\n    const { sectoristaId } = req.params;\r\n    try {\r\n        const sectorista = await Sectorista.findById(sectoristaId);\r\n        if (sectorista) {\r\n            res.json(sectorista);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Sectorista' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSectoristaByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Sectorista.find({ estado: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Sectoristas Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createSectorista = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n\r\n        const newSectorista = new Sectorista({ name, estado });\r\n\r\n        const sectoristaCreado = await newSectorista.save();\r\n        if (sectoristaCreado) {\r\n            res.json({ message: 'Sectorista creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSectorista = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { sectoristaId } = req.params;\r\n    try {\r\n\r\n        const updateSectorista = await Sectorista.findByIdAndUpdate(sectoristaId, { name, estado });\r\n\r\n        if (updateSectorista) {\r\n            res.json({ message: 'Sectorista actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sectorista a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSectorista = async(req, res) => {\r\n    const { sectoristaId } = req.params;\r\n    try {\r\n        const deleteSectorista = await Sectorista.findByIdAndDelete(sectoristaId);\r\n        if (deleteSectorista) {\r\n            res.json({ message: 'Sectorista eliminado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sectorista a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"mappings":"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"}