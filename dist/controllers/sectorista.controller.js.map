{"version":3,"sources":["../../src/controllers/sectorista.controller.js"],"names":["getSectoristas","req","res","Sectorista","find","sort","name","sectorista","length","json","status","message","console","log","getSectoristaById","sectoristaId","params","findById","getSectoristaByActivo","estado","query","createSectorista","body","newSectorista","save","sectoristaCreado","updateSectorista","findByIdAndUpdate","deleteSectorista","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Sectorista from \"../models/Sectorista\";\r\n\r\nexport const getSectoristas = async(req, res) => {\r\n    try {\r\n        const sectorista = await Sectorista.find().sort({ name: 'asc' });\r\n        if (sectorista.length > 0) {\r\n            res.json(sectorista);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Sectoritas' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSectoristaById = async(req, res) => {\r\n    const { sectoristaId } = req.params;\r\n    try {\r\n        const sectorista = await Sectorista.findById(sectoristaId);\r\n        if (sectorista) {\r\n            res.json(sectorista);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Sectorista' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getSectoristaByActivo = async(req, res) => {\r\n    try {\r\n        const query = await Sectorista.find({ estado: true }).sort({ name: 'asc' });\r\n        if (query.length > 0) {\r\n            res.json(query);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Sectoristas Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const createSectorista = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n\r\n        const newSectorista = new Sectorista({ name, estado });\r\n\r\n        const sectoristaCreado = await newSectorista.save();\r\n        if (sectoristaCreado) {\r\n            res.json({ message: 'Sectorista creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateSectorista = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { sectoristaId } = req.params;\r\n    try {\r\n\r\n        const updateSectorista = await Sectorista.findByIdAndUpdate(sectoristaId, { name, estado });\r\n\r\n        if (updateSectorista) {\r\n            res.json({ message: 'Sectorista actualizado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sectorista a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteSectorista = async(req, res) => {\r\n    const { sectoristaId } = req.params;\r\n    try {\r\n        const deleteSectorista = await Sectorista.findByIdAndDelete(sectoristaId);\r\n        if (deleteSectorista) {\r\n            res.json({ message: 'Sectorista eliminado con éxito' });\r\n        } else {\r\n            res.status(404).json({ message: 'No existe Sectorista a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}"],"file":"sectorista.controller.js"}