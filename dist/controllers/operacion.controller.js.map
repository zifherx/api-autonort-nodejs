{"version":3,"sources":["../../src/controllers/operacion.controller.js"],"names":["operacionController","getAll","req","res","Operacion","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","operacionId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","save","newObj","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import Operacion from \"../models/Operacion\";\r\n\r\nconst operacionController = {};\r\n\r\noperacionController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Operacion.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tipos de operaciónes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.getOneById = async(req, res) => {\r\n    const { operacionId } = req.params;\r\n    try {\r\n        const query = await Operacion.findById(operacionId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tipo de operación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await Operacion.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tipos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\noperacionController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const query = new Operacion({ name, estado });\r\n\r\n        const newObj = await query.save();\r\n\r\n        if (newObj) {\r\n            res.json({ message: 'Tipo de operación creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { operacionId } = req.params;\r\n    try {\r\n        const query = await Operacion.findByIdAndUpdate(operacionId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Tipo de operación actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tipo de operación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.deleteOneById = async(req, res) => {\r\n    const { operacionId } = req.params;\r\n    try {\r\n        const query = await Operacion.findByIdAndDelete(operacionId);\r\n        if (query) {\r\n            res.json({ message: 'Tipo de operación eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tipo de operación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default operacionController;"],"file":"operacion.controller.js"}