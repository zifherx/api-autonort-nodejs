{"version":3,"file":"operacion.controller.js","names":["operacionController","getAll","req","res","Operacion","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","operacionId","params","findById","one","getAllActivos","estado","total_active","all_active","createOne","body","save","newObj","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"sources":["../../src/controllers/operacion.controller.js"],"sourcesContent":["import Operacion from \"../models/Operacion\";\r\n\r\nconst operacionController = {};\r\n\r\noperacionController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await Operacion.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tipos de operaciónes' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.getOneById = async(req, res) => {\r\n    const { operacionId } = req.params;\r\n    try {\r\n        const query = await Operacion.findById(operacionId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tipo de operación' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.getAllActivos = async(req, res) => {\r\n    try {\r\n        const query = await Operacion.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Tipos Activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\noperacionController.createOne = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    try {\r\n        const query = new Operacion({ name, estado });\r\n\r\n        const newObj = await query.save();\r\n\r\n        if (newObj) {\r\n            res.json({ message: 'Tipo de operación creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { operacionId } = req.params;\r\n    try {\r\n        const query = await Operacion.findByIdAndUpdate(operacionId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Tipo de operación actualizada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tipo de operación a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\noperacionController.deleteOneById = async(req, res) => {\r\n    const { operacionId } = req.params;\r\n    try {\r\n        const query = await Operacion.findByIdAndDelete(operacionId);\r\n        if (query) {\r\n            res.json({ message: 'Tipo de operación eliminada con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Tipo de operación a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default operacionController;"],"mappings":"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"}