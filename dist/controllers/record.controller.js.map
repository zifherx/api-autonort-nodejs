{"version":3,"sources":["../../src/controllers/record.controller.js"],"names":["createRecord","req","res","body","fecha_recepcion","hora_recepcion","sales","fecha_ingreso_file","hora_ingreso_file","num_titulo","status_tarjeta","num_placa","fecha_entrega_file","fecha_tramite_placa","status_placa","fecha_entrega_placa","fecha_entrega_cliente","nuevoInmatriculado","Record","Sale","find","nro_comprobante","$in","expediente","map","_id","save","recordSaved","json","message","status","console","log","getRecords","filtro1","path","populate","expedientes","length","getRecordById","recordId","params","findById","updateRecordById","foundExpediente","findByIdAndUpdate","new","objetoActualizado","deleteRecordById","findByIdAndDelete","deleteRecord"],"mappings":"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","sourcesContent":["import Record from '../models/Record'\r\nimport Sale from '../models/Sale'\r\n\r\nexport const createRecord = async(req, res) => {\r\n    try {\r\n        const { fecha_recepcion, hora_recepcion, sales, fecha_ingreso_file, hora_ingreso_file, num_titulo, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente } = req.body;\r\n\r\n        const nuevoInmatriculado = new Record({ fecha_recepcion, hora_recepcion, fecha_ingreso_file, hora_ingreso_file, num_titulo, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente });\r\n\r\n        //Sales\r\n        const expediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n\r\n        nuevoInmatriculado.sales = expediente.map(sales => sales._id);\r\n\r\n        const recordSaved = await nuevoInmatriculado.save();\r\n        if (recordSaved) {\r\n            res.json({ message: 'Inmatriculado creado con éxito' });\r\n        } else {\r\n            res.status(201).json({ message: 'Ya existe el inmatriculado' })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(403).json({ message: 'No Autorizado' });\r\n    }\r\n}\r\n\r\nexport const getRecords = async(req, res) => {\r\n    const filtro1 = { path: 'sales', populate: { path: 'auto vendedor  cliente' } };\r\n\r\n    try {\r\n        const expedientes = await Record.find()\r\n            .populate(filtro1)\r\n\r\n        if (expedientes.length > 0) {\r\n            res.json(expedientes);\r\n        } else {\r\n            return res.status(201).json({ message: 'No existen Inmatriculados' })\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ message: 'Error Interno' });\r\n    }\r\n}\r\n\r\nexport const getRecordById = async(req, res) => {\r\n    const filtro1 = { path: 'sales', populate: { path: 'auto vendedor  cliente' } };\r\n\r\n    try {\r\n        const { recordId } = req.params;\r\n        const expediente = await Record.findById(recordId)\r\n            .populate(filtro1);\r\n\r\n        if (expediente) {\r\n            res.json(expediente);\r\n        } else {\r\n            res.status(201).json({ message: 'No existe el inmatriculado' });\r\n        }\r\n\r\n\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(401).json({ message: 'Error Interno' });\r\n    }\r\n}\r\n\r\nexport const updateRecordById = async(req, res) => {\r\n\r\n    try {\r\n\r\n        const { recordId } = req.params;\r\n\r\n        const { fecha_recepcion, hora_recepcion, sales, fecha_ingreso_file, hora_ingreso_file, num_titulo, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente } = req.body;\r\n\r\n        //Expediente\r\n        const foundExpediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n\r\n        const objetoActualizado = await Record.findByIdAndUpdate(recordId, { fecha_recepcion, hora_recepcion, sales: foundExpediente.map(expediente => expediente._id), fecha_ingreso_file, hora_ingreso_file, num_titulo, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente }, { new: true });\r\n\r\n        if (objetoActualizado) {\r\n            res.json({ message: 'Inmatriculado actualizado con éxito' });\r\n        } else {\r\n            return res.status(201).json({ message: 'Ya existe' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(403).json({ message: 'Error Interno' });\r\n    }\r\n}\r\n\r\nexport const deleteRecordById = async(req, res) => {\r\n    try {\r\n        const { recordId } = req.params;\r\n        const deleteRecord = await Record.findByIdAndDelete(recordId);\r\n\r\n        if (deleteRecord) {\r\n            res.json({ message: 'Expediente Eliminado con éxito' });\r\n        } else {\r\n            return res.status(201).json({ message: 'Expediente no existe' });\r\n        }\r\n    } catch (e) {\r\n        console.log(e);\r\n        res.status(403).json({ message: 'Error Interno' });\r\n    }\r\n}"],"file":"record.controller.js"}