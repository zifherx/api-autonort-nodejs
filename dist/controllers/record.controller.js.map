{"version":3,"sources":["../../src/controllers/record.controller.js"],"names":["createRecord","req","res","body","sucursal_tramite","fecha_recepcion","hora_recepcion","statusFile","observaciones_file","sales","fecha_ingreso_file","hora_ingreso_file","num_titulo","codigo_verificacion","observaciones_registros","status_tarjeta","num_placa","fecha_entrega_file_recepcion","fecha_tramite_placa","status_placa","fecha_entrega_placa_recepcion","empleado","nuevoInmatriculado","Record","Sale","find","nro_comprobante","$in","expediente","cod_exp","_id","findByIdAndUpdate","pasoaTramite","act","map","User","username","foundEmployee","em","save","recordSaved","json","message","console","log","status","getRecords","filtro1","path","populate","sort","expedientes","length","getRecordById","recordId","params","findById","getRecordBySucursal","sucursal","select","query","total","files","getRecordByTarjetayPlaca","tarjeta","placa","entrega","filtro","where","equals","objeto","updateRecordById","isPendienteFirma","fechaPendienteFirma","isFirmado","fechaFirmado","isLegalizado","fechaLegalizado","isFinalizado","fechaFinalizado","motivo_observacion","objetoActualizado","deleteRecordById","findByIdAndDelete","deleteRecord"],"mappings":"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","sourcesContent":["import Record from \"../models/Record\";\r\nimport Sale from \"../models/Sale\";\r\nimport User from \"../models/User\";\r\n\r\nexport const createRecord = async(req, res) => {\r\n    const {\r\n        sucursal_tramite,\r\n        fecha_recepcion,\r\n        hora_recepcion,\r\n        statusFile,\r\n        observaciones_file,\r\n        sales,\r\n        fecha_ingreso_file,\r\n        hora_ingreso_file,\r\n        num_titulo,\r\n        codigo_verificacion,\r\n        observaciones_registros,\r\n        status_tarjeta,\r\n        num_placa,\r\n        fecha_entrega_file_recepcion,\r\n        fecha_tramite_placa,\r\n        status_placa,\r\n        fecha_entrega_placa_recepcion,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        const nuevoInmatriculado = new Record({\r\n            sucursal_tramite,\r\n            fecha_recepcion,\r\n            hora_recepcion,\r\n            statusFile,\r\n            observaciones_file,\r\n            fecha_ingreso_file,\r\n            hora_ingreso_file,\r\n            num_titulo,\r\n            codigo_verificacion,\r\n            observaciones_registros,\r\n            status_tarjeta,\r\n            num_placa,\r\n            fecha_entrega_file_recepcion,\r\n            fecha_tramite_placa,\r\n            status_placa,\r\n            fecha_entrega_placa_recepcion,\r\n        });\r\n\r\n        //Sales\r\n        const expediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n        const cod_exp = expediente[0]._id;\r\n        const act = await Sale.findByIdAndUpdate(cod_exp, { pasoaTramite: 1 });\r\n        //console.log(act);\r\n        nuevoInmatriculado.sales = expediente.map((sales) => sales._id);\r\n\r\n        //Empleado\r\n        const foundEmployee = await User.find({ username: { $in: empleado } });\r\n        nuevoInmatriculado.empleado = foundEmployee.map((em) => em._id);\r\n\r\n        const recordSaved = await nuevoInmatriculado.save();\r\n\r\n        if (recordSaved) {\r\n            res.json({ message: \"Inmatriculación creada con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getRecords = async(req, res) => {\r\n    const filtro1 = {\r\n        path: \"sales\",\r\n        populate: { path: \"auto vendedor cliente\" },\r\n    };\r\n\r\n    try {\r\n        const expedientes = await Record.find().populate(filtro1).populate(\"empleado\").sort({ fecha_recepcion: 'desc' });\r\n\r\n        if (expedientes.length > 0) {\r\n            res.json(expedientes);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Trámites\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    const filtro1 = {\r\n        path: \"sales\",\r\n        populate: { path: \"auto vendedor cliente\" },\r\n    };\r\n\r\n    try {\r\n        const expediente = await Record.findById(recordId).populate(filtro1).populate(\"empleado\");\r\n\r\n        if (expediente) {\r\n            res.json(expediente);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Trámite\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getRecordBySucursal = async(req, res) => {\r\n    const { sucursal } = req.body;\r\n\r\n    try {\r\n        const query = await Record.find({ sucursal_tramite: sucursal })\r\n            .populate({ path: 'sales' })\r\n            .populate({ path: 'empleado', select: 'name username roles' });\r\n\r\n        if (query.length > 0) {\r\n            res.json({ total: query.length, files: query });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Trámites\" });\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nexport const getRecordByTarjetayPlaca = async(req, res) => {\r\n    const { tarjeta, placa, entrega } = req.body;\r\n\r\n    const filtro = { path: \"sales\", populate: { path: \"auto vendedor cliente\" } };\r\n\r\n    try {\r\n        const objeto = await Record.find({}).populate(filtro).where(\"status_tarjeta\").equals(tarjeta).where(\"status_placa\").equals(placa);\r\n        /* .where('pasoaEntrega').equals(entrega); */\r\n\r\n        //console.log(req.body);\r\n\r\n        if (objeto.length > 0) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen expedientes Ready\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    const {\r\n        statusFile,\r\n        observaciones_file,\r\n        isPendienteFirma,\r\n        fechaPendienteFirma,\r\n        isFirmado,\r\n        fechaFirmado,\r\n        isLegalizado,\r\n        fechaLegalizado,\r\n        isFinalizado,\r\n        fechaFinalizado,\r\n        fecha_ingreso_file,\r\n        hora_ingreso_file,\r\n        num_titulo,\r\n        codigo_verificacion,\r\n        observaciones_registros,\r\n        motivo_observacion,\r\n        status_tarjeta,\r\n        num_placa,\r\n        fecha_entrega_file_recepcion,\r\n        fecha_tramite_placa,\r\n        status_placa,\r\n        fecha_entrega_placa_recepcion,\r\n    } = req.body;\r\n\r\n    try {\r\n\r\n        const objetoActualizado = await Record.findByIdAndUpdate(recordId, {\r\n            statusFile,\r\n            observaciones_file,\r\n            isPendienteFirma,\r\n            fechaPendienteFirma,\r\n            isFirmado,\r\n            fechaFirmado,\r\n            isLegalizado,\r\n            fechaLegalizado,\r\n            isFinalizado,\r\n            fechaFinalizado,\r\n            fecha_ingreso_file,\r\n            hora_ingreso_file,\r\n            num_titulo,\r\n            codigo_verificacion,\r\n            observaciones_registros,\r\n            motivo_observacion,\r\n            status_tarjeta,\r\n            num_placa,\r\n            fecha_entrega_file_recepcion,\r\n            fecha_tramite_placa,\r\n            status_placa,\r\n            fecha_entrega_placa_recepcion,\r\n        });\r\n\r\n        if (objetoActualizado) {\r\n            res.json({ message: \"Inmatriculación actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Inmatriculación a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    try {\r\n        const deleteRecord = await Record.findByIdAndDelete(recordId);\r\n\r\n        if (deleteRecord) {\r\n            res.json({ message: \"Inmatriculación eliminada con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Inmatriculación a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(503).json({ message: err.message });\r\n    }\r\n};"],"file":"record.controller.js"}