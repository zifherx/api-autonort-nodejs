{"version":3,"sources":["../../src/controllers/record.controller.js"],"names":["createRecord","req","res","body","fecha_recepcion","hora_recepcion","sales","fecha_ingreso_file","hora_ingreso_file","num_titulo","codigo_verificacion","observaciones","status_tarjeta","num_placa","fecha_entrega_file","fecha_tramite_placa","status_placa","fecha_entrega_placa","fecha_entrega_cliente","nuevoInmatriculado","Record","Sale","find","nro_comprobante","$in","expediente","map","_id","save","recordSaved","json","message","console","log","status","getRecords","filtro1","path","populate","expedientes","length","getRecordById","recordId","params","findById","updateRecordById","foundExpediente","findByIdAndUpdate","objetoActualizado","deleteRecordById","findByIdAndDelete","deleteRecord"],"mappings":"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","sourcesContent":["import Record from '../models/Record'\r\nimport Sale from '../models/Sale'\r\n\r\nexport const createRecord = async(req, res) => {\r\n    const { fecha_recepcion, hora_recepcion, sales, fecha_ingreso_file, hora_ingreso_file, num_titulo, codigo_verificacion, observaciones, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente } = req.body;\r\n\r\n    try {\r\n\r\n        const nuevoInmatriculado = new Record({ fecha_recepcion, hora_recepcion, fecha_ingreso_file, hora_ingreso_file, num_titulo, codigo_verificacion, observaciones, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente });\r\n\r\n        //Sales\r\n        const expediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n        nuevoInmatriculado.sales = expediente.map(sales => sales._id);\r\n\r\n        const recordSaved = await nuevoInmatriculado.save();\r\n\r\n        if (recordSaved) {\r\n            res.json({ message: 'Inmatriculado creado con éxito' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getRecords = async(req, res) => {\r\n    const filtro1 = { path: 'sales', populate: { path: 'auto vendedor cliente' } };\r\n\r\n    try {\r\n        const expedientes = await Record.find().populate(filtro1)\r\n\r\n        if (expedientes.length > 0) {\r\n            res.json(expedientes);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen Inmatriculados' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const getRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    const filtro1 = { path: 'sales', populate: { path: 'auto vendedor  cliente' } };\r\n\r\n    try {\r\n\r\n        const expediente = await Record.findById(recordId).populate(filtro1);\r\n\r\n        if (expediente) {\r\n            res.json(expediente);\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe el Inmatriculado' });\r\n        }\r\n\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const updateRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    const { fecha_recepcion, hora_recepcion, sales, fecha_ingreso_file, hora_ingreso_file, num_titulo, codigo_verificacion, observaciones, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente } = req.body;\r\n\r\n    try {\r\n\r\n        //Expediente\r\n        const foundExpediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n\r\n        const objetoActualizado = await Record.findByIdAndUpdate(recordId, { fecha_recepcion, hora_recepcion, sales: foundExpediente.map(expediente => expediente._id), fecha_ingreso_file, hora_ingreso_file, num_titulo, codigo_verificacion, observaciones, status_tarjeta, num_placa, fecha_entrega_file, fecha_tramite_placa, status_placa, fecha_entrega_placa, fecha_entrega_cliente });\r\n\r\n        if (objetoActualizado) {\r\n            res.json({ message: 'Inmatriculado actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Inmatriculado a actualizar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport const deleteRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    try {\r\n        const deleteRecord = await Record.findByIdAndDelete(recordId);\r\n\r\n        if (deleteRecord) {\r\n            res.json({ message: 'Inmatriculado eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe Inmatriculado a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message })\r\n    }\r\n}"],"file":"record.controller.js"}