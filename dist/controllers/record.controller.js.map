{"version":3,"sources":["../../src/controllers/record.controller.js"],"names":["createRecord","req","res","body","fecha_recepcion","hora_recepcion","statusFile","fecha_devolucion_vendedor","hora_devolucion_vendedor","observaciones_file","sales","fecha_ingreso_file","hora_ingreso_file","num_titulo","codigo_verificacion","observaciones_registros","status_tarjeta","num_placa","fecha_entrega_file_recepcion","fecha_tramite_placa","status_placa","fecha_entrega_placa_recepcion","fecha_entrega_cliente","empleado","nuevoInmatriculado","Record","Sale","find","nro_comprobante","$in","expediente","cod_exp","_id","findByIdAndUpdate","pasoaTramite","act","map","User","name","foundEmployee","em","save","recordSaved","json","message","console","log","status","getRecords","filtro1","path","populate","expedientes","length","getRecordById","recordId","params","findById","getRecordByStatus","tarjeta","placa","entrega","filtro","where","equals","objeto","updateRecordById","foundExpediente","objetoActualizado","deleteRecordById","findByIdAndDelete","deleteRecord"],"mappings":"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","sourcesContent":["import Record from \"../models/Record\";\r\nimport Sale from \"../models/Sale\";\r\nimport User from \"../models/User\";\r\n\r\nexport const createRecord = async(req, res) => {\r\n    const {\r\n        fecha_recepcion,\r\n        hora_recepcion,\r\n        statusFile,\r\n        fecha_devolucion_vendedor,\r\n        hora_devolucion_vendedor,\r\n        observaciones_file,\r\n        sales,\r\n        fecha_ingreso_file,\r\n        hora_ingreso_file,\r\n        num_titulo,\r\n        codigo_verificacion,\r\n        observaciones_registros,\r\n        status_tarjeta,\r\n        num_placa,\r\n        fecha_entrega_file_recepcion,\r\n        fecha_tramite_placa,\r\n        status_placa,\r\n        fecha_entrega_placa_recepcion,\r\n        fecha_entrega_cliente,\r\n        empleado,\r\n    } = req.body;\r\n\r\n    try {\r\n        const nuevoInmatriculado = new Record({\r\n            fecha_recepcion,\r\n            hora_recepcion,\r\n            statusFile,\r\n            fecha_devolucion_vendedor,\r\n            hora_devolucion_vendedor,\r\n            observaciones_file,\r\n            fecha_ingreso_file,\r\n            hora_ingreso_file,\r\n            num_titulo,\r\n            codigo_verificacion,\r\n            observaciones_registros,\r\n            status_tarjeta,\r\n            num_placa,\r\n            fecha_entrega_file_recepcion,\r\n            fecha_tramite_placa,\r\n            status_placa,\r\n            fecha_entrega_placa_recepcion,\r\n            fecha_entrega_cliente,\r\n        });\r\n\r\n        //Sales\r\n        const expediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n        const cod_exp = expediente[0]._id;\r\n        const act = await Sale.findByIdAndUpdate(cod_exp, { pasoaTramite: 1 });\r\n        //console.log(act);\r\n        nuevoInmatriculado.sales = expediente.map((sales) => sales._id);\r\n\r\n        //Empleado\r\n        const foundEmployee = await User.find({ name: { $in: empleado } });\r\n        nuevoInmatriculado.empleado = foundEmployee.map((em) => em._id);\r\n\r\n        const recordSaved = await nuevoInmatriculado.save();\r\n\r\n        if (recordSaved) {\r\n            res.json({ message: \"Inmatriculado creado con éxito\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getRecords = async(req, res) => {\r\n    const filtro1 = {\r\n        path: \"sales\",\r\n        populate: { path: \"auto vendedor cliente\" },\r\n    };\r\n\r\n    try {\r\n        const expedientes = await Record.find().populate(filtro1).populate(\"empleado\");\r\n\r\n        if (expedientes.length > 0) {\r\n            res.json(expedientes);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen Inmatriculados\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    const filtro1 = {\r\n        path: \"sales\",\r\n        populate: { path: \"auto vendedor cliente\" },\r\n    };\r\n\r\n    try {\r\n        const expediente = await Record.findById(recordId).populate(filtro1).populate(\"empleado\");\r\n\r\n        if (expediente) {\r\n            res.json(expediente);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe el Inmatriculado\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const getRecordByStatus = async(req, res) => {\r\n    const { tarjeta, placa, entrega } = req.body;\r\n\r\n    const filtro = { path: \"sales\", populate: { path: \"auto vendedor cliente\" } };\r\n\r\n    try {\r\n        const objeto = await Record.find({}).populate(filtro).where(\"status_tarjeta\").equals(tarjeta).where(\"status_placa\").equals(placa);\r\n        /* .where('pasoaEntrega').equals(entrega); */\r\n\r\n        //console.log(req.body);\r\n\r\n        if (objeto.length > 0) {\r\n            res.json(objeto);\r\n        } else {\r\n            return res.status(404).json({ message: \"No existen expedientes Ready\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const updateRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    const {\r\n        fecha_recepcion,\r\n        hora_recepcion,\r\n        statusFile,\r\n        fecha_devolucion_vendedor,\r\n        hora_devolucion_vendedor,\r\n        observaciones_file,\r\n        sales,\r\n        fecha_ingreso_file,\r\n        hora_ingreso_file,\r\n        num_titulo,\r\n        codigo_verificacion,\r\n        observaciones_registros,\r\n        status_tarjeta,\r\n        num_placa,\r\n        fecha_entrega_file_recepcion,\r\n        fecha_tramite_placa,\r\n        status_placa,\r\n        fecha_entrega_placa_recepcion,\r\n        fecha_entrega_cliente,\r\n    } = req.body;\r\n\r\n    try {\r\n        //Expediente\r\n        const foundExpediente = await Sale.find({\r\n            nro_comprobante: { $in: sales },\r\n        });\r\n\r\n        const objetoActualizado = await Record.findByIdAndUpdate(recordId, {\r\n            fecha_recepcion,\r\n            hora_recepcion,\r\n            statusFile,\r\n            fecha_devolucion_vendedor,\r\n            hora_devolucion_vendedor,\r\n            observaciones_file,\r\n            sales: foundExpediente.map((expediente) => expediente._id),\r\n            fecha_ingreso_file,\r\n            hora_ingreso_file,\r\n            num_titulo,\r\n            codigo_verificacion,\r\n            observaciones_registros,\r\n            status_tarjeta,\r\n            num_placa,\r\n            fecha_entrega_file_recepcion,\r\n            fecha_tramite_placa,\r\n            status_placa,\r\n            fecha_entrega_placa_recepcion,\r\n            fecha_entrega_cliente,\r\n        });\r\n\r\n        if (objetoActualizado) {\r\n            res.json({ message: \"Inmatriculado actualizado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Inmatriculado a actualizar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};\r\n\r\nexport const deleteRecordById = async(req, res) => {\r\n    const { recordId } = req.params;\r\n\r\n    try {\r\n        const deleteRecord = await Record.findByIdAndDelete(recordId);\r\n\r\n        if (deleteRecord) {\r\n            res.json({ message: \"Inmatriculado eliminado con éxito\" });\r\n        } else {\r\n            return res.status(404).json({ message: \"No existe Inmatriculado a eliminar\" });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        res.status(409).json({ message: err.message });\r\n    }\r\n};"],"file":"record.controller.js"}