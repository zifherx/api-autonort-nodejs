{"version":3,"sources":["../../src/controllers/record.controller.js"],"names":["recordController","createOne","req","res","body","codigoInterno","sucursal_tramite","sucursalE","statusFile","estadoFileE","status_tarjeta","estadoRPE","status_placa","estadoAAPE","fecha_recepcion","hora_recepcion","observaciones_file","sales","fecha_ingreso_file","hora_ingreso_file","num_titulo","codigo_verificacion","observaciones_registros","motivo_observacion","num_placa","fecha_entrega_file_recepcion","fecha_tramite_placa","fecha_entrega_placa_recepcion","observaciones_aap","empleado","nuevoInmatriculado","Record","Sale","findOne","nro_comprobante","salesFound","status","json","message","findByIdAndUpdate","_id","pasoaTramite","salesChanged","Sucursal","name","sucursalFound","StatusFile","estadoFileFound","undefined","StatusRP","estadoRPFound","StatusAAP","estadoAAPFound","User","username","foundEmployee","save","query","console","log","getAll","find","sort","populate","path","select","length","total","all","getOneById","recordId","params","findById","one","getAllBySucursal","start","end","$or","$regex","$gte","Date","$lte","updateOneById","isPendienteFirma","fechaPendienteFirma","isFirmado","fechaFirmado","isLegalizado","fechaLegalizado","isFinalizado","fechaFinalizado","estadoRPNull","estadoAAPNull","estadoAAP","deleteOneById","findByIdAndDelete","getAllBySeller","seller","match","obj","filter","b","vendedor","countAllByStatus","estado","countDocuments"],"mappings":"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","sourcesContent":["import Record from \"../models/Record\";\r\nimport Sale from \"../models/Sale\";\r\nimport StatusAAP from \"../models/StatusAAP\";\r\nimport StatusFile from \"../models/StatusFile\";\r\nimport StatusRP from \"../models/StatusRP\";\r\nimport Sucursal from \"../models/Sucursal\";\r\nimport User from \"../models/User\";\r\n\r\nconst recordController = {};\r\n\r\nrecordController.createOne = async (req, res) => {\r\n     const {\r\n          codigoInterno,\r\n          sucursal_tramite,\r\n          sucursalE,\r\n          statusFile,\r\n          estadoFileE,\r\n          status_tarjeta,\r\n          estadoRPE,\r\n          status_placa,\r\n          estadoAAPE,\r\n          fecha_recepcion,\r\n          hora_recepcion,\r\n          observaciones_file,\r\n          sales,\r\n          fecha_ingreso_file,\r\n          hora_ingreso_file,\r\n          num_titulo,\r\n          codigo_verificacion,\r\n          observaciones_registros,\r\n          motivo_observacion,\r\n          num_placa,\r\n          fecha_entrega_file_recepcion,\r\n          fecha_tramite_placa,\r\n          fecha_entrega_placa_recepcion,\r\n          observaciones_aap,\r\n          empleado,\r\n     } = req.body;\r\n\r\n     try {\r\n          const nuevoInmatriculado = new Record({\r\n               codigoInterno,\r\n               sucursal_tramite,\r\n               fecha_recepcion,\r\n               hora_recepcion,\r\n               statusFile,\r\n               observaciones_file,\r\n               fecha_ingreso_file,\r\n               hora_ingreso_file,\r\n               num_titulo,\r\n               codigo_verificacion,\r\n               observaciones_registros,\r\n               motivo_observacion,\r\n               status_tarjeta,\r\n               num_placa,\r\n               fecha_entrega_file_recepcion,\r\n               fecha_tramite_placa,\r\n               status_placa,\r\n               fecha_entrega_placa_recepcion,\r\n               observaciones_aap,\r\n          });\r\n\r\n          // Expediente\r\n          const salesFound = await Sale.findOne({ nro_comprobante: sales });\r\n          if (!salesFound) return res.status(404).json({ message: `Expediente ${sales} no tiene comprobante` });\r\n          const salesChanged = await Sale.findByIdAndUpdate(salesFound._id, { pasoaTramite: 1 });\r\n          nuevoInmatriculado.sales = salesFound._id;\r\n\r\n          // Sucursal\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n          nuevoInmatriculado.sucursalE = sucursalFound._id;\r\n\r\n          // Estado File\r\n          const estadoFileFound = await StatusFile.findOne({ name: estadoFileE });\r\n          if (!estadoFileFound) return res.status(404).json({ message: `Estado File ${estadoFileE} no encontrado` });\r\n          nuevoInmatriculado.estadoFileE = estadoFileFound._id;\r\n\r\n          // Estado RP\r\n          if (estadoRPE == null || estadoRPE == undefined || estadoRPE == \"\") {\r\n               nuevoInmatriculado.estadoRPE = null;\r\n          } else {\r\n               const estadoRPFound = await StatusRP.findOne({ name: estadoRPE });\r\n               if (!estadoRPFound) return res.status(404).json({ message: `Estado RP ${estadoRPE} no encontrado` });\r\n               nuevoInmatriculado.estadoRPE = estadoRPFound._id;\r\n          }\r\n\r\n          // Estado AAP\r\n          if (estadoAAPE == null || estadoAAPE == undefined || estadoAAPE == \"\") {\r\n               nuevoInmatriculado.estadoAAPE = null;\r\n          } else {\r\n               const estadoAAPFound = await StatusAAP.findOne({ name: estadoAAPE });\r\n               if (!estadoAAPFound) return res.status(404).json({ message: `Estado AAP ${estadoAAPE} no encontrado` });\r\n               nuevoInmatriculado.estadoAAPE = estadoAAPFound._id;\r\n          }\r\n\r\n          // Empleado\r\n          const foundEmployee = await User.findOne({ username: empleado });\r\n          if (!foundEmployee) return res.status(404).json({ message: `Colaborador ${empleado} no encontrado` });\r\n          nuevoInmatriculado.empleado = foundEmployee._id;\r\n\r\n          const query = await nuevoInmatriculado.save();\r\n\r\n          if (query) {\r\n               res.json({ message: \"Trámite creado con éxito\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.getAll = async (req, res) => {\r\n     try {\r\n          const query = await Record.find()\r\n               .sort({ fecha_recepcion: -1 })\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoFileE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoRPE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoAAPE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"sales\",\r\n                    select: \"auto vendedor cliente\",\r\n                    populate: [\r\n                         {\r\n                              path: \"auto\",\r\n                              select: \"cod_tdp version\",\r\n                         },\r\n                         {\r\n                              path: \"vendedor\",\r\n                              select: \"name document\",\r\n                         },\r\n                         {\r\n                              path: \"cliente\",\r\n                              select: \"name document\",\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen Trámites\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.getOneById = async (req, res) => {\r\n     const { recordId } = req.params;\r\n\r\n     try {\r\n          const query = await Record.findById(recordId)\r\n               .populate({\r\n                    path: \"sucursalE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoFileE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoRPE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"estadoAAPE\",\r\n                    select: \"name\",\r\n               })\r\n               .populate({\r\n                    path: \"sales\",\r\n                    select: \"auto vendedor cliente fecha_cancelacion sucursalE sucursal_venta serie_tdp nro_comprobante\",\r\n                    populate: [\r\n                         {\r\n                              path: \"auto\",\r\n                              select: \"cod_tdp version model\",\r\n                              populate: {\r\n                                   path: \"model\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                         {\r\n                              path: \"vendedor\",\r\n                              select: \"name document\",\r\n                         },\r\n                         {\r\n                              path: \"cliente\",\r\n                              select: \"name document\",\r\n                         },\r\n                         {\r\n                              path: \"sucursalE\",\r\n                              select: \"name\",\r\n                         },\r\n                    ],\r\n               })\r\n               .populate({\r\n                    path: \"empleado\",\r\n                    select: \"name username\",\r\n               });\r\n\r\n          if (query) {\r\n               res.json({ one: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe el Trámite\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.getAllBySucursal = async (req, res) => {\r\n     const { sucursalE, start, end } = req.body;\r\n     let query = null;\r\n\r\n     try {\r\n          const sucursalFound = await Sucursal.findOne({ name: sucursalE });\r\n          // if (!sucursalFound) return res.status(404).json({ message: `Sucursal ${sucursalE} no encontrada` });\r\n\r\n          if (start == null || start == undefined || start == \"\") {\r\n               query = await Record.find({\r\n                    $or: [{ sucursalE: sucursalFound._id }, { sucursal_tramite: { $regex: \".*\" + sucursalE + \".*\" } }],\r\n               })\r\n                    .sort({ fecha_recepcion: -1 })\r\n                    .populate({\r\n                         path: \"sucursalE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"estadoFileE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"estadoRPE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"estadoAAPE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"sales\",\r\n                         select: \"auto vendedor cliente serie_tdp\",\r\n                         populate: [\r\n                              {\r\n                                   path: \"auto\",\r\n                                   select: \"cod_tdp version model\",\r\n                                   populate: {\r\n                                        path: \"model\",\r\n                                        select: \"name avatar\",\r\n                                   },\r\n                              },\r\n                              {\r\n                                   path: \"vendedor\",\r\n                                   select: \"name document avatar\",\r\n                              },\r\n                              {\r\n                                   path: \"cliente\",\r\n                                   select: \"name document\",\r\n                              },\r\n                         ],\r\n                    })\r\n                    .populate({\r\n                         path: \"empleado\",\r\n                         select: \"name username\",\r\n                    });\r\n          } else {\r\n               query = await Record.find({\r\n                    sucursal_tramite: { $regex: \".*\" + sucursalE + \".*\" },\r\n                    fecha_recepcion: { $gte: new Date(start), $lte: new Date(end) },\r\n               })\r\n                    .sort({ fecha_recepcion: -1 })\r\n                    .populate({\r\n                         path: \"sucursalE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"estadoFileE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"estadoRPE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"estadoAAPE\",\r\n                         select: \"name\",\r\n                    })\r\n                    .populate({\r\n                         path: \"sales\",\r\n                         select: \"auto vendedor cliente serie_tdp\",\r\n                         populate: [\r\n                              {\r\n                                   path: \"auto\",\r\n                                   select: \"cod_tdp version model\",\r\n                                   populate: {\r\n                                        path: \"model\",\r\n                                        select: \"name avatar\",\r\n                                   },\r\n                              },\r\n                              {\r\n                                   path: \"vendedor\",\r\n                                   select: \"name document avatar\",\r\n                              },\r\n                              {\r\n                                   path: \"cliente\",\r\n                                   select: \"name document\",\r\n                              },\r\n                         ],\r\n                    })\r\n                    .populate({\r\n                         path: \"empleado\",\r\n                         select: \"name username\",\r\n                    });\r\n          }\r\n\r\n          if (query.length > 0) {\r\n               res.json({ total: query.length, all: query });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existen Trámites\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.updateOneById = async (req, res) => {\r\n     const { recordId } = req.params;\r\n     const {\r\n          statusFile,\r\n          estadoFileE,\r\n          observaciones_file,\r\n          isPendienteFirma,\r\n          fechaPendienteFirma,\r\n          isFirmado,\r\n          fechaFirmado,\r\n          isLegalizado,\r\n          fechaLegalizado,\r\n          isFinalizado,\r\n          fechaFinalizado,\r\n          fecha_ingreso_file,\r\n          hora_ingreso_file,\r\n          num_titulo,\r\n          codigo_verificacion,\r\n          observaciones_registros,\r\n          motivo_observacion,\r\n          num_placa,\r\n          status_tarjeta,\r\n          estadoRPE,\r\n          fecha_entrega_file_recepcion,\r\n          fecha_tramite_placa,\r\n          status_placa,\r\n          estadoAAPE,\r\n          fecha_entrega_placa_recepcion,\r\n     } = req.body;\r\n\r\n     let estadoRPNull = null;\r\n     let estadoAAPNull = null;\r\n     let query = null;\r\n\r\n     try {\r\n          const estadoFileFound = await StatusFile.findOne({ name: estadoFileE });\r\n          if (!estadoFileFound) return res.status(404).json({ message: `Estado File ${estadoFileE} no encontrado` });\r\n\r\n          if (estadoRPE == null || estadoRPE == undefined || estadoRPE == \"\") {\r\n               estadoRPNull = null;\r\n          } else {\r\n               const estadoRPFound = await StatusRP.findOne({ name: estadoRPE });\r\n               if (!estadoRPFound) return res.status(404).json({ message: `Estado RP ${estadoRPE} no encontrado` });\r\n               estadoRPNull = estadoRPFound._id;\r\n          }\r\n\r\n          if (estadoAAPE == null || estadoAAPE == undefined || estadoAAPE == \"\") {\r\n               estadoAAPNull = null;\r\n          } else {\r\n               const estadoAAPFound = await StatusAAP.findOne({ name: estadoAAPE });\r\n               if (!estadoAAPFound) return res.status(404).json({ message: `Estado AAP ${estadoAAPE} no encontrado` });\r\n               estadoAAPNull = estadoAAPFound._id;\r\n          }\r\n\r\n          if (estadoFileE == \"Pendiente de Firma\") {\r\n               query = await Record.findByIdAndUpdate(recordId, {\r\n                    statusFile,\r\n                    estadoFileE: estadoFileFound._id,\r\n                    observaciones_file,\r\n                    isPendienteFirma,\r\n                    fechaPendienteFirma,\r\n                    fecha_ingreso_file,\r\n                    hora_ingreso_file,\r\n                    num_titulo,\r\n                    codigo_verificacion,\r\n                    observaciones_registros,\r\n                    motivo_observacion,\r\n                    num_placa,\r\n                    status_tarjeta,\r\n                    estadoRPE: estadoRPNull,\r\n                    fecha_entrega_file_recepcion,\r\n                    fecha_tramite_placa,\r\n                    status_placa,\r\n                    estadoAAPE: estadoAAPNull,\r\n                    fecha_entrega_placa_recepcion,\r\n               });\r\n          } else if (estadoFileE == \"Firmado\") {\r\n               query = await Record.findByIdAndUpdate(recordId, {\r\n                    statusFile,\r\n                    estadoFileE: estadoFileFound._id,\r\n                    observaciones_file,\r\n                    isFirmado,\r\n                    fechaFirmado,\r\n                    fecha_ingreso_file,\r\n                    hora_ingreso_file,\r\n                    num_titulo,\r\n                    codigo_verificacion,\r\n                    observaciones_registros,\r\n                    motivo_observacion,\r\n                    num_placa,\r\n                    status_tarjeta,\r\n                    estadoRPE: estadoRPNull,\r\n                    fecha_entrega_file_recepcion,\r\n                    fecha_tramite_placa,\r\n                    status_placa,\r\n                    estadoAAP: estadoAAPNull,\r\n                    fecha_entrega_placa_recepcion,\r\n               });\r\n          } else if (estadoFileE == \"Legalizado\") {\r\n               query = await Record.findByIdAndUpdate(recordId, {\r\n                    statusFile,\r\n                    estadoFileE: estadoFileFound._id,\r\n                    observaciones_file,\r\n                    isLegalizado,\r\n                    fechaLegalizado,\r\n                    fecha_ingreso_file,\r\n                    hora_ingreso_file,\r\n                    num_titulo,\r\n                    codigo_verificacion,\r\n                    observaciones_registros,\r\n                    motivo_observacion,\r\n                    num_placa,\r\n                    status_tarjeta,\r\n                    estadoRPE: estadoRPNull,\r\n                    fecha_entrega_file_recepcion,\r\n                    fecha_tramite_placa,\r\n                    status_placa,\r\n                    estadoAAP: estadoAAPNull,\r\n                    fecha_entrega_placa_recepcion,\r\n               });\r\n          } else if (estadoFileE == \"Finalizado\") {\r\n               query = await Record.findByIdAndUpdate(recordId, {\r\n                    statusFile,\r\n                    estadoFileE: estadoFileFound._id,\r\n                    observaciones_file,\r\n                    isFinalizado,\r\n                    fechaFinalizado,\r\n                    fecha_ingreso_file,\r\n                    hora_ingreso_file,\r\n                    num_titulo,\r\n                    codigo_verificacion,\r\n                    observaciones_registros,\r\n                    motivo_observacion,\r\n                    num_placa,\r\n                    status_tarjeta,\r\n                    estadoRPE: estadoRPNull,\r\n                    fecha_entrega_file_recepcion,\r\n                    fecha_tramite_placa,\r\n                    status_placa,\r\n                    estadoAAP: estadoAAPNull,\r\n                    fecha_entrega_placa_recepcion,\r\n               });\r\n          }\r\n\r\n          if (query) {\r\n               res.json({ message: \"Trámite actualizado con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe trámite a actualizar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.deleteOneById = async (req, res) => {\r\n     const { recordId } = req.params;\r\n\r\n     try {\r\n          const query = await Record.findByIdAndDelete(recordId);\r\n\r\n          if (query) {\r\n               res.json({ message: \"Inmatriculación eliminada con éxito\" });\r\n          } else {\r\n               return res.status(404).json({ message: \"No existe Inmatriculación a eliminar\" });\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.getAllBySeller = async (req, res) => {\r\n     const { seller, start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Record.find({\r\n               fecha_recepcion: { $gte: new Date(start), $lte: new Date(end) },\r\n          }).populate({\r\n               path: \"sales\",\r\n               select: \"vendedor cliente auto serie_tdp ubicacion_vehiculo ubicacionVehiculoE\",\r\n               populate: [\r\n                    {\r\n                         path: \"cliente\",\r\n                         select: \"name document\",\r\n                    },\r\n                    {\r\n                         path: \"auto\",\r\n                         select: \"cod_tdp model version\",\r\n                         populate: {\r\n                              path: \"model\",\r\n                              select: \"name avatar marca\",\r\n                              populate: {\r\n                                   path: \"marca\",\r\n                                   select: \"name avatar\",\r\n                              },\r\n                         },\r\n                    },\r\n                    {\r\n                         path: \"vendedor\",\r\n                         select: \"name\",\r\n                         match: {\r\n                              name: seller,\r\n                         },\r\n                    },\r\n                    {\r\n                         path: \"ubicacionVehiculoE\",\r\n                         select: \"name\",\r\n                    },\r\n               ],\r\n          });\r\n\r\n          let obj = query.filter((b) => b.sales.vendedor);\r\n\r\n          if (obj.length > 0) {\r\n               res.json({ total: obj.length, all: obj });\r\n          }else{\r\n               return res.status(404).json({message: `Asesor ${seller} no cuenta con trámites`});\r\n          }\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nrecordController.countAllByStatus = async (req, res) => {\r\n     const { estado, sucursalE, start, end } = req.body;\r\n\r\n     try {\r\n          const query = await Record.find({\r\n               statusFile: { $regex: '.*' + estado + '.*'},\r\n               sucursal_tramite: { $regex: \".*\" + sucursalE + \".*\" },\r\n               fecha_recepcion: { $gte: new Date(start), $lte: new Date(end) },\r\n          }).countDocuments();\r\n\r\n          if (query >= 0) res.json({ total: query });\r\n     } catch (err) {\r\n          console.log(err);\r\n          return res.status(503).json({ message: err.message });\r\n     }\r\n};\r\n\r\nexport default recordController;\r\n"],"file":"record.controller.js"}