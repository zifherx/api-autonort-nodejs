{"version":3,"sources":["../../src/controllers/record.controller.js"],"names":["createRecord","req","res","body","fecha_recepcion","hora_recepcion","fecha_recepcion_vendedor","fecha_devolucion_vendedor","sales","fecha_ingreso_file","hora_ingreso_file","num_titulo","codigo_verificacion","observaciones","status_tarjeta","num_placa","fecha_entrega_file_recepcion","fecha_tramite_placa","status_placa","fecha_entrega_placa_recepcion","fecha_entrega_cliente","empleado","nuevoInmatriculado","Record","Sale","find","nro_comprobante","$in","expediente","cod_exp","_id","findByIdAndUpdate","pasoaTramite","act","map","User","name","foundEmployee","em","save","recordSaved","json","message","console","log","status","getRecords","filtro1","path","populate","expedientes","length","getRecordById","recordId","params","findById","getRecordByStatus","tarjeta","placa","entrega","filtro","where","equals","objeto","updateRecordById","foundExpediente","objetoActualizado","deleteRecordById","findByIdAndDelete","deleteRecord"],"mappings":"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","sourcesContent":["import Record from \"../models/Record\";\r\nimport Sale from \"../models/Sale\";\r\nimport User from \"../models/User\";\r\n\r\nexport const createRecord = async (req, res) => {\r\n  const {\r\n    fecha_recepcion,\r\n    hora_recepcion,\r\n    fecha_recepcion_vendedor,\r\n    fecha_devolucion_vendedor,\r\n    sales,\r\n    fecha_ingreso_file,\r\n    hora_ingreso_file,\r\n    num_titulo,\r\n    codigo_verificacion,\r\n    observaciones,\r\n    status_tarjeta,\r\n    num_placa,\r\n    fecha_entrega_file_recepcion,\r\n    fecha_tramite_placa,\r\n    status_placa,\r\n    fecha_entrega_placa_recepcion,\r\n    fecha_entrega_cliente,\r\n    empleado,\r\n  } = req.body;\r\n\r\n  try {\r\n    const nuevoInmatriculado = new Record({\r\n      fecha_recepcion,\r\n      hora_recepcion,\r\n      fecha_recepcion_vendedor,\r\n      fecha_devolucion_vendedor,\r\n      fecha_ingreso_file,\r\n      hora_ingreso_file,\r\n      num_titulo,\r\n      codigo_verificacion,\r\n      observaciones,\r\n      status_tarjeta,\r\n      num_placa,\r\n      fecha_entrega_file_recepcion,\r\n      fecha_tramite_placa,\r\n      status_placa,\r\n      fecha_entrega_placa_recepcion,\r\n      fecha_entrega_cliente,\r\n    });\r\n\r\n    //Sales\r\n    const expediente = await Sale.find({ nro_comprobante: { $in: sales } });\r\n    const cod_exp = expediente[0]._id;\r\n    const act = await Sale.findByIdAndUpdate(cod_exp, { pasoaTramite: 1 });\r\n    //console.log(act);\r\n    nuevoInmatriculado.sales = expediente.map((sales) => sales._id);\r\n\r\n    //Empleado\r\n    const foundEmployee = await User.find({ name: { $in: empleado } });\r\n    nuevoInmatriculado.empleado = foundEmployee.map((em) => em._id);\r\n\r\n    const recordSaved = await nuevoInmatriculado.save();\r\n\r\n    if (recordSaved) {\r\n      res.json({ message: \"Inmatriculado creado con éxito\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const getRecords = async (req, res) => {\r\n  const filtro1 = {\r\n    path: \"sales\",\r\n    populate: { path: \"auto vendedor cliente\" },\r\n  };\r\n\r\n  try {\r\n    const expedientes = await Record.find().populate(filtro1).populate('empleado');\r\n\r\n    if (expedientes.length > 0) {\r\n      res.json(expedientes);\r\n    } else {\r\n      return res.status(404).json({ message: \"No existen Inmatriculados\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const getRecordById = async (req, res) => {\r\n  const { recordId } = req.params;\r\n\r\n  const filtro1 = {\r\n    path: \"sales\",\r\n    populate: { path: \"auto vendedor cliente\" },\r\n  };\r\n\r\n  try {\r\n    const expediente = await Record.findById(recordId)\r\n      .populate(filtro1)\r\n      .populate(\"empleado\");\r\n\r\n    if (expediente) {\r\n      res.json(expediente);\r\n    } else {\r\n      return res.status(404).json({ message: \"No existe el Inmatriculado\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const getRecordByStatus = async (req, res) => {\r\n  const { tarjeta, placa, entrega } = req.body;\r\n\r\n  const filtro = { path: \"sales\", populate: { path: \"auto vendedor cliente\" } };\r\n\r\n  try {\r\n    const objeto = await Record.find({}).populate(filtro)\r\n      .where(\"status_tarjeta\").equals(tarjeta)\r\n      .where(\"status_placa\").equals(placa);\r\n      /* .where('pasoaEntrega').equals(entrega); */\r\n\r\n    //console.log(req.body);\r\n\r\n    if (objeto.length > 0) {\r\n      res.json(objeto);\r\n    } else {\r\n      return res.status(404).json({ message: \"No existen expedientes Ready\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const updateRecordById = async (req, res) => {\r\n  const { recordId } = req.params;\r\n\r\n  const {\r\n    fecha_recepcion,\r\n    hora_recepcion,\r\n    fecha_recepcion_vendedor,\r\n    fecha_devolucion_vendedor,\r\n    sales,\r\n    fecha_ingreso_file,\r\n    hora_ingreso_file,\r\n    num_titulo,\r\n    codigo_verificacion,\r\n    observaciones,\r\n    status_tarjeta,\r\n    num_placa,\r\n    fecha_entrega_file_recepcion,\r\n    fecha_tramite_placa,\r\n    status_placa,\r\n    fecha_entrega_placa_recepcion,\r\n    fecha_entrega_cliente,\r\n  } = req.body;\r\n\r\n  try {\r\n    //Expediente\r\n    const foundExpediente = await Sale.find({\r\n      nro_comprobante: { $in: sales },\r\n    });\r\n\r\n    const objetoActualizado = await Record.findByIdAndUpdate(recordId, {\r\n      fecha_recepcion,\r\n      hora_recepcion,\r\n      fecha_recepcion_vendedor,\r\n      fecha_devolucion_vendedor,\r\n      sales: foundExpediente.map((expediente) => expediente._id),\r\n      fecha_ingreso_file,\r\n      hora_ingreso_file,\r\n      num_titulo,\r\n      codigo_verificacion,\r\n      observaciones,\r\n      status_tarjeta,\r\n      num_placa,\r\n      fecha_entrega_file_recepcion,\r\n      fecha_tramite_placa,\r\n      status_placa,\r\n      fecha_entrega_placa_recepcion,\r\n      fecha_entrega_cliente,\r\n    });\r\n\r\n    if (objetoActualizado) {\r\n      res.json({ message: \"Inmatriculado actualizado con éxito\" });\r\n    } else {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"No existe Inmatriculado a actualizar\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n\r\nexport const deleteRecordById = async (req, res) => {\r\n  const { recordId } = req.params;\r\n\r\n  try {\r\n    const deleteRecord = await Record.findByIdAndDelete(recordId);\r\n\r\n    if (deleteRecord) {\r\n      res.json({ message: \"Inmatriculado eliminado con éxito\" });\r\n    } else {\r\n      return res\r\n        .status(404)\r\n        .json({ message: \"No existe Inmatriculado a eliminar\" });\r\n    }\r\n  } catch (err) {\r\n    console.log(err);\r\n    res.status(409).json({ message: err.message });\r\n  }\r\n};\r\n"],"file":"record.controller.js"}