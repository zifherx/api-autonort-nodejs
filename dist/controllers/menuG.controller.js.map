{"version":3,"sources":["../../src/controllers/menuG.controller.js"],"names":["menuController","getAll","req","res","MenuG","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","menuId","params","findById","one","getAllByActivos","estado","total_active","all_active","createOne","body","icon","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"mappings":"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","sourcesContent":["import MenuG from \"../models/MenuG\";\r\n\r\nconst menuController = {};\r\n\r\nmenuController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await MenuG.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen menús' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.getOneById = async(req, res) => {\r\n    const { menuId } = req.params;\r\n    try {\r\n        const query = await MenuG.findById(menuId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe menú' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.getAllByActivos = async(req, res) => {\r\n    try {\r\n        const query = await MenuG.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen menus activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmenuController.createOne = async(req, res) => {\r\n    const { name, icon, estado } = req.body;\r\n    try {\r\n        const obj = new MenuG({ name, icon, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Menú creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { menuId } = req.params;\r\n    try {\r\n        const query = await MenuG.findByIdAndUpdate(menuId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Menú actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe menú a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.deleteOneById = async(req, res) => {\r\n    const { menuId } = req.params;\r\n    try {\r\n        const query = await MenuG.findByIdAndDelete(menuId);\r\n        if (query) {\r\n            res.json({ message: 'Menú eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe menú a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default menuController;"],"file":"menuG.controller.js"}