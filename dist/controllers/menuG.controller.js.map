{"version":3,"file":"menuG.controller.js","names":["menuController","getAll","req","res","MenuG","find","sort","name","query","length","json","total","all","status","message","console","log","getOneById","itemId","params","findById","one","getAllByActivos","estado","total_active","all_active","createOne","body","icon","obj","save","updateOneById","findByIdAndUpdate","deleteOneById","findByIdAndDelete"],"sources":["../../src/controllers/menuG.controller.js"],"sourcesContent":["import MenuG from \"../models/MenuG\";\r\n\r\nconst menuController = {};\r\n\r\nmenuController.getAll = async(req, res) => {\r\n    try {\r\n        const query = await MenuG.find().sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total: query.length, all: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen menús' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.getOneById = async(req, res) => {\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await MenuG.findById(itemId);\r\n        if (query) {\r\n            res.json({one: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe menú' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.getAllByActivos = async(req, res) => {\r\n    try {\r\n        const query = await MenuG.find({ estado: true }).sort({ name: 1 });\r\n        if (query.length > 0) {\r\n            res.json({total_active: query.length, all_active: query});\r\n        } else {\r\n            return res.status(404).json({ message: 'No existen menus activos' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message });\r\n    }\r\n}\r\n\r\nmenuController.createOne = async(req, res) => {\r\n    const { name, icon, estado } = req.body;\r\n    try {\r\n        const obj = new MenuG({ name, icon, estado });\r\n\r\n        const query = await obj.save();\r\n\r\n        if (query) {\r\n            res.json({ message: 'Menú creado con éxito' })\r\n        }\r\n    } catch (err) {\r\n        console.log(err)\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.updateOneById = async(req, res) => {\r\n    const { name, estado } = req.body;\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await MenuG.findByIdAndUpdate(itemId, { name, estado });\r\n\r\n        if (query) {\r\n            res.json({ message: 'Menú actualizado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe menú a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nmenuController.deleteOneById = async(req, res) => {\r\n    const { itemId } = req.params;\r\n    try {\r\n        const query = await MenuG.findByIdAndDelete(itemId);\r\n        if (query) {\r\n            res.json({ message: 'Menú eliminado con éxito' });\r\n        } else {\r\n            return res.status(404).json({ message: 'No existe menú a eliminar' });\r\n        }\r\n    } catch (err) {\r\n        console.log(err);\r\n        return res.status(503).json({ message: err.message })\r\n    }\r\n}\r\n\r\nexport default menuController;"],"mappings":"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"}